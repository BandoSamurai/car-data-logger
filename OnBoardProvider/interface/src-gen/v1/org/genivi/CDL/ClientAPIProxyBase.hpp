/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: CDL Client APIs for providing data to on-board components
 */
#ifndef V1_ORG_GENIVI_CDL_Client_API_PROXY_BASE_HPP_
#define V1_ORG_GENIVI_CDL_Client_API_PROXY_BASE_HPP_

#include <v1/org/genivi/CDL/ClientAPI.hpp>


#include <v1/org/genivi/CDL/ClientAPITypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/ByteBuffer.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/SelectiveEvent.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace CDL {

class ClientAPIProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::SelectiveEvent<std::string, ::v1::org::genivi::CDL::ClientAPITypes::Types, std::string, ::v1::org::genivi::CDL::ClientAPITypes::CDLValue, uint64_t> NotifyDataSelectiveEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ClientAPITypes::Handle&, const ClientAPITypes::ResultCode&)> RegisterClientAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ClientAPITypes::ResultCode&)> SetListenDataAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ClientAPITypes::ResultCode&)> GetDataAsyncCallback;


    /**
     * description: notify data to client
     */
    virtual NotifyDataSelectiveEvent& getNotifyDataSelectiveEvent() = 0;

    /**
     * description: register and authenticate client
     */
    virtual void registerClient(const std::string &_key, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::Handle &_handle, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> registerClientAsync(const std::string &_key, RegisterClientAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: set id list for listen. only specified data will notified to client
     */
    virtual void setListenData(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setListenDataAsync(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, SetListenDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: get single data instantly
     */
    virtual void getData(const ClientAPITypes::Handle &_handle, const std::string &_signalName, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDataAsync(const ClientAPITypes::Handle &_handle, const std::string &_signalName, GetDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace CDL
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_CDL_Client_API_PROXY_BASE_HPP_
