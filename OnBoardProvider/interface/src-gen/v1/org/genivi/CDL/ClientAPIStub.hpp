/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: CDL Client APIs for providing data to on-board components
 */
#ifndef V1_ORG_GENIVI_CDL_Client_API_STUB_HPP_
#define V1_ORG_GENIVI_CDL_Client_API_STUB_HPP_

#include <functional>



#include <v1/org/genivi/CDL/ClientAPITypes.hpp>

#include <v1/org/genivi/CDL/ClientAPI.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/ByteBuffer.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace CDL {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ClientAPI. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ClientAPIStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual ClientAPI {
 public:

    /**
     * Sends a selective broadcast event for notifyData. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyDataSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_signalName, const ::v1::org::genivi::CDL::ClientAPITypes::Types &_type, const std::string &_unit, const ::v1::org::genivi::CDL::ClientAPITypes::CDLValue &_value, const uint64_t &_timeStamp) = 0;
    virtual void sendNotifyDataSelective(const std::string &_signalName, const ::v1::org::genivi::CDL::ClientAPITypes::Types &_type, const std::string &_unit, const ::v1::org::genivi::CDL::ClientAPITypes::CDLValue &_value, const uint64_t &_timeStamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeFornotifyDataSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromnotifyDataSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyDataSelective() = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForNotifyDataSelective_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ClientAPI.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ClientAPIStubRemoteEvent
{
public:
    virtual ~ClientAPIStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ClientAPI to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ClientAPIStub
    : public virtual CommonAPI::Stub<ClientAPIStubAdapter, ClientAPIStubRemoteEvent>
{
public:
    typedef std::function<void (ClientAPITypes::Handle _handle, ClientAPITypes::ResultCode _result)>registerClientReply_t;
    typedef std::function<void (ClientAPITypes::ResultCode _result)>setListenDataReply_t;
    typedef std::function<void (ClientAPITypes::ResultCode _result)>getDataReply_t;

    virtual ~ClientAPIStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: register and authenticate client
     */
    /// This is the method that will be called on remote calls on the method registerClient.
    virtual void registerClient(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _key, registerClientReply_t _reply) = 0;
    /**
     * description: set id list for listen. only specified data will notified to client
     */
    /// This is the method that will be called on remote calls on the method setListenData.
    virtual void setListenData(const std::shared_ptr<CommonAPI::ClientId> _client, ClientAPITypes::Handle _handle, std::vector<std::string> _signalNameList, ClientAPITypes::NotifyType _type, setListenDataReply_t _reply) = 0;
    /**
     * description: get single data instantly
     */
    /// This is the method that will be called on remote calls on the method getData.
    virtual void getData(const std::shared_ptr<CommonAPI::ClientId> _client, ClientAPITypes::Handle _handle, std::string _signalName, getDataReply_t _reply) = 0;
    /**
     * description: notify data to client
     */
    /**
     * Sends a selective broadcast event for notifyData to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireNotifyDataSelective(const std::string &_signalName, const ::v1::org::genivi::CDL::ClientAPITypes::Types &_type, const std::string &_unit, const ::v1::org::genivi::CDL::ClientAPITypes::CDLValue &_value, const uint64_t &_timeStamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retreives the list of all subscribed clients for notifyData
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyDataSelective() = 0;
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onNotifyDataSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions 
    virtual bool onNotifyDataSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    using CommonAPI::Stub<ClientAPIStubAdapter, ClientAPIStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ClientAPIStubAdapter, ClientAPIStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ClientAPIStubAdapter, ClientAPIStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ClientAPIStubRemoteEvent RemoteEventType;
    typedef ClientAPI StubInterface;
};

} // namespace CDL
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_CDL_Client_API_STUB_HPP_
