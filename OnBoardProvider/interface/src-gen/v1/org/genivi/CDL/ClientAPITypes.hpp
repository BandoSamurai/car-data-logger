/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_ORG_GENIVI_CDL_Client_API_Types_HPP_
#define V1_ORG_GENIVI_CDL_Client_API_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/ByteBuffer.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace CDL {

struct ClientAPITypes {
    /**
     * description: handle for client
     */
    typedef uint32_t Handle;
    /**
     * description: value of CDL data
     */
    typedef CommonAPI::Variant<uint8_t, int8_t, uint16_t, int16_t, uint32_t, int32_t, uint64_t, int64_t, bool, float, double, std::string, CommonAPI::ByteBuffer>  CDLValue;
    
    struct Types : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UINT8 = 0,
            INT8 = 1,
            UINT16 = 2,
            INT16 = 3,
            UINT32 = 4,
            INT32 = 5,
            UINT64 = 6,
            INT64 = 7,
            BOOLEAN = 8,
            FLOAT = 9,
            DOUBLE = 10,
            STRING = 11,
            BYTEBUFFER = 12
        };
        
        Types() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UINT8)) {}
        Types(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UINT8):
                case static_cast<int32_t>(Literal::INT8):
                case static_cast<int32_t>(Literal::UINT16):
                case static_cast<int32_t>(Literal::INT16):
                case static_cast<int32_t>(Literal::UINT32):
                case static_cast<int32_t>(Literal::INT32):
                case static_cast<int32_t>(Literal::UINT64):
                case static_cast<int32_t>(Literal::INT64):
                case static_cast<int32_t>(Literal::BOOLEAN):
                case static_cast<int32_t>(Literal::FLOAT):
                case static_cast<int32_t>(Literal::DOUBLE):
                case static_cast<int32_t>(Literal::STRING):
                case static_cast<int32_t>(Literal::BYTEBUFFER):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Types &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Types &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Types &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Types &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Types &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Types &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ResultCode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            RC_OK = 0,
            RC_AUTHENTICATION_FAILED = 1,
            RC_CLIENT_ALREADY_REGISTERED = 2,
            RC_INVALID_HANDLE = 3,
            RC_FAILED = 4
        };
        
        ResultCode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::RC_OK)) {}
        ResultCode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::RC_OK):
                case static_cast<int32_t>(Literal::RC_AUTHENTICATION_FAILED):
                case static_cast<int32_t>(Literal::RC_CLIENT_ALREADY_REGISTERED):
                case static_cast<int32_t>(Literal::RC_INVALID_HANDLE):
                case static_cast<int32_t>(Literal::RC_FAILED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ResultCode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ResultCode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ResultCode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ResultCode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ResultCode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ResultCode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NotifyType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NT_UPDATED = 0,
            NT_CHANGED = 1
        };
        
        NotifyType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NT_UPDATED)) {}
        NotifyType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NT_UPDATED):
                case static_cast<int32_t>(Literal::NT_CHANGED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NotifyType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NotifyType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NotifyType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NotifyType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NotifyType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NotifyType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.genivi.CDL.ClientAPITypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct ClientAPITypes

} // namespace CDL
} // namespace genivi
} // namespace org
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for Types
    template<>
    struct hash<::v1::org::genivi::CDL::ClientAPITypes::Types> {
        inline size_t operator()(const ::v1::org::genivi::CDL::ClientAPITypes::Types& types) const {
            return static_cast<int32_t>(types);
        }
    };
    //Hash for ResultCode
    template<>
    struct hash<::v1::org::genivi::CDL::ClientAPITypes::ResultCode> {
        inline size_t operator()(const ::v1::org::genivi::CDL::ClientAPITypes::ResultCode& resultCode) const {
            return static_cast<int32_t>(resultCode);
        }
    };
    //Hash for NotifyType
    template<>
    struct hash<::v1::org::genivi::CDL::ClientAPITypes::NotifyType> {
        inline size_t operator()(const ::v1::org::genivi::CDL::ClientAPITypes::NotifyType& notifyType) const {
            return static_cast<int32_t>(notifyType);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_CDL_Client_API_Types_HPP_
