/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: CDL Client APIs for providing data to on-board components
 */
#ifndef V1_ORG_GENIVI_CDL_Client_API_STUB_DEFAULT_HPP_
#define V1_ORG_GENIVI_CDL_Client_API_STUB_DEFAULT_HPP_


#include <v1/org/genivi/CDL/ClientAPIStub.hpp>
#include <sstream>

namespace v1 {
namespace org {
namespace genivi {
namespace CDL {

/**
 * Provides a default implementation for ClientAPIStubRemoteEvent and
 * ClientAPIStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class ClientAPIStubDefault
    : public virtual ClientAPIStub {
public:
    ClientAPIStubDefault();

    ClientAPIStubRemoteEvent* initStubAdapter(const std::shared_ptr<ClientAPIStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: register and authenticate client
     */
    virtual void registerClient(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _key, registerClientReply_t _reply);
    /**
     * description: set id list for listen. only specified data will notified to client
     */
    virtual void setListenData(const std::shared_ptr<CommonAPI::ClientId> _client, ClientAPITypes::Handle _handle, std::vector<std::string> _signalNameList, ClientAPITypes::NotifyType _type, setListenDataReply_t _reply);
    /**
     * description: get single data instantly
     */
    virtual void getData(const std::shared_ptr<CommonAPI::ClientId> _client, ClientAPITypes::Handle _handle, std::string _signalName, getDataReply_t _reply);

/**
 * description: notify data to client
 */
virtual void fireNotifyDataSelective(const std::string &_signalName, const ::v1::org::genivi::CDL::ClientAPITypes::Types &_type, const std::string &_unit, const ::v1::org::genivi::CDL::ClientAPITypes::CDLValue &_value, const uint64_t &_timeStamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyDataSelective();
/// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
virtual void onNotifyDataSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event);
/// Hook method for reacting accepting or denying new subscriptions 
virtual bool onNotifyDataSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client);


protected:
    class RemoteEventHandler: public virtual ClientAPIStubRemoteEvent {
    public:
        RemoteEventHandler(ClientAPIStubDefault *_defaultStub);


    private:
        ClientAPIStubDefault *defaultStub_;
    };
private:
    ClientAPIStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace CDL
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_CDL_Client_API_STUB_DEFAULT
