/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.10.v201611111521.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_DATCMANAGER_DATC_Manager_STUB_DEFAULT_HPP_
#define V1_COM_IVIS_DATCMANAGER_DATC_Manager_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/com/ivis/DATCManager/DATCManagerStub.hpp>
#include <sstream>

#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif

namespace v1 {
namespace com {
namespace ivis {
namespace DATCManager {

/**
 * Provides a default implementation for DATCManagerStubRemoteEvent and
 * DATCManagerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT DATCManagerStubDefault
    : public virtual DATCManagerStub {
public:
    COMMONAPI_EXPORT DATCManagerStubDefault();

    COMMONAPI_EXPORT DATCManagerStubRemoteEvent* initStubAdapter(const std::shared_ptr< DATCManagerStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode& getTemperatureModeAttribute();
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode& getTemperatureModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setTemperatureModeAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode _value);
    COMMONAPI_EXPORT virtual void setTemperatureModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode _value);
    COMMONAPI_EXPORT virtual const bool& getDualModeAttribute();
    COMMONAPI_EXPORT virtual const bool& getDualModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setDualModeAttribute(bool _value);
    COMMONAPI_EXPORT virtual void setDualModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    COMMONAPI_EXPORT virtual const bool& getAutoModeAttribute();
    COMMONAPI_EXPORT virtual const bool& getAutoModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setAutoModeAttribute(bool _value);
    COMMONAPI_EXPORT virtual void setAutoModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    COMMONAPI_EXPORT virtual const bool& getAirConditionerRunAttribute();
    COMMONAPI_EXPORT virtual const bool& getAirConditionerRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setAirConditionerRunAttribute(bool _value);
    COMMONAPI_EXPORT virtual void setAirConditionerRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    COMMONAPI_EXPORT virtual const bool& getHeaterRunAttribute();
    COMMONAPI_EXPORT virtual const bool& getHeaterRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setHeaterRunAttribute(bool _value);
    COMMONAPI_EXPORT virtual void setHeaterRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    COMMONAPI_EXPORT virtual const double& getInteriorTemperautreAttribute();
    COMMONAPI_EXPORT virtual const double& getInteriorTemperautreAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setInteriorTemperautreAttribute(double _value);
    COMMONAPI_EXPORT virtual const double& getExteriorTemperatureAttribute();
    COMMONAPI_EXPORT virtual const double& getExteriorTemperatureAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setExteriorTemperatureAttribute(double _value);
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures& getTargetTemperaturesAttribute();
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures& getTargetTemperaturesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setTargetTemperaturesAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures _value);
    COMMONAPI_EXPORT virtual void setTargetTemperaturesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures _value);
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections& getFanDirectionsAttribute();
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections& getFanDirectionsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setFanDirectionsAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections _value);
    COMMONAPI_EXPORT virtual void setFanDirectionsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections _value);
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds& getFanSpeedsAttribute();
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds& getFanSpeedsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setFanSpeedsAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds _value);
    COMMONAPI_EXPORT virtual void setFanSpeedsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds _value);
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts& getDefrostsAttribute();
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts& getDefrostsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setDefrostsAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts _value);
    COMMONAPI_EXPORT virtual void setDefrostsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts _value);
    COMMONAPI_EXPORT virtual const bool& getAirRecirculationAttribute();
    COMMONAPI_EXPORT virtual const bool& getAirRecirculationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setAirRecirculationAttribute(bool _value);
    COMMONAPI_EXPORT virtual void setAirRecirculationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    COMMONAPI_EXPORT virtual const bool& getSteeringWheelHeaterAttribute();
    COMMONAPI_EXPORT virtual const bool& getSteeringWheelHeaterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setSteeringWheelHeaterAttribute(bool _value);
    COMMONAPI_EXPORT virtual void setSteeringWheelHeaterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters& getSeatHeatersAttribute();
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters& getSeatHeatersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setSeatHeatersAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters _value);
    COMMONAPI_EXPORT virtual void setSeatHeatersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters _value);
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers& getSeatCoolersAttribute();
    COMMONAPI_EXPORT virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers& getSeatCoolersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setSeatCoolersAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers _value);
    COMMONAPI_EXPORT virtual void setSeatCoolersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers _value);

    COMMONAPI_EXPORT virtual void requestGetSupportedTemperatureRange(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSupportedTemperatureRangeReply_t _reply);
    COMMONAPI_EXPORT virtual void requestSetTargetTemperature(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType _areaType, double _temperature, requestSetTargetTemperatureReply_t _reply);
    COMMONAPI_EXPORT virtual void requestSetTargetTemperatureByDelta(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType _areaType, double _temperatureDelta, requestSetTargetTemperatureByDeltaReply_t _reply);
    COMMONAPI_EXPORT virtual void requestGetSupportedFanDirection(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSupportedFanDirectionReply_t _reply);
    COMMONAPI_EXPORT virtual void requestGetSupportedFanSpeedRange(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSupportedFanSpeedRangeReply_t _reply);
    COMMONAPI_EXPORT virtual void requestSetFanSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType _areaType, uint16_t _fanSpeed, requestSetFanSpeedReply_t _reply);
    COMMONAPI_EXPORT virtual void requestSetFanSpeedByDelta(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType _areaType, uint16_t _fanSpeedDelta, requestSetFanSpeedByDeltaReply_t _reply);
    COMMONAPI_EXPORT virtual void requestGetSupportedDefrostTarget(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSupportedDefrostTargetReply_t _reply);
    COMMONAPI_EXPORT virtual void requestGetSteeringWheelHeaterSupported(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSteeringWheelHeaterSupportedReply_t _reply);
    COMMONAPI_EXPORT virtual void requestGetSeatHeaterSupported(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSeatHeaterSupportedReply_t _reply);
    COMMONAPI_EXPORT virtual void requestGetSeatCoolerSupported(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSeatCoolerSupportedReply_t _reply);

    COMMONAPI_EXPORT virtual void fireResponseGetSupportedTemperatureRangeEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::TemperatureRange &_temperatureRange);
    COMMONAPI_EXPORT virtual void fireResponseSetTargetTemperatureEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperature);
    COMMONAPI_EXPORT virtual void fireResponseGetSupportedFanDirectionEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SupportedFanDirectionList &_supportedFanDirectionList);
    COMMONAPI_EXPORT virtual void fireResponseSetFanDirectionEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EHvacFanDirection &_fanDirection);
    COMMONAPI_EXPORT virtual void fireResponseGetSupportedFanSpeedRangeEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeedRange &_fanSpeedRange);
    COMMONAPI_EXPORT virtual void fireResponseSetFanSpeedEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeed);
    COMMONAPI_EXPORT virtual void fireResponseGetSupportedDefrostTargetEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SupportedDefrostTargetList &_supportedDefrostTargetList);
    COMMONAPI_EXPORT virtual void fireResponseSetAirRecirculationEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const bool &_on);
    COMMONAPI_EXPORT virtual void fireResponseGetSteeringWheelHeaterSupportedEvent(const bool &_steeringWheelHeaterSupported);
    COMMONAPI_EXPORT virtual void fireResponseSetSteeringWheelHeaterEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const bool &_on);
    COMMONAPI_EXPORT virtual void fireResponseGetSeatHeaterSupportedEvent(const bool &_seatHeaterSupported);
    COMMONAPI_EXPORT virtual void fireResponseSetSeatHeaterEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const bool &_on);
    COMMONAPI_EXPORT virtual void fireResponseGetSeatCoolerSupportedEvent(const bool &_seatCoolerSupported);
    COMMONAPI_EXPORT virtual void fireResponseSetSeatCoolerEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const bool &_on);

    
protected:
    COMMONAPI_EXPORT virtual bool trySetTemperatureModeAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode _value);
    COMMONAPI_EXPORT virtual bool validateTemperatureModeAttributeRequestedValue(const ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode &_value);
    COMMONAPI_EXPORT virtual void onRemoteTemperatureModeAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetDualModeAttribute(bool _value);
    COMMONAPI_EXPORT virtual bool validateDualModeAttributeRequestedValue(const bool &_value);
    COMMONAPI_EXPORT virtual void onRemoteDualModeAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetAutoModeAttribute(bool _value);
    COMMONAPI_EXPORT virtual bool validateAutoModeAttributeRequestedValue(const bool &_value);
    COMMONAPI_EXPORT virtual void onRemoteAutoModeAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetAirConditionerRunAttribute(bool _value);
    COMMONAPI_EXPORT virtual bool validateAirConditionerRunAttributeRequestedValue(const bool &_value);
    COMMONAPI_EXPORT virtual void onRemoteAirConditionerRunAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetHeaterRunAttribute(bool _value);
    COMMONAPI_EXPORT virtual bool validateHeaterRunAttributeRequestedValue(const bool &_value);
    COMMONAPI_EXPORT virtual void onRemoteHeaterRunAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetInteriorTemperautreAttribute(double _value);
    COMMONAPI_EXPORT virtual bool validateInteriorTemperautreAttributeRequestedValue(const double &_value);
    COMMONAPI_EXPORT virtual bool trySetExteriorTemperatureAttribute(double _value);
    COMMONAPI_EXPORT virtual bool validateExteriorTemperatureAttributeRequestedValue(const double &_value);
    COMMONAPI_EXPORT virtual bool trySetTargetTemperaturesAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures _value);
    COMMONAPI_EXPORT virtual bool validateTargetTemperaturesAttributeRequestedValue(const ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures &_value);
    COMMONAPI_EXPORT virtual void onRemoteTargetTemperaturesAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetFanDirectionsAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections _value);
    COMMONAPI_EXPORT virtual bool validateFanDirectionsAttributeRequestedValue(const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections &_value);
    COMMONAPI_EXPORT virtual void onRemoteFanDirectionsAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetFanSpeedsAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds _value);
    COMMONAPI_EXPORT virtual bool validateFanSpeedsAttributeRequestedValue(const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds &_value);
    COMMONAPI_EXPORT virtual void onRemoteFanSpeedsAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetDefrostsAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts _value);
    COMMONAPI_EXPORT virtual bool validateDefrostsAttributeRequestedValue(const ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts &_value);
    COMMONAPI_EXPORT virtual void onRemoteDefrostsAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetAirRecirculationAttribute(bool _value);
    COMMONAPI_EXPORT virtual bool validateAirRecirculationAttributeRequestedValue(const bool &_value);
    COMMONAPI_EXPORT virtual void onRemoteAirRecirculationAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetSteeringWheelHeaterAttribute(bool _value);
    COMMONAPI_EXPORT virtual bool validateSteeringWheelHeaterAttributeRequestedValue(const bool &_value);
    COMMONAPI_EXPORT virtual void onRemoteSteeringWheelHeaterAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetSeatHeatersAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters _value);
    COMMONAPI_EXPORT virtual bool validateSeatHeatersAttributeRequestedValue(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters &_value);
    COMMONAPI_EXPORT virtual void onRemoteSeatHeatersAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetSeatCoolersAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers _value);
    COMMONAPI_EXPORT virtual bool validateSeatCoolersAttributeRequestedValue(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers &_value);
    COMMONAPI_EXPORT virtual void onRemoteSeatCoolersAttributeChanged();
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual DATCManagerStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(DATCManagerStubDefault *_defaultStub);

        COMMONAPI_EXPORT virtual bool onRemoteSetTemperatureModeAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetTemperatureModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode _value);
        COMMONAPI_EXPORT virtual void onRemoteTemperatureModeAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetDualModeAttribute(bool _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetDualModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        COMMONAPI_EXPORT virtual void onRemoteDualModeAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetAutoModeAttribute(bool _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetAutoModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        COMMONAPI_EXPORT virtual void onRemoteAutoModeAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetAirConditionerRunAttribute(bool _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetAirConditionerRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        COMMONAPI_EXPORT virtual void onRemoteAirConditionerRunAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetHeaterRunAttribute(bool _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetHeaterRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        COMMONAPI_EXPORT virtual void onRemoteHeaterRunAttributeChanged();



        COMMONAPI_EXPORT virtual bool onRemoteSetTargetTemperaturesAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetTargetTemperaturesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures _value);
        COMMONAPI_EXPORT virtual void onRemoteTargetTemperaturesAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetFanDirectionsAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetFanDirectionsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections _value);
        COMMONAPI_EXPORT virtual void onRemoteFanDirectionsAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetFanSpeedsAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetFanSpeedsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds _value);
        COMMONAPI_EXPORT virtual void onRemoteFanSpeedsAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetDefrostsAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetDefrostsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts _value);
        COMMONAPI_EXPORT virtual void onRemoteDefrostsAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetAirRecirculationAttribute(bool _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetAirRecirculationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        COMMONAPI_EXPORT virtual void onRemoteAirRecirculationAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetSteeringWheelHeaterAttribute(bool _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetSteeringWheelHeaterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        COMMONAPI_EXPORT virtual void onRemoteSteeringWheelHeaterAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetSeatHeatersAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetSeatHeatersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters _value);
        COMMONAPI_EXPORT virtual void onRemoteSeatHeatersAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetSeatCoolersAttribute(::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetSeatCoolersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers _value);
        COMMONAPI_EXPORT virtual void onRemoteSeatCoolersAttributeChanged();


    private:
        DATCManagerStubDefault *defaultStub_;
    };
private:
    DATCManagerStubDefault::RemoteEventHandler remoteEventHandler_;

    ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode temperatureModeAttributeValue_ {};
    bool dualModeAttributeValue_ {};
    bool autoModeAttributeValue_ {};
    bool airConditionerRunAttributeValue_ {};
    bool heaterRunAttributeValue_ {};
    double interiorTemperautreAttributeValue_ {};
    double exteriorTemperatureAttributeValue_ {};
    ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures targetTemperaturesAttributeValue_ {};
    ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections fanDirectionsAttributeValue_ {};
    ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds fanSpeedsAttributeValue_ {};
    ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts defrostsAttributeValue_ {};
    bool airRecirculationAttributeValue_ {};
    bool steeringWheelHeaterAttributeValue_ {};
    ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters seatHeatersAttributeValue_ {};
    ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers seatCoolersAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace DATCManager
} // namespace ivis
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_IVIS_DATCMANAGER_DATC_Manager_STUB_DEFAULT
