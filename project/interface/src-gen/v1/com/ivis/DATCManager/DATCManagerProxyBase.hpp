/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.10.v201611111521.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_DATCMANAGER_DATC_Manager_PROXY_BASE_HPP_
#define V1_COM_IVIS_DATCMANAGER_DATC_Manager_PROXY_BASE_HPP_

#include <v1/com/ivis/DATCManager/DATCManager.hpp>


#include <v1/com/ivis/DATCManager/DATCManagerTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace DATCManager {

class DATCManagerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute< ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode> TemperatureModeAttribute;
    typedef CommonAPI::ObservableAttribute< bool> DualModeAttribute;
    typedef CommonAPI::ObservableAttribute< bool> AutoModeAttribute;
    typedef CommonAPI::ObservableAttribute< bool> AirConditionerRunAttribute;
    typedef CommonAPI::ObservableAttribute< bool> HeaterRunAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute< double> InteriorTemperautreAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute< double> ExteriorTemperatureAttribute;
    typedef CommonAPI::ObservableAttribute< ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures> TargetTemperaturesAttribute;
    typedef CommonAPI::ObservableAttribute< ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections> FanDirectionsAttribute;
    typedef CommonAPI::ObservableAttribute< ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds> FanSpeedsAttribute;
    typedef CommonAPI::ObservableAttribute< ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts> DefrostsAttribute;
    typedef CommonAPI::ObservableAttribute< bool> AirRecirculationAttribute;
    typedef CommonAPI::ObservableAttribute< bool> SteeringWheelHeaterAttribute;
    typedef CommonAPI::ObservableAttribute< ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters> SeatHeatersAttribute;
    typedef CommonAPI::ObservableAttribute< ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers> SeatCoolersAttribute;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::TemperatureRange
    > ResponseGetSupportedTemperatureRangeEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType, double
    > ResponseSetTargetTemperatureEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::SupportedFanDirectionList
    > ResponseGetSupportedFanDirectionEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType, ::v1::com::ivis::DATCManager::DATCManagerTypes::EHvacFanDirection
    > ResponseSetFanDirectionEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeedRange
    > ResponseGetSupportedFanSpeedRangeEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType, uint16_t
    > ResponseSetFanSpeedEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::SupportedDefrostTargetList
    > ResponseGetSupportedDefrostTargetEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult, bool
    > ResponseSetAirRecirculationEvent;
    typedef CommonAPI::Event<
        bool
    > ResponseGetSteeringWheelHeaterSupportedEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult, bool
    > ResponseSetSteeringWheelHeaterEvent;
    typedef CommonAPI::Event<
        bool
    > ResponseGetSeatHeaterSupportedEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType, bool
    > ResponseSetSeatHeaterEvent;
    typedef CommonAPI::Event<
        bool
    > ResponseGetSeatCoolerSupportedEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType, bool
    > ResponseSetSeatCoolerEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> RequestGetSupportedTemperatureRangeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestSetTargetTemperatureAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestSetTargetTemperatureByDeltaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestGetSupportedFanDirectionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestGetSupportedFanSpeedRangeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestSetFanSpeedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestSetFanSpeedByDeltaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestGetSupportedDefrostTargetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestGetSteeringWheelHeaterSupportedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestGetSeatHeaterSupportedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RequestGetSeatCoolerSupportedAsyncCallback;

    virtual TemperatureModeAttribute& getTemperatureModeAttribute() = 0;
    virtual DualModeAttribute& getDualModeAttribute() = 0;
    virtual AutoModeAttribute& getAutoModeAttribute() = 0;
    virtual AirConditionerRunAttribute& getAirConditionerRunAttribute() = 0;
    virtual HeaterRunAttribute& getHeaterRunAttribute() = 0;
    virtual InteriorTemperautreAttribute& getInteriorTemperautreAttribute() = 0;
    virtual ExteriorTemperatureAttribute& getExteriorTemperatureAttribute() = 0;
    virtual TargetTemperaturesAttribute& getTargetTemperaturesAttribute() = 0;
    virtual FanDirectionsAttribute& getFanDirectionsAttribute() = 0;
    virtual FanSpeedsAttribute& getFanSpeedsAttribute() = 0;
    virtual DefrostsAttribute& getDefrostsAttribute() = 0;
    virtual AirRecirculationAttribute& getAirRecirculationAttribute() = 0;
    virtual SteeringWheelHeaterAttribute& getSteeringWheelHeaterAttribute() = 0;
    virtual SeatHeatersAttribute& getSeatHeatersAttribute() = 0;
    virtual SeatCoolersAttribute& getSeatCoolersAttribute() = 0;

    virtual ResponseGetSupportedTemperatureRangeEvent& getResponseGetSupportedTemperatureRangeEvent() = 0;
    virtual ResponseSetTargetTemperatureEvent& getResponseSetTargetTemperatureEvent() = 0;
    virtual ResponseGetSupportedFanDirectionEvent& getResponseGetSupportedFanDirectionEvent() = 0;
    virtual ResponseSetFanDirectionEvent& getResponseSetFanDirectionEvent() = 0;
    virtual ResponseGetSupportedFanSpeedRangeEvent& getResponseGetSupportedFanSpeedRangeEvent() = 0;
    virtual ResponseSetFanSpeedEvent& getResponseSetFanSpeedEvent() = 0;
    virtual ResponseGetSupportedDefrostTargetEvent& getResponseGetSupportedDefrostTargetEvent() = 0;
    virtual ResponseSetAirRecirculationEvent& getResponseSetAirRecirculationEvent() = 0;
    virtual ResponseGetSteeringWheelHeaterSupportedEvent& getResponseGetSteeringWheelHeaterSupportedEvent() = 0;
    virtual ResponseSetSteeringWheelHeaterEvent& getResponseSetSteeringWheelHeaterEvent() = 0;
    virtual ResponseGetSeatHeaterSupportedEvent& getResponseGetSeatHeaterSupportedEvent() = 0;
    virtual ResponseSetSeatHeaterEvent& getResponseSetSeatHeaterEvent() = 0;
    virtual ResponseGetSeatCoolerSupportedEvent& getResponseGetSeatCoolerSupportedEvent() = 0;
    virtual ResponseSetSeatCoolerEvent& getResponseSetSeatCoolerEvent() = 0;

    virtual void requestGetSupportedTemperatureRange(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestGetSupportedTemperatureRangeAsync(RequestGetSupportedTemperatureRangeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestSetTargetTemperature(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperature, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSetTargetTemperatureAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperature, RequestSetTargetTemperatureAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestSetTargetTemperatureByDelta(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperatureDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSetTargetTemperatureByDeltaAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperatureDelta, RequestSetTargetTemperatureByDeltaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestGetSupportedFanDirection(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestGetSupportedFanDirectionAsync(RequestGetSupportedFanDirectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestGetSupportedFanSpeedRange(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestGetSupportedFanSpeedRangeAsync(RequestGetSupportedFanSpeedRangeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestSetFanSpeed(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeed, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSetFanSpeedAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeed, RequestSetFanSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestSetFanSpeedByDelta(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeedDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestSetFanSpeedByDeltaAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeedDelta, RequestSetFanSpeedByDeltaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestGetSupportedDefrostTarget(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestGetSupportedDefrostTargetAsync(RequestGetSupportedDefrostTargetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestGetSteeringWheelHeaterSupported(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestGetSteeringWheelHeaterSupportedAsync(RequestGetSteeringWheelHeaterSupportedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestGetSeatHeaterSupported(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestGetSeatHeaterSupportedAsync(RequestGetSeatHeaterSupportedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void requestGetSeatCoolerSupported(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestGetSeatCoolerSupportedAsync(RequestGetSeatCoolerSupportedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace DATCManager
} // namespace ivis
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_IVIS_DATCMANAGER_DATC_Manager_PROXY_BASE_HPP_
