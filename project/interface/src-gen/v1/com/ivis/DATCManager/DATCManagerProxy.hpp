/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_DATCMANAGER_DATC_Manager_PROXY_HPP_
#define V1_COM_IVIS_DATCMANAGER_DATC_Manager_PROXY_HPP_

#include <v1/com/ivis/DATCManager/DATCManagerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace DATCManager {

template <typename ... _AttributeExtensions>
class DATCManagerProxy
    : virtual public DATCManager, 
      virtual public DATCManagerProxyBase,
      virtual public _AttributeExtensions... {
public:
    DATCManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~DATCManagerProxy();

    typedef DATCManager InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute temperatureMode.
     */
    virtual TemperatureModeAttribute& getTemperatureModeAttribute() {
        return delegate_->getTemperatureModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute dualMode.
     */
    virtual DualModeAttribute& getDualModeAttribute() {
        return delegate_->getDualModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute autoMode.
     */
    virtual AutoModeAttribute& getAutoModeAttribute() {
        return delegate_->getAutoModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute airConditionerRun.
     */
    virtual AirConditionerRunAttribute& getAirConditionerRunAttribute() {
        return delegate_->getAirConditionerRunAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute heaterRun.
     */
    virtual HeaterRunAttribute& getHeaterRunAttribute() {
        return delegate_->getHeaterRunAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute interiorTemperautre.
     */
    virtual InteriorTemperautreAttribute& getInteriorTemperautreAttribute() {
        return delegate_->getInteriorTemperautreAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute exteriorTemperature.
     */
    virtual ExteriorTemperatureAttribute& getExteriorTemperatureAttribute() {
        return delegate_->getExteriorTemperatureAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute targetTemperatures.
     */
    virtual TargetTemperaturesAttribute& getTargetTemperaturesAttribute() {
        return delegate_->getTargetTemperaturesAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute fanDirections.
     */
    virtual FanDirectionsAttribute& getFanDirectionsAttribute() {
        return delegate_->getFanDirectionsAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute fanSpeeds.
     */
    virtual FanSpeedsAttribute& getFanSpeedsAttribute() {
        return delegate_->getFanSpeedsAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute defrosts.
     */
    virtual DefrostsAttribute& getDefrostsAttribute() {
        return delegate_->getDefrostsAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute airRecirculation.
     */
    virtual AirRecirculationAttribute& getAirRecirculationAttribute() {
        return delegate_->getAirRecirculationAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute steeringWheelHeater.
     */
    virtual SteeringWheelHeaterAttribute& getSteeringWheelHeaterAttribute() {
        return delegate_->getSteeringWheelHeaterAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute seatHeaters.
     */
    virtual SeatHeatersAttribute& getSeatHeatersAttribute() {
        return delegate_->getSeatHeatersAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute seatCoolers.
     */
    virtual SeatCoolersAttribute& getSeatCoolersAttribute() {
        return delegate_->getSeatCoolersAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast responseGetSupportedTemperatureRange.
     */
    virtual ResponseGetSupportedTemperatureRangeEvent& getResponseGetSupportedTemperatureRangeEvent() {
        return delegate_->getResponseGetSupportedTemperatureRangeEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseSetTargetTemperature.
     */
    virtual ResponseSetTargetTemperatureEvent& getResponseSetTargetTemperatureEvent() {
        return delegate_->getResponseSetTargetTemperatureEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseGetSupportedFanDirection.
     */
    virtual ResponseGetSupportedFanDirectionEvent& getResponseGetSupportedFanDirectionEvent() {
        return delegate_->getResponseGetSupportedFanDirectionEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseSetFanDirection.
     */
    virtual ResponseSetFanDirectionEvent& getResponseSetFanDirectionEvent() {
        return delegate_->getResponseSetFanDirectionEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseGetSupportedFanSpeedRange.
     */
    virtual ResponseGetSupportedFanSpeedRangeEvent& getResponseGetSupportedFanSpeedRangeEvent() {
        return delegate_->getResponseGetSupportedFanSpeedRangeEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseSetFanSpeed.
     */
    virtual ResponseSetFanSpeedEvent& getResponseSetFanSpeedEvent() {
        return delegate_->getResponseSetFanSpeedEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseGetSupportedDefrostTarget.
     */
    virtual ResponseGetSupportedDefrostTargetEvent& getResponseGetSupportedDefrostTargetEvent() {
        return delegate_->getResponseGetSupportedDefrostTargetEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseSetAirRecirculation.
     */
    virtual ResponseSetAirRecirculationEvent& getResponseSetAirRecirculationEvent() {
        return delegate_->getResponseSetAirRecirculationEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseGetSteeringWheelHeaterSupported.
     */
    virtual ResponseGetSteeringWheelHeaterSupportedEvent& getResponseGetSteeringWheelHeaterSupportedEvent() {
        return delegate_->getResponseGetSteeringWheelHeaterSupportedEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseSetSteeringWheelHeater.
     */
    virtual ResponseSetSteeringWheelHeaterEvent& getResponseSetSteeringWheelHeaterEvent() {
        return delegate_->getResponseSetSteeringWheelHeaterEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseGetSeatHeaterSupported.
     */
    virtual ResponseGetSeatHeaterSupportedEvent& getResponseGetSeatHeaterSupportedEvent() {
        return delegate_->getResponseGetSeatHeaterSupportedEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseSetSeatHeater.
     */
    virtual ResponseSetSeatHeaterEvent& getResponseSetSeatHeaterEvent() {
        return delegate_->getResponseSetSeatHeaterEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseGetSeatCoolerSupported.
     */
    virtual ResponseGetSeatCoolerSupportedEvent& getResponseGetSeatCoolerSupportedEvent() {
        return delegate_->getResponseGetSeatCoolerSupportedEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseSetSeatCooler.
     */
    virtual ResponseSetSeatCoolerEvent& getResponseSetSeatCoolerEvent() {
        return delegate_->getResponseSetSeatCoolerEvent();
    }

    /**
     * Calls requestGetSupportedTemperatureRange with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestGetSupportedTemperatureRange(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSupportedTemperatureRange with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestGetSupportedTemperatureRangeAsync(RequestGetSupportedTemperatureRangeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetTargetTemperature with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSetTargetTemperature(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperature, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetTargetTemperature with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSetTargetTemperatureAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperature, RequestSetTargetTemperatureAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetTargetTemperatureByDelta with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSetTargetTemperatureByDelta(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperatureDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetTargetTemperatureByDelta with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSetTargetTemperatureByDeltaAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperatureDelta, RequestSetTargetTemperatureByDeltaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSupportedFanDirection with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestGetSupportedFanDirection(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSupportedFanDirection with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestGetSupportedFanDirectionAsync(RequestGetSupportedFanDirectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSupportedFanSpeedRange with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestGetSupportedFanSpeedRange(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSupportedFanSpeedRange with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestGetSupportedFanSpeedRangeAsync(RequestGetSupportedFanSpeedRangeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetFanSpeed with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSetFanSpeed(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeed, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetFanSpeed with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSetFanSpeedAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeed, RequestSetFanSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetFanSpeedByDelta with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSetFanSpeedByDelta(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeedDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetFanSpeedByDelta with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSetFanSpeedByDeltaAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeedDelta, RequestSetFanSpeedByDeltaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSupportedDefrostTarget with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestGetSupportedDefrostTarget(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSupportedDefrostTarget with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestGetSupportedDefrostTargetAsync(RequestGetSupportedDefrostTargetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSteeringWheelHeaterSupported with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestGetSteeringWheelHeaterSupported(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSteeringWheelHeaterSupported with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestGetSteeringWheelHeaterSupportedAsync(RequestGetSteeringWheelHeaterSupportedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSeatHeaterSupported with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestGetSeatHeaterSupported(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSeatHeaterSupported with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestGetSeatHeaterSupportedAsync(RequestGetSeatHeaterSupportedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSeatCoolerSupported with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestGetSeatCoolerSupported(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetSeatCoolerSupported with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestGetSeatCoolerSupportedAsync(RequestGetSeatCoolerSupportedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<DATCManagerProxyBase> delegate_;
};

typedef DATCManagerProxy<> DATCManagerProxyDefault;

namespace DATCManagerExtensions {
    template <template <typename > class _ExtensionType>
    class TemperatureModeAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::TemperatureModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::TemperatureModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TemperatureModeAttributeExtension() {}
    #endif
    
        TemperatureModeAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getTemperatureModeAttribute()) {
        }
    
        inline extension_type& getTemperatureModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DualModeAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::DualModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::DualModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DualModeAttributeExtension() {}
    #endif
    
        DualModeAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getDualModeAttribute()) {
        }
    
        inline extension_type& getDualModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AutoModeAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::AutoModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::AutoModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AutoModeAttributeExtension() {}
    #endif
    
        AutoModeAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getAutoModeAttribute()) {
        }
    
        inline extension_type& getAutoModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AirConditionerRunAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::AirConditionerRunAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::AirConditionerRunAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AirConditionerRunAttributeExtension() {}
    #endif
    
        AirConditionerRunAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getAirConditionerRunAttribute()) {
        }
    
        inline extension_type& getAirConditionerRunAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class HeaterRunAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::HeaterRunAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::HeaterRunAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HeaterRunAttributeExtension() {}
    #endif
    
        HeaterRunAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getHeaterRunAttribute()) {
        }
    
        inline extension_type& getHeaterRunAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class InteriorTemperautreAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::InteriorTemperautreAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::InteriorTemperautreAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        InteriorTemperautreAttributeExtension() {}
    #endif
    
        InteriorTemperautreAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getInteriorTemperautreAttribute()) {
        }
    
        inline extension_type& getInteriorTemperautreAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ExteriorTemperatureAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::ExteriorTemperatureAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::ExteriorTemperatureAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ExteriorTemperatureAttributeExtension() {}
    #endif
    
        ExteriorTemperatureAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getExteriorTemperatureAttribute()) {
        }
    
        inline extension_type& getExteriorTemperatureAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TargetTemperaturesAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::TargetTemperaturesAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::TargetTemperaturesAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TargetTemperaturesAttributeExtension() {}
    #endif
    
        TargetTemperaturesAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getTargetTemperaturesAttribute()) {
        }
    
        inline extension_type& getTargetTemperaturesAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class FanDirectionsAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::FanDirectionsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::FanDirectionsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        FanDirectionsAttributeExtension() {}
    #endif
    
        FanDirectionsAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getFanDirectionsAttribute()) {
        }
    
        inline extension_type& getFanDirectionsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class FanSpeedsAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::FanSpeedsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::FanSpeedsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        FanSpeedsAttributeExtension() {}
    #endif
    
        FanSpeedsAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getFanSpeedsAttribute()) {
        }
    
        inline extension_type& getFanSpeedsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class DefrostsAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::DefrostsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::DefrostsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DefrostsAttributeExtension() {}
    #endif
    
        DefrostsAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getDefrostsAttribute()) {
        }
    
        inline extension_type& getDefrostsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class AirRecirculationAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::AirRecirculationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::AirRecirculationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AirRecirculationAttributeExtension() {}
    #endif
    
        AirRecirculationAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getAirRecirculationAttribute()) {
        }
    
        inline extension_type& getAirRecirculationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SteeringWheelHeaterAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::SteeringWheelHeaterAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::SteeringWheelHeaterAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SteeringWheelHeaterAttributeExtension() {}
    #endif
    
        SteeringWheelHeaterAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getSteeringWheelHeaterAttribute()) {
        }
    
        inline extension_type& getSteeringWheelHeaterAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SeatHeatersAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::SeatHeatersAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::SeatHeatersAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SeatHeatersAttributeExtension() {}
    #endif
    
        SeatHeatersAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getSeatHeatersAttribute()) {
        }
    
        inline extension_type& getSeatHeatersAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SeatCoolersAttributeExtension {
     public:
        typedef _ExtensionType<DATCManagerProxyBase::SeatCoolersAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DATCManagerProxyBase::SeatCoolersAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SeatCoolersAttributeExtension() {}
    #endif
    
        SeatCoolersAttributeExtension(DATCManagerProxyBase& proxy): attributeExtension_(proxy.getSeatCoolersAttribute()) {
        }
    
        inline extension_type& getSeatCoolersAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace DATCManagerExtensions

//
// DATCManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
DATCManagerProxy<_AttributeExtensions...>::DATCManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<DATCManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<DATCManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
DATCManagerProxy<_AttributeExtensions...>::~DATCManagerProxy() {
}

template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestGetSupportedTemperatureRange(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestGetSupportedTemperatureRange(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestGetSupportedTemperatureRangeAsync(RequestGetSupportedTemperatureRangeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestGetSupportedTemperatureRangeAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestSetTargetTemperature(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperature, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_areaType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSetTargetTemperature(_areaType, _temperature, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestSetTargetTemperatureAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperature, RequestSetTargetTemperatureAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_areaType.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSetTargetTemperatureAsync(_areaType, _temperature, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestSetTargetTemperatureByDelta(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperatureDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_areaType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSetTargetTemperatureByDelta(_areaType, _temperatureDelta, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestSetTargetTemperatureByDeltaAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperatureDelta, RequestSetTargetTemperatureByDeltaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_areaType.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSetTargetTemperatureByDeltaAsync(_areaType, _temperatureDelta, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestGetSupportedFanDirection(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestGetSupportedFanDirection(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestGetSupportedFanDirectionAsync(RequestGetSupportedFanDirectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestGetSupportedFanDirectionAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestGetSupportedFanSpeedRange(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestGetSupportedFanSpeedRange(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestGetSupportedFanSpeedRangeAsync(RequestGetSupportedFanSpeedRangeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestGetSupportedFanSpeedRangeAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestSetFanSpeed(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeed, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_areaType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSetFanSpeed(_areaType, _fanSpeed, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestSetFanSpeedAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeed, RequestSetFanSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_areaType.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSetFanSpeedAsync(_areaType, _fanSpeed, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestSetFanSpeedByDelta(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeedDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_areaType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSetFanSpeedByDelta(_areaType, _fanSpeedDelta, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestSetFanSpeedByDeltaAsync(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeedDelta, RequestSetFanSpeedByDeltaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_areaType.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSetFanSpeedByDeltaAsync(_areaType, _fanSpeedDelta, _callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestGetSupportedDefrostTarget(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestGetSupportedDefrostTarget(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestGetSupportedDefrostTargetAsync(RequestGetSupportedDefrostTargetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestGetSupportedDefrostTargetAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestGetSteeringWheelHeaterSupported(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestGetSteeringWheelHeaterSupported(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestGetSteeringWheelHeaterSupportedAsync(RequestGetSteeringWheelHeaterSupportedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestGetSteeringWheelHeaterSupportedAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestGetSeatHeaterSupported(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestGetSeatHeaterSupported(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestGetSeatHeaterSupportedAsync(RequestGetSeatHeaterSupportedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestGetSeatHeaterSupportedAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void DATCManagerProxy<_AttributeExtensions...>::requestGetSeatCoolerSupported(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestGetSeatCoolerSupported(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DATCManagerProxy<_AttributeExtensions...>::requestGetSeatCoolerSupportedAsync(RequestGetSeatCoolerSupportedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestGetSeatCoolerSupportedAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &DATCManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool DATCManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool DATCManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& DATCManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& DATCManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace DATCManager
} // namespace ivis
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::ivis::DATCManager::DATCManagerProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::ivis::DATCManager::DATCManagerProxy<
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::TemperatureModeAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::DualModeAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::AutoModeAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::AirConditionerRunAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::HeaterRunAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::InteriorTemperautreAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::ExteriorTemperatureAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::TargetTemperaturesAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::FanDirectionsAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::FanSpeedsAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::DefrostsAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::AirRecirculationAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::SteeringWheelHeaterAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::SeatHeatersAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::DATCManager::DATCManagerExtensions::SeatCoolersAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_IVIS_DATCMANAGER_DATC_Manager_PROXY_HPP_
