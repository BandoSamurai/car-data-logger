/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_DATCMANAGER_DATC_Manager_STUB_HPP_
#define V1_COM_IVIS_DATCMANAGER_DATC_Manager_STUB_HPP_

#include <functional>



#include <v1/com/ivis/DATCManager/DATCManagerTypes.hpp>

#include <v1/com/ivis/DATCManager/DATCManager.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace DATCManager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service DATCManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class DATCManagerStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual DATCManager {
 public:
    ///Notifies all remote listeners about a change of value of the attribute temperatureMode.
    virtual void fireTemperatureModeAttributeChanged(const ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode& temperatureMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute dualMode.
    virtual void fireDualModeAttributeChanged(const bool& dualMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute autoMode.
    virtual void fireAutoModeAttributeChanged(const bool& autoMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute airConditionerRun.
    virtual void fireAirConditionerRunAttributeChanged(const bool& airConditionerRun) = 0;
    ///Notifies all remote listeners about a change of value of the attribute heaterRun.
    virtual void fireHeaterRunAttributeChanged(const bool& heaterRun) = 0;
    ///Notifies all remote listeners about a change of value of the attribute interiorTemperautre.
    virtual void fireInteriorTemperautreAttributeChanged(const double& interiorTemperautre) = 0;
    ///Notifies all remote listeners about a change of value of the attribute exteriorTemperature.
    virtual void fireExteriorTemperatureAttributeChanged(const double& exteriorTemperature) = 0;
    ///Notifies all remote listeners about a change of value of the attribute targetTemperatures.
    virtual void fireTargetTemperaturesAttributeChanged(const ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures& targetTemperatures) = 0;
    ///Notifies all remote listeners about a change of value of the attribute fanDirections.
    virtual void fireFanDirectionsAttributeChanged(const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections& fanDirections) = 0;
    ///Notifies all remote listeners about a change of value of the attribute fanSpeeds.
    virtual void fireFanSpeedsAttributeChanged(const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds& fanSpeeds) = 0;
    ///Notifies all remote listeners about a change of value of the attribute defrosts.
    virtual void fireDefrostsAttributeChanged(const ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts& defrosts) = 0;
    ///Notifies all remote listeners about a change of value of the attribute airRecirculation.
    virtual void fireAirRecirculationAttributeChanged(const bool& airRecirculation) = 0;
    ///Notifies all remote listeners about a change of value of the attribute steeringWheelHeater.
    virtual void fireSteeringWheelHeaterAttributeChanged(const bool& steeringWheelHeater) = 0;
    ///Notifies all remote listeners about a change of value of the attribute seatHeaters.
    virtual void fireSeatHeatersAttributeChanged(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters& seatHeaters) = 0;
    ///Notifies all remote listeners about a change of value of the attribute seatCoolers.
    virtual void fireSeatCoolersAttributeChanged(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers& seatCoolers) = 0;

    /**
     * Sends a broadcast event for responseGetSupportedTemperatureRange. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseGetSupportedTemperatureRangeEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::TemperatureRange &_temperatureRange) = 0;
    /**
     * Sends a broadcast event for responseSetTargetTemperature. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseSetTargetTemperatureEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperature) = 0;
    /**
     * Sends a broadcast event for responseGetSupportedFanDirection. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseGetSupportedFanDirectionEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SupportedFanDirectionList &_supportedFanDirectionList) = 0;
    /**
     * Sends a broadcast event for responseSetFanDirection. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseSetFanDirectionEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EHvacFanDirection &_fanDirection) = 0;
    /**
     * Sends a broadcast event for responseGetSupportedFanSpeedRange. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseGetSupportedFanSpeedRangeEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeedRange &_fanSpeedRange) = 0;
    /**
     * Sends a broadcast event for responseSetFanSpeed. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseSetFanSpeedEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeed) = 0;
    /**
     * Sends a broadcast event for responseGetSupportedDefrostTarget. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseGetSupportedDefrostTargetEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SupportedDefrostTargetList &_supportedDefrostTargetList) = 0;
    /**
     * Sends a broadcast event for responseSetAirRecirculation. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseSetAirRecirculationEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const bool &_on) = 0;
    /**
     * Sends a broadcast event for responseGetSteeringWheelHeaterSupported. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseGetSteeringWheelHeaterSupportedEvent(const bool &_steeringWheelHeaterSupported) = 0;
    /**
     * Sends a broadcast event for responseSetSteeringWheelHeater. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseSetSteeringWheelHeaterEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const bool &_on) = 0;
    /**
     * Sends a broadcast event for responseGetSeatHeaterSupported. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseGetSeatHeaterSupportedEvent(const bool &_seatHeaterSupported) = 0;
    /**
     * Sends a broadcast event for responseSetSeatHeater. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseSetSeatHeaterEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const bool &_on) = 0;
    /**
     * Sends a broadcast event for responseGetSeatCoolerSupported. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseGetSeatCoolerSupportedEvent(const bool &_seatCoolerSupported) = 0;
    /**
     * Sends a broadcast event for responseSetSeatCooler. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseSetSeatCoolerEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const bool &_on) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for DATCManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class DATCManagerStubRemoteEvent
{
public:
    virtual ~DATCManagerStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute temperatureMode
    virtual bool onRemoteSetTemperatureModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode _value) = 0;
    /// Action callback for remote set requests on the attribute temperatureMode
    virtual void onRemoteTemperatureModeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute dualMode
    virtual bool onRemoteSetDualModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute dualMode
    virtual void onRemoteDualModeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute autoMode
    virtual bool onRemoteSetAutoModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute autoMode
    virtual void onRemoteAutoModeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute airConditionerRun
    virtual bool onRemoteSetAirConditionerRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute airConditionerRun
    virtual void onRemoteAirConditionerRunAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute heaterRun
    virtual bool onRemoteSetHeaterRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute heaterRun
    virtual void onRemoteHeaterRunAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute targetTemperatures
    virtual bool onRemoteSetTargetTemperaturesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures _value) = 0;
    /// Action callback for remote set requests on the attribute targetTemperatures
    virtual void onRemoteTargetTemperaturesAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute fanDirections
    virtual bool onRemoteSetFanDirectionsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections _value) = 0;
    /// Action callback for remote set requests on the attribute fanDirections
    virtual void onRemoteFanDirectionsAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute fanSpeeds
    virtual bool onRemoteSetFanSpeedsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds _value) = 0;
    /// Action callback for remote set requests on the attribute fanSpeeds
    virtual void onRemoteFanSpeedsAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute defrosts
    virtual bool onRemoteSetDefrostsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts _value) = 0;
    /// Action callback for remote set requests on the attribute defrosts
    virtual void onRemoteDefrostsAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute airRecirculation
    virtual bool onRemoteSetAirRecirculationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute airRecirculation
    virtual void onRemoteAirRecirculationAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute steeringWheelHeater
    virtual bool onRemoteSetSteeringWheelHeaterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute steeringWheelHeater
    virtual void onRemoteSteeringWheelHeaterAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute seatHeaters
    virtual bool onRemoteSetSeatHeatersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters _value) = 0;
    /// Action callback for remote set requests on the attribute seatHeaters
    virtual void onRemoteSeatHeatersAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute seatCoolers
    virtual bool onRemoteSetSeatCoolersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers _value) = 0;
    /// Action callback for remote set requests on the attribute seatCoolers
    virtual void onRemoteSeatCoolersAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service DATCManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class DATCManagerStub
    : public virtual CommonAPI::Stub<DATCManagerStubAdapter, DATCManagerStubRemoteEvent>
{
public:
    typedef std::function<void ()>requestGetSupportedTemperatureRangeReply_t;
    typedef std::function<void ()>requestSetTargetTemperatureReply_t;
    typedef std::function<void ()>requestSetTargetTemperatureByDeltaReply_t;
    typedef std::function<void ()>requestGetSupportedFanDirectionReply_t;
    typedef std::function<void ()>requestGetSupportedFanSpeedRangeReply_t;
    typedef std::function<void ()>requestSetFanSpeedReply_t;
    typedef std::function<void ()>requestSetFanSpeedByDeltaReply_t;
    typedef std::function<void ()>requestGetSupportedDefrostTargetReply_t;
    typedef std::function<void ()>requestGetSteeringWheelHeaterSupportedReply_t;
    typedef std::function<void ()>requestGetSeatHeaterSupportedReply_t;
    typedef std::function<void ()>requestGetSeatCoolerSupportedReply_t;

    virtual ~DATCManagerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute temperatureMode
    virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::ETemperatureMode &getTemperatureModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute dualMode
    virtual const bool &getDualModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute autoMode
    virtual const bool &getAutoModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute airConditionerRun
    virtual const bool &getAirConditionerRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute heaterRun
    virtual const bool &getHeaterRunAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute interiorTemperautre
    virtual const double &getInteriorTemperautreAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute exteriorTemperature
    virtual const double &getExteriorTemperatureAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute targetTemperatures
    virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::TargetTemperatures &getTargetTemperaturesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute fanDirections
    virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanDirections &getFanDirectionsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute fanSpeeds
    virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeeds &getFanSpeedsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute defrosts
    virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::Defrosts &getDefrostsAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute airRecirculation
    virtual const bool &getAirRecirculationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute steeringWheelHeater
    virtual const bool &getSteeringWheelHeaterAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute seatHeaters
    virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatHeaters &getSeatHeatersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute seatCoolers
    virtual const ::v1::com::ivis::DATCManager::DATCManagerTypes::SeatCoolers &getSeatCoolersAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// This is the method that will be called on remote calls on the method requestGetSupportedTemperatureRange.
    virtual void requestGetSupportedTemperatureRange(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSupportedTemperatureRangeReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestSetTargetTemperature.
    virtual void requestSetTargetTemperature(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType _areaType, double _temperature, requestSetTargetTemperatureReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestSetTargetTemperatureByDelta.
    virtual void requestSetTargetTemperatureByDelta(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType _areaType, double _temperatureDelta, requestSetTargetTemperatureByDeltaReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestGetSupportedFanDirection.
    virtual void requestGetSupportedFanDirection(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSupportedFanDirectionReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestGetSupportedFanSpeedRange.
    virtual void requestGetSupportedFanSpeedRange(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSupportedFanSpeedRangeReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestSetFanSpeed.
    virtual void requestSetFanSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType _areaType, uint16_t _fanSpeed, requestSetFanSpeedReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestSetFanSpeedByDelta.
    virtual void requestSetFanSpeedByDelta(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType _areaType, uint16_t _fanSpeedDelta, requestSetFanSpeedByDeltaReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestGetSupportedDefrostTarget.
    virtual void requestGetSupportedDefrostTarget(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSupportedDefrostTargetReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestGetSteeringWheelHeaterSupported.
    virtual void requestGetSteeringWheelHeaterSupported(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSteeringWheelHeaterSupportedReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestGetSeatHeaterSupported.
    virtual void requestGetSeatHeaterSupported(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSeatHeaterSupportedReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestGetSeatCoolerSupported.
    virtual void requestGetSeatCoolerSupported(const std::shared_ptr<CommonAPI::ClientId> _client, requestGetSeatCoolerSupportedReply_t _reply) = 0;
    /// Sends a broadcast event for responseGetSupportedTemperatureRange.
    virtual void fireResponseGetSupportedTemperatureRangeEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::TemperatureRange &_temperatureRange) = 0;
    /// Sends a broadcast event for responseSetTargetTemperature.
    virtual void fireResponseSetTargetTemperatureEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const double &_temperature) = 0;
    /// Sends a broadcast event for responseGetSupportedFanDirection.
    virtual void fireResponseGetSupportedFanDirectionEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SupportedFanDirectionList &_supportedFanDirectionList) = 0;
    /// Sends a broadcast event for responseSetFanDirection.
    virtual void fireResponseSetFanDirectionEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EHvacFanDirection &_fanDirection) = 0;
    /// Sends a broadcast event for responseGetSupportedFanSpeedRange.
    virtual void fireResponseGetSupportedFanSpeedRangeEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::FanSpeedRange &_fanSpeedRange) = 0;
    /// Sends a broadcast event for responseSetFanSpeed.
    virtual void fireResponseSetFanSpeedEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const uint16_t &_fanSpeed) = 0;
    /// Sends a broadcast event for responseGetSupportedDefrostTarget.
    virtual void fireResponseGetSupportedDefrostTargetEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::SupportedDefrostTargetList &_supportedDefrostTargetList) = 0;
    /// Sends a broadcast event for responseSetAirRecirculation.
    virtual void fireResponseSetAirRecirculationEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const bool &_on) = 0;
    /// Sends a broadcast event for responseGetSteeringWheelHeaterSupported.
    virtual void fireResponseGetSteeringWheelHeaterSupportedEvent(const bool &_steeringWheelHeaterSupported) = 0;
    /// Sends a broadcast event for responseSetSteeringWheelHeater.
    virtual void fireResponseSetSteeringWheelHeaterEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const bool &_on) = 0;
    /// Sends a broadcast event for responseGetSeatHeaterSupported.
    virtual void fireResponseGetSeatHeaterSupportedEvent(const bool &_seatHeaterSupported) = 0;
    /// Sends a broadcast event for responseSetSeatHeater.
    virtual void fireResponseSetSeatHeaterEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const bool &_on) = 0;
    /// Sends a broadcast event for responseGetSeatCoolerSupported.
    virtual void fireResponseGetSeatCoolerSupportedEvent(const bool &_seatCoolerSupported) = 0;
    /// Sends a broadcast event for responseSetSeatCooler.
    virtual void fireResponseSetSeatCoolerEvent(const ::v1::com::ivis::DATCManager::DATCManagerTypes::EDatcControlResult &_result, const ::v1::com::ivis::DATCManager::DATCManagerTypes::EAreaType &_areaType, const bool &_on) = 0;

    using CommonAPI::Stub<DATCManagerStubAdapter, DATCManagerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<DATCManagerStubAdapter, DATCManagerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<DATCManagerStubAdapter, DATCManagerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef DATCManagerStubRemoteEvent RemoteEventType;
    typedef DATCManager StubInterface;
};

} // namespace DATCManager
} // namespace ivis
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_IVIS_DATCMANAGER_DATC_Manager_STUB_HPP_
