/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_AVINFORMATIONPROVIDER_AV_Information_Types_HPP_
#define V1_COM_IVIS_AVINFORMATIONPROVIDER_AV_Information_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace AVInformationProvider {

struct AVInformationTypes {
    
    struct Source : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            FM = 0,
            AM = 1,
            USB_MUSIC = 2,
            USB_VIDEO = 3
        };
        
        Source() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::FM)) {}
        Source(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::FM):
                case static_cast<int32_t>(Literal::AM):
                case static_cast<int32_t>(Literal::USB_MUSIC):
                case static_cast<int32_t>(Literal::USB_VIDEO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Source &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Source &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Source &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Source &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Source &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Source &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PlayStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PLAY = 0,
            PAUSE = 1,
            STOP = 2
        };
        
        PlayStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PLAY)) {}
        PlayStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PLAY):
                case static_cast<int32_t>(Literal::PAUSE):
                case static_cast<int32_t>(Literal::STOP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PlayStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PlayStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PlayStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PlayStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PlayStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PlayStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Action : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PLAY = 0,
            PAUSE = 1,
            NEXT = 2,
            PREVIOUS = 3
        };
        
        Action() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PLAY)) {}
        Action(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PLAY):
                case static_cast<int32_t>(Literal::PAUSE):
                case static_cast<int32_t>(Literal::NEXT):
                case static_cast<int32_t>(Literal::PREVIOUS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Action &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Action &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Action &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Action &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Action &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Action &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct MetaData : CommonAPI::Struct<std::string, std::string, std::string, uint32_t, uint32_t> {
    	
    	MetaData() {
    	}
    	MetaData(const std::string &_title, const std::string &_album, const std::string &_artist, const uint32_t &_totalTrackNumber, const uint32_t &_currentTrackNumber)
    	{
    		std::get<0>(values_) = _title;
    		std::get<1>(values_) = _album;
    		std::get<2>(values_) = _artist;
    		std::get<3>(values_) = _totalTrackNumber;
    		std::get<4>(values_) = _currentTrackNumber;
    	}
    	/**
    	 * description: USB = title, Radio = Frequency
    	 */
    	inline const std::string &getTitle() const { return std::get<0>(values_); }
    	inline void setTitle(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: USB = album, Radio = PS Name
    	 */
    	inline const std::string &getAlbum() const { return std::get<1>(values_); }
    	inline void setAlbum(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: USB = artist, Radio = Preset Index
    	 */
    	inline const std::string &getArtist() const { return std::get<2>(values_); }
    	inline void setArtist(const std::string &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: USB only
    	 */
    	inline const uint32_t &getTotalTrackNumber() const { return std::get<3>(values_); }
    	inline void setTotalTrackNumber(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline const uint32_t &getCurrentTrackNumber() const { return std::get<4>(values_); }
    	inline void setCurrentTrackNumber(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const MetaData& _other) const {
                return (getTitle() == _other.getTitle() && getAlbum() == _other.getAlbum() && getArtist() == _other.getArtist() && getTotalTrackNumber() == _other.getTotalTrackNumber() && getCurrentTrackNumber() == _other.getCurrentTrackNumber());
        }
    	inline bool operator!=(const MetaData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct PlayPosition : CommonAPI::Struct<uint32_t, uint32_t> {
    	
    	PlayPosition() {
    	}
    	PlayPosition(const uint32_t &_currentPosition, const uint32_t &_duration)
    	{
    		std::get<0>(values_) = _currentPosition;
    		std::get<1>(values_) = _duration;
    	}
    	inline const uint32_t &getCurrentPosition() const { return std::get<0>(values_); }
    	inline void setCurrentPosition(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getDuration() const { return std::get<1>(values_); }
    	inline void setDuration(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PlayPosition& _other) const {
                return (getCurrentPosition() == _other.getCurrentPosition() && getDuration() == _other.getDuration());
        }
    	inline bool operator!=(const PlayPosition &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.ivis.AVInformationProvider.AVInformationTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct AVInformationTypes

} // namespace AVInformationProvider
} // namespace ivis
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for Source
    template<>
    struct hash<::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source> {
        inline size_t operator()(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source& source) const {
            return static_cast<int32_t>(source);
        }
    };
    //Hash for PlayStatus
    template<>
    struct hash<::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus> {
        inline size_t operator()(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus& playStatus) const {
            return static_cast<int32_t>(playStatus);
        }
    };
    //Hash for Action
    template<>
    struct hash<::v1::com::ivis::AVInformationProvider::AVInformationTypes::Action> {
        inline size_t operator()(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::Action& action) const {
            return static_cast<int32_t>(action);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_AVINFORMATIONPROVIDER_AV_Information_Types_HPP_
