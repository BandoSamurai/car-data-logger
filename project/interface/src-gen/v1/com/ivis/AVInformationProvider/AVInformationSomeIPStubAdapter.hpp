/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.5.v201601121433.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_AVINFORMATIONPROVIDER_AV_INFORMATION_SOMEIP_STUB_ADAPTER_HPP_
#define V1_COM_IVIS_AVINFORMATIONPROVIDER_AV_INFORMATION_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/com/ivis/AVInformationProvider/AVInformationStub.hpp>
#include <v1/com/ivis/AVInformationProvider/AVInformationTypesSomeIPDeployment.hpp>
#include <v1/com/ivis/AVInformationProvider/AVInformationSomeIPDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Config.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace AVInformationProvider {

typedef CommonAPI::SomeIP::StubAdapterHelper<AVInformationStub> AVInformationSomeIPStubAdapterHelper;

class AVInformationSomeIPStubAdapterInternal
    : public virtual AVInformationStubAdapter,
      public AVInformationSomeIPStubAdapterHelper
{
public:
    AVInformationSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~AVInformationSomeIPStubAdapterInternal();

    void fireCurrentSourceAttributeChanged(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source& value);
    void fireMetaDataAttributeChanged(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::MetaData& value);
    void firePlayPositionAttributeChanged(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayPosition& value);
    void firePlayStatusAttributeChanged(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus& value);

    void fireNotifyAlbumArtEvent(const uint32_t& totalSegmentCount, const uint32_t& currentIndex, const std::vector<uint8_t>& imageData);


    const AVInformationSomeIPStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::SomeIP::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();


    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        CommonAPI::Version
    > getAVInformationInterfaceVersionStubDispatcher;

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
            ::v1::com::ivis::AVInformationProvider::AVInformationStub,
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source,
            CommonAPI::SomeIP::EnumerationDeployment
    > getCurrentSourceAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source,
        CommonAPI::SomeIP::EnumerationDeployment
    > setCurrentSourceAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
            ::v1::com::ivis::AVInformationProvider::AVInformationStub,
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes::MetaData,
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::MetaDataDeployment_t
    > getMetaDataAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes::MetaData,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::MetaDataDeployment_t
    > setMetaDataAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
            ::v1::com::ivis::AVInformationProvider::AVInformationStub,
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayPosition,
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::PlayPositionDeployment_t
    > getPlayPositionAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayPosition,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::PlayPositionDeployment_t
    > setPlayPositionAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
            ::v1::com::ivis::AVInformationProvider::AVInformationStub,
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus,
            CommonAPI::SomeIP::EnumerationDeployment
    > getPlayStatusAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus,
        CommonAPI::SomeIP::EnumerationDeployment
    > setPlayStatusAttributeStubDispatcher;

    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        std::tuple<AVInformationTypes::Action>,
        std::tuple<>,
        std::tuple<CommonAPI::SomeIP::EnumerationDeployment>,
        std::tuple<>
    > requestActionStubDispatcher;

private:
    AVInformationSomeIPStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::SomeIP::StubAttributeTable stubAttributeTable_;
};

class AVInformationSomeIPStubAdapter
    : public AVInformationSomeIPStubAdapterInternal,
      public std::enable_shared_from_this<AVInformationSomeIPStubAdapter> {
public:
    AVInformationSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub) 
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          AVInformationSomeIPStubAdapterInternal(_address, _connection, _stub) {
    }
};

} // namespace AVInformationProvider
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_AVINFORMATIONPROVIDER_AV_Information_SOMEIP_STUB_ADAPTER_HPP_
