/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.10.v201611111521.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_Types_HPP_
#define V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace VehicleDataManager {

struct VehicleDataManagerTypes {
    struct VehicleSpeed : CommonAPI::Struct< int16_t, std::string> {
    
        VehicleSpeed()
        {
            std::get< 0>(values_) = 0;
            std::get< 1>(values_) = "";
        }
        VehicleSpeed(const int16_t &_speedometer, const std::string &_vehicleSpeedUnit)
        {
            std::get< 0>(values_) = _speedometer;
            std::get< 1>(values_) = _vehicleSpeedUnit;
        }
        inline const int16_t &getSpeedometer() const { return std::get< 0>(values_); }
        inline void setSpeedometer(const int16_t &_value) { std::get< 0>(values_) = _value; }
        inline const std::string &getVehicleSpeedUnit() const { return std::get< 1>(values_); }
        inline void setVehicleSpeedUnit(const std::string &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const VehicleSpeed& _other) const {
        return (getSpeedometer() == _other.getSpeedometer() && getVehicleSpeedUnit() == _other.getVehicleSpeedUnit());
        }
        inline bool operator!=(const VehicleSpeed &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct TransmissionGearStatus : CommonAPI::Enumeration< int32_t> {
        enum Literal : int32_t {
            TRANSMISSIONGEARSTATUS_UNKNOWN = 0,
            TRANSMISSIONGEARSTATUS_NEUTRAL = 1,
            TRANSMISSIONGEARSTATUS_MANUAL1 = 2,
            TRANSMISSIONGEARSTATUS_MANUAL2 = 3,
            TRANSMISSIONGEARSTATUS_MANUAL3 = 4,
            TRANSMISSIONGEARSTATUS_MANUAL4 = 5,
            TRANSMISSIONGEARSTATUS_MANUAL5 = 6,
            TRANSMISSIONGEARSTATUS_MANUAL6 = 7,
            TRANSMISSIONGEARSTATUS_MANUAL7 = 8,
            TRANSMISSIONGEARSTATUS_MANUAL8 = 9,
            TRANSMISSIONGEARSTATUS_MANUAL9 = 10,
            TRANSMISSIONGEARSTATUS_MANUAL10 = 11,
            TRANSMISSIONGEARSTATUS_AUTO1 = 12,
            TRANSMISSIONGEARSTATUS_AUTO2 = 13,
            TRANSMISSIONGEARSTATUS_AUTO3 = 14,
            TRANSMISSIONGEARSTATUS_AUTO4 = 15,
            TRANSMISSIONGEARSTATUS_AUTO5 = 16,
            TRANSMISSIONGEARSTATUS_AUTO6 = 17,
            TRANSMISSIONGEARSTATUS_AUTO7 = 18,
            TRANSMISSIONGEARSTATUS_AUTO8 = 19,
            TRANSMISSIONGEARSTATUS_AUTO9 = 20,
            TRANSMISSIONGEARSTATUS_AUTO10 = 21,
            TRANSMISSIONGEARSTATUS_DRIVE = 22,
            TRANSMISSIONGEARSTATUS_PARKING = 23,
            TRANSMISSIONGEARSTATUS_REVERSE = 24
        };
    
        TransmissionGearStatus()
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_UNKNOWN)) {}
        TransmissionGearStatus(Literal _literal)
            : CommonAPI::Enumeration< int32_t>(static_cast< int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_UNKNOWN):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_NEUTRAL):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL1):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL2):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL3):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL4):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL5):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL6):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL7):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL8):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL9):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_MANUAL10):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO1):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO2):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO3):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO4):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO5):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO6):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO7):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO8):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO9):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_AUTO10):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_DRIVE):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_PARKING):
                case static_cast< int32_t>(Literal::TRANSMISSIONGEARSTATUS_REVERSE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TransmissionGearStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TransmissionGearStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TransmissionGearStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TransmissionGearStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TransmissionGearStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TransmissionGearStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.ivis.VehicleDataManager.VehicleDataManagerTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct VehicleDataManagerTypes

} // namespace VehicleDataManager
} // namespace ivis
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for TransmissionGearStatus
    template<>
    struct hash< ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus> {
        inline size_t operator()(const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus& transmissionGearStatus) const {
            return static_cast< int32_t>(transmissionGearStatus);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_Types_HPP_
