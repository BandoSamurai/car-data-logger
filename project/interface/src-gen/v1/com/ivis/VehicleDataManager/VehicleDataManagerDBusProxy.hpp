/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_DBUS_PROXY_HPP_
#define V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_DBUS_PROXY_HPP_

#include <v1/com/ivis/VehicleDataManager/VehicleDataManagerProxyBase.hpp>
#include "v1/com/ivis/VehicleDataManager/VehicleDataManagerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace ivis {
namespace VehicleDataManager {

class VehicleDataManagerDBusProxy
    : virtual public VehicleDataManagerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    VehicleDataManagerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~VehicleDataManagerDBusProxy() { }

    virtual VehicleSpeedAttribute& getVehicleSpeedAttribute();
    virtual VinAttribute& getVinAttribute();
    virtual TransmissionGearStatusAttribute& getTransmissionGearStatusAttribute();
    virtual DrivingRestrictionAttribute& getDrivingRestrictionAttribute();
    virtual LowFuelWarningAttribute& getLowFuelWarningAttribute();




    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<VehicleSpeedAttribute, ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes_::VehicleSpeedDeployment_t>> vehicleSpeed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<VinAttribute, CommonAPI::DBus::StringDeployment>> vin_;
    class DBustransmissionGearStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TransmissionGearStatusAttribute>> {
    public:
    template <typename... _A>
    	DBustransmissionGearStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TransmissionGearStatusAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TransmissionGearStatusAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TransmissionGearStatusAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBustransmissionGearStatus_Attribute transmissionGearStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<DrivingRestrictionAttribute>> drivingRestriction_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<LowFuelWarningAttribute>> lowFuelWarning_;


};

} // namespace VehicleDataManager
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_DBUS_PROXY_HPP_

