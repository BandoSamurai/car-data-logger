/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_STUB_HPP_
#define V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_STUB_HPP_

#include <functional>



#include <v1/com/ivis/VehicleDataManager/VehicleDataManagerTypes.hpp>

#include <v1/com/ivis/VehicleDataManager/VehicleDataManager.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace VehicleDataManager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service VehicleDataManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class VehicleDataManagerStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual VehicleDataManager {
 public:
    ///Notifies all remote listeners about a change of value of the attribute vehicleSpeed.
    virtual void fireVehicleSpeedAttributeChanged(const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed& vehicleSpeed) = 0;
    ///Notifies all remote listeners about a change of value of the attribute vin.
    virtual void fireVinAttributeChanged(const std::string& vin) = 0;
    ///Notifies all remote listeners about a change of value of the attribute transmissionGearStatus.
    virtual void fireTransmissionGearStatusAttributeChanged(const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus& transmissionGearStatus) = 0;
    ///Notifies all remote listeners about a change of value of the attribute drivingRestriction.
    virtual void fireDrivingRestrictionAttributeChanged(const bool& drivingRestriction) = 0;
    ///Notifies all remote listeners about a change of value of the attribute lowFuelWarning.
    virtual void fireLowFuelWarningAttributeChanged(const bool& lowFuelWarning) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for VehicleDataManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class VehicleDataManagerStubRemoteEvent
{
public:
    virtual ~VehicleDataManagerStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute vehicleSpeed
    virtual bool onRemoteSetVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed _value) = 0;
    /// Action callback for remote set requests on the attribute vehicleSpeed
    virtual void onRemoteVehicleSpeedAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute vin
    virtual bool onRemoteSetVinAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) = 0;
    /// Action callback for remote set requests on the attribute vin
    virtual void onRemoteVinAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute transmissionGearStatus
    virtual bool onRemoteSetTransmissionGearStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus _value) = 0;
    /// Action callback for remote set requests on the attribute transmissionGearStatus
    virtual void onRemoteTransmissionGearStatusAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute drivingRestriction
    virtual bool onRemoteSetDrivingRestrictionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute drivingRestriction
    virtual void onRemoteDrivingRestrictionAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute lowFuelWarning
    virtual bool onRemoteSetLowFuelWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute lowFuelWarning
    virtual void onRemoteLowFuelWarningAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service VehicleDataManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class VehicleDataManagerStub
    : public virtual CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>
{
public:

    virtual ~VehicleDataManagerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: This attribute contains the current speed of this vehicle. The unit of value is
     *   km/h or mph.
     */
    /// Provides getter access to the attribute vehicleSpeed
    virtual const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed &getVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: This attribute contains the VIN(Vehicle Identification Number as defined by ISO
     *   3779) information for this vehicle. It's 17 bytes long characters.
     */
    /// Provides getter access to the attribute vin
    virtual const std::string &getVinAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: This attribute contains the current status of transmission gear.
     */
    /// Provides getter access to the attribute transmissionGearStatus
    virtual const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus &getTransmissionGearStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute drivingRestriction
    virtual const bool &getDrivingRestrictionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute lowFuelWarning
    virtual const bool &getLowFuelWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;


    using CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef VehicleDataManagerStubRemoteEvent RemoteEventType;
    typedef VehicleDataManager StubInterface;
};

} // namespace VehicleDataManager
} // namespace ivis
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_STUB_HPP_
