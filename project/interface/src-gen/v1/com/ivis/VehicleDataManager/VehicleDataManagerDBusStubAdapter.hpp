/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/ivis/VehicleDataManager/VehicleDataManagerStub.hpp>
#include "v1/com/ivis/VehicleDataManager/VehicleDataManagerDBusDeployment.hpp"        
#include <v1/com/ivis/VehicleDataManager/VehicleDataManagerTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace VehicleDataManager {

typedef CommonAPI::DBus::DBusStubAdapterHelper<VehicleDataManagerStub> VehicleDataManagerDBusStubAdapterHelper;

class VehicleDataManagerDBusStubAdapterInternal
    : public virtual VehicleDataManagerStubAdapter,
      public VehicleDataManagerDBusStubAdapterHelper
{
public:
    VehicleDataManagerDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~VehicleDataManagerDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return VehicleDataManager::getInterface();
    }

    /**
     * description: This attribute contains the current speed of this vehicle. The unit of value is
     *   km/h or mph.
     */
    void fireVehicleSpeedAttributeChanged(const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed& value);
    /**
     * description: This attribute contains the VIN(Vehicle Identification Number as defined by ISO
     *   3779) information for this vehicle. It's 17 bytes long characters.
     */
    void fireVinAttributeChanged(const std::string& value);
    /**
     * description: This attribute contains the current status of transmission gear.
     */
    void fireTransmissionGearStatusAttributeChanged(const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus& value);
    void fireDrivingRestrictionAttributeChanged(const bool& value);
    void fireLowFuelWarningAttributeChanged(const bool& value);



    const VehicleDataManagerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        CommonAPI::Version
        > getVehicleDataManagerInterfaceVersionStubDispatcher;

/**
 * description: This attribute contains the current speed of this vehicle. The unit of value is
 *   km/h or mph.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed,
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes_::VehicleSpeedDeployment_t                
        > getVehicleSpeedAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed,
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes_::VehicleSpeedDeployment_t                    
        > setVehicleSpeedAttributeStubDispatcher;
/**
 * description: This attribute contains the VIN(Vehicle Identification Number as defined by ISO
 *   3779) information for this vehicle. It's 17 bytes long characters.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getVinAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        std::string,
        CommonAPI::DBus::StringDeployment                    
        > setVinAttributeStubDispatcher;
/**
 * description: This attribute contains the current status of transmission gear.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus                
        > getTransmissionGearStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus                    
        > setTransmissionGearStatusAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        bool                
        > getDrivingRestrictionAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        bool                    
        > setDrivingRestrictionAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        bool                
        > getLowFuelWarningAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::VehicleDataManager::VehicleDataManagerStub,
        bool                    
        > setLowFuelWarningAttributeStubDispatcher;






 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    VehicleDataManagerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class VehicleDataManagerDBusStubAdapter
    : public VehicleDataManagerDBusStubAdapterInternal,
      public std::enable_shared_from_this<VehicleDataManagerDBusStubAdapter> {
public:
    VehicleDataManagerDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          VehicleDataManagerDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace VehicleDataManager
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_VEHICLEDATAMANAGER_Vehicle_Data_Manager_DBUS_STUB_ADAPTER_HPP_
