/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/VehicleDataManager/VehicleDataManagerStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace com {
namespace ivis {
namespace VehicleDataManager {

VehicleDataManagerStubDefault::VehicleDataManagerStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(VehicleDataManager::getInterfaceVersion()) {
}

const CommonAPI::Version& VehicleDataManagerStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

VehicleDataManagerStubRemoteEvent* VehicleDataManagerStubDefault::initStubAdapter(const std::shared_ptr<VehicleDataManagerStubAdapter> &_adapter) {
    CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed& VehicleDataManagerStubDefault::getVehicleSpeedAttribute() {
    return vehicleSpeedAttributeValue_;
}

const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed& VehicleDataManagerStubDefault::getVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getVehicleSpeedAttribute();
}

void VehicleDataManagerStubDefault::setVehicleSpeedAttribute(::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed _value) {
    const bool valueChanged = trySetVehicleSpeedAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireVehicleSpeedAttributeChanged(vehicleSpeedAttributeValue_);
    }
}

bool VehicleDataManagerStubDefault::trySetVehicleSpeedAttribute(::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed _value) {
    if (!validateVehicleSpeedAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (vehicleSpeedAttributeValue_ != _value);
    vehicleSpeedAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool VehicleDataManagerStubDefault::validateVehicleSpeedAttributeRequestedValue(const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed &_value) {
    (void)_value;
	return true;
}

void VehicleDataManagerStubDefault::setVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed _value) {
    (void)_client;
    setVehicleSpeedAttribute(_value);
}

void VehicleDataManagerStubDefault::onRemoteVehicleSpeedAttributeChanged() {
    // No operation in default
}

void VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteVehicleSpeedAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteVehicleSpeedAttributeChanged();
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetVehicleSpeedAttribute(::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetVehicleSpeedAttribute(std::move(_value));
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::VehicleSpeed _value) {
    (void)_client;
    return onRemoteSetVehicleSpeedAttribute(_value);
}

const std::string& VehicleDataManagerStubDefault::getVinAttribute() {
    return vinAttributeValue_;
}

const std::string& VehicleDataManagerStubDefault::getVinAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getVinAttribute();
}

void VehicleDataManagerStubDefault::setVinAttribute(std::string _value) {
    const bool valueChanged = trySetVinAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireVinAttributeChanged(vinAttributeValue_);
    }
}

bool VehicleDataManagerStubDefault::trySetVinAttribute(std::string _value) {
    if (!validateVinAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (vinAttributeValue_ != _value);
    vinAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool VehicleDataManagerStubDefault::validateVinAttributeRequestedValue(const std::string &_value) {
    (void)_value;
	return true;
}

void VehicleDataManagerStubDefault::setVinAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
    (void)_client;
    setVinAttribute(_value);
}

void VehicleDataManagerStubDefault::onRemoteVinAttributeChanged() {
    // No operation in default
}

void VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteVinAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteVinAttributeChanged();
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetVinAttribute(std::string _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetVinAttribute(std::move(_value));
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetVinAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
    (void)_client;
    return onRemoteSetVinAttribute(_value);
}

const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus& VehicleDataManagerStubDefault::getTransmissionGearStatusAttribute() {
    return transmissionGearStatusAttributeValue_;
}

const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus& VehicleDataManagerStubDefault::getTransmissionGearStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getTransmissionGearStatusAttribute();
}

void VehicleDataManagerStubDefault::setTransmissionGearStatusAttribute(::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus _value) {
    const bool valueChanged = trySetTransmissionGearStatusAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireTransmissionGearStatusAttributeChanged(transmissionGearStatusAttributeValue_);
    }
}

bool VehicleDataManagerStubDefault::trySetTransmissionGearStatusAttribute(::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus _value) {
    if (!validateTransmissionGearStatusAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (transmissionGearStatusAttributeValue_ != _value);
    transmissionGearStatusAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool VehicleDataManagerStubDefault::validateTransmissionGearStatusAttributeRequestedValue(const ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus &_value) {
    (void)_value;
	return _value.validate();
}

void VehicleDataManagerStubDefault::setTransmissionGearStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus _value) {
    (void)_client;
    setTransmissionGearStatusAttribute(_value);
}

void VehicleDataManagerStubDefault::onRemoteTransmissionGearStatusAttributeChanged() {
    // No operation in default
}

void VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteTransmissionGearStatusAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteTransmissionGearStatusAttributeChanged();
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetTransmissionGearStatusAttribute(::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetTransmissionGearStatusAttribute(std::move(_value));
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetTransmissionGearStatusAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::VehicleDataManager::VehicleDataManagerTypes::TransmissionGearStatus _value) {
    (void)_client;
    return onRemoteSetTransmissionGearStatusAttribute(_value);
}

const bool& VehicleDataManagerStubDefault::getDrivingRestrictionAttribute() {
    return drivingRestrictionAttributeValue_;
}

const bool& VehicleDataManagerStubDefault::getDrivingRestrictionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getDrivingRestrictionAttribute();
}

void VehicleDataManagerStubDefault::setDrivingRestrictionAttribute(bool _value) {
    const bool valueChanged = trySetDrivingRestrictionAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDrivingRestrictionAttributeChanged(drivingRestrictionAttributeValue_);
    }
}

bool VehicleDataManagerStubDefault::trySetDrivingRestrictionAttribute(bool _value) {
    if (!validateDrivingRestrictionAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (drivingRestrictionAttributeValue_ != _value);
    drivingRestrictionAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool VehicleDataManagerStubDefault::validateDrivingRestrictionAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}

void VehicleDataManagerStubDefault::setDrivingRestrictionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    setDrivingRestrictionAttribute(_value);
}

void VehicleDataManagerStubDefault::onRemoteDrivingRestrictionAttributeChanged() {
    // No operation in default
}

void VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteDrivingRestrictionAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteDrivingRestrictionAttributeChanged();
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetDrivingRestrictionAttribute(bool _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetDrivingRestrictionAttribute(std::move(_value));
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetDrivingRestrictionAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    return onRemoteSetDrivingRestrictionAttribute(_value);
}

const bool& VehicleDataManagerStubDefault::getLowFuelWarningAttribute() {
    return lowFuelWarningAttributeValue_;
}

const bool& VehicleDataManagerStubDefault::getLowFuelWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getLowFuelWarningAttribute();
}

void VehicleDataManagerStubDefault::setLowFuelWarningAttribute(bool _value) {
    const bool valueChanged = trySetLowFuelWarningAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<VehicleDataManagerStubAdapter, VehicleDataManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireLowFuelWarningAttributeChanged(lowFuelWarningAttributeValue_);
    }
}

bool VehicleDataManagerStubDefault::trySetLowFuelWarningAttribute(bool _value) {
    if (!validateLowFuelWarningAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (lowFuelWarningAttributeValue_ != _value);
    lowFuelWarningAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool VehicleDataManagerStubDefault::validateLowFuelWarningAttributeRequestedValue(const bool &_value) {
    (void)_value;
	return true;
}

void VehicleDataManagerStubDefault::setLowFuelWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    setLowFuelWarningAttribute(_value);
}

void VehicleDataManagerStubDefault::onRemoteLowFuelWarningAttributeChanged() {
    // No operation in default
}

void VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteLowFuelWarningAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteLowFuelWarningAttributeChanged();
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetLowFuelWarningAttribute(bool _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetLowFuelWarningAttribute(std::move(_value));
}

bool VehicleDataManagerStubDefault::RemoteEventHandler::onRemoteSetLowFuelWarningAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
    (void)_client;
    return onRemoteSetLowFuelWarningAttribute(_value);
}





VehicleDataManagerStubDefault::RemoteEventHandler::RemoteEventHandler(VehicleDataManagerStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace VehicleDataManager
} // namespace ivis
} // namespace com
} // namespace v1
