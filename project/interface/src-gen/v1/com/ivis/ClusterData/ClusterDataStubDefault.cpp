/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/ClusterData/ClusterDataStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace com {
namespace ivis {
namespace ClusterData {

ClusterDataStubDefault::ClusterDataStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(ClusterData::getInterfaceVersion()) {
}

const CommonAPI::Version& ClusterDataStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

ClusterDataStubRemoteEvent* ClusterDataStubDefault::initStubAdapter(const std::shared_ptr<ClusterDataStubAdapter> &_adapter) {
    CommonAPI::Stub<ClusterDataStubAdapter, ClusterDataStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const uint16_t& ClusterDataStubDefault::getVehicleSpeedAttribute() {
    return vehicleSpeedAttributeValue_;
}

const uint16_t& ClusterDataStubDefault::getVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getVehicleSpeedAttribute();
}

void ClusterDataStubDefault::setVehicleSpeedAttribute(uint16_t _value) {
    const bool valueChanged = trySetVehicleSpeedAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<ClusterDataStubAdapter, ClusterDataStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireVehicleSpeedAttributeChanged(vehicleSpeedAttributeValue_);
    }
}

bool ClusterDataStubDefault::trySetVehicleSpeedAttribute(uint16_t _value) {
    if (!validateVehicleSpeedAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (vehicleSpeedAttributeValue_ != _value);
    vehicleSpeedAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool ClusterDataStubDefault::validateVehicleSpeedAttributeRequestedValue(const uint16_t &_value) {
    (void)_value;
	return true;
}

void ClusterDataStubDefault::setVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) {
    (void)_client;
    setVehicleSpeedAttribute(_value);
}

void ClusterDataStubDefault::onRemoteVehicleSpeedAttributeChanged() {
    // No operation in default
}

void ClusterDataStubDefault::RemoteEventHandler::onRemoteVehicleSpeedAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteVehicleSpeedAttributeChanged();
}

bool ClusterDataStubDefault::RemoteEventHandler::onRemoteSetVehicleSpeedAttribute(uint16_t _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetVehicleSpeedAttribute(std::move(_value));
}

bool ClusterDataStubDefault::RemoteEventHandler::onRemoteSetVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) {
    (void)_client;
    return onRemoteSetVehicleSpeedAttribute(_value);
}

const uint16_t& ClusterDataStubDefault::getEngineSpeedAttribute() {
    return engineSpeedAttributeValue_;
}

const uint16_t& ClusterDataStubDefault::getEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getEngineSpeedAttribute();
}

void ClusterDataStubDefault::setEngineSpeedAttribute(uint16_t _value) {
    const bool valueChanged = trySetEngineSpeedAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<ClusterDataStubAdapter, ClusterDataStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireEngineSpeedAttributeChanged(engineSpeedAttributeValue_);
    }
}

bool ClusterDataStubDefault::trySetEngineSpeedAttribute(uint16_t _value) {
    if (!validateEngineSpeedAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (engineSpeedAttributeValue_ != _value);
    engineSpeedAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool ClusterDataStubDefault::validateEngineSpeedAttributeRequestedValue(const uint16_t &_value) {
    (void)_value;
	return true;
}

void ClusterDataStubDefault::setEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) {
    (void)_client;
    setEngineSpeedAttribute(_value);
}

void ClusterDataStubDefault::onRemoteEngineSpeedAttributeChanged() {
    // No operation in default
}

void ClusterDataStubDefault::RemoteEventHandler::onRemoteEngineSpeedAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteEngineSpeedAttributeChanged();
}

bool ClusterDataStubDefault::RemoteEventHandler::onRemoteSetEngineSpeedAttribute(uint16_t _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetEngineSpeedAttribute(std::move(_value));
}

bool ClusterDataStubDefault::RemoteEventHandler::onRemoteSetEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) {
    (void)_client;
    return onRemoteSetEngineSpeedAttribute(_value);
}

const uint8_t& ClusterDataStubDefault::getFuelLevelAttribute() {
    return fuelLevelAttributeValue_;
}

const uint8_t& ClusterDataStubDefault::getFuelLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getFuelLevelAttribute();
}

void ClusterDataStubDefault::setFuelLevelAttribute(uint8_t _value) {
    const bool valueChanged = trySetFuelLevelAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<ClusterDataStubAdapter, ClusterDataStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireFuelLevelAttributeChanged(fuelLevelAttributeValue_);
    }
}

bool ClusterDataStubDefault::trySetFuelLevelAttribute(uint8_t _value) {
    if (!validateFuelLevelAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (fuelLevelAttributeValue_ != _value);
    fuelLevelAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool ClusterDataStubDefault::validateFuelLevelAttributeRequestedValue(const uint8_t &_value) {
    (void)_value;
	return true;
}

void ClusterDataStubDefault::setFuelLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
    (void)_client;
    setFuelLevelAttribute(_value);
}

void ClusterDataStubDefault::onRemoteFuelLevelAttributeChanged() {
    // No operation in default
}

void ClusterDataStubDefault::RemoteEventHandler::onRemoteFuelLevelAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteFuelLevelAttributeChanged();
}

bool ClusterDataStubDefault::RemoteEventHandler::onRemoteSetFuelLevelAttribute(uint8_t _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetFuelLevelAttribute(std::move(_value));
}

bool ClusterDataStubDefault::RemoteEventHandler::onRemoteSetFuelLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
    (void)_client;
    return onRemoteSetFuelLevelAttribute(_value);
}





ClusterDataStubDefault::RemoteEventHandler::RemoteEventHandler(ClusterDataStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace ClusterData
} // namespace ivis
} // namespace com
} // namespace v1
