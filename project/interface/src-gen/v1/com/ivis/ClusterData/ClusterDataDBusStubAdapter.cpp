/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/ClusterData/ClusterData.hpp>
#include <v1/com/ivis/ClusterData/ClusterDataDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace ivis {
namespace ClusterData {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createClusterDataDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<ClusterDataDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerClusterDataDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	ClusterData::getInterface(), &createClusterDataDBusStubAdapter);
}

ClusterDataDBusStubAdapterInternal::~ClusterDataDBusStubAdapterInternal() {
    deactivateManagedInstances();
    ClusterDataDBusStubAdapterHelper::deinit();
}

void ClusterDataDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* ClusterDataDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getVehicleSpeedAttribute\">\n"
            "<arg name=\"value\" type=\"q\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setVehicleSpeedAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"q\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onVehicleSpeedAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"q\" />\n"
        "</signal>\n"
        "<method name=\"getEngineSpeedAttribute\">\n"
            "<arg name=\"value\" type=\"q\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setEngineSpeedAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"q\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onEngineSpeedAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"q\" />\n"
        "</signal>\n"
        "<method name=\"getFuelLevelAttribute\">\n"
            "<arg name=\"value\" type=\"y\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setFuelLevelAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"y\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onFuelLevelAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"y\" />\n"
        "</signal>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ClusterData::ClusterDataStub,
        CommonAPI::Version
        > ClusterDataDBusStubAdapterInternal::getClusterDataInterfaceVersionStubDispatcher(&ClusterDataStub::getInterfaceVersion, "uu");

/**
 * description: current vehicle speed. unit is km/h
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ClusterData::ClusterDataStub,
        uint16_t
        > ClusterDataDBusStubAdapterInternal::getVehicleSpeedAttributeStubDispatcher(
            &::v1::com::ivis::ClusterData::ClusterDataStub::getVehicleSpeedAttribute
            , "q"
            );
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::ClusterData::ClusterDataStub,
        uint16_t
        > ClusterDataDBusStubAdapterInternal::setVehicleSpeedAttributeStubDispatcher(
                &::v1::com::ivis::ClusterData::ClusterDataStub::getVehicleSpeedAttribute,
                &ClusterDataStubRemoteEvent::onRemoteSetVehicleSpeedAttribute,
                &ClusterDataStubRemoteEvent::onRemoteVehicleSpeedAttributeChanged
                ,&ClusterDataStubAdapter::fireVehicleSpeedAttributeChanged
                ,"q"
                );
/**
 * description: current engine speed. unit is RPM
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ClusterData::ClusterDataStub,
        uint16_t
        > ClusterDataDBusStubAdapterInternal::getEngineSpeedAttributeStubDispatcher(
            &::v1::com::ivis::ClusterData::ClusterDataStub::getEngineSpeedAttribute
            , "q"
            );
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::ClusterData::ClusterDataStub,
        uint16_t
        > ClusterDataDBusStubAdapterInternal::setEngineSpeedAttributeStubDispatcher(
                &::v1::com::ivis::ClusterData::ClusterDataStub::getEngineSpeedAttribute,
                &ClusterDataStubRemoteEvent::onRemoteSetEngineSpeedAttribute,
                &ClusterDataStubRemoteEvent::onRemoteEngineSpeedAttributeChanged
                ,&ClusterDataStubAdapter::fireEngineSpeedAttributeChanged
                ,"q"
                );
/**
 * description: current fuel level. unit is %
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ClusterData::ClusterDataStub,
        uint8_t
        > ClusterDataDBusStubAdapterInternal::getFuelLevelAttributeStubDispatcher(
            &::v1::com::ivis::ClusterData::ClusterDataStub::getFuelLevelAttribute
            , "y"
            );
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::ClusterData::ClusterDataStub,
        uint8_t
        > ClusterDataDBusStubAdapterInternal::setFuelLevelAttributeStubDispatcher(
                &::v1::com::ivis::ClusterData::ClusterDataStub::getFuelLevelAttribute,
                &ClusterDataStubRemoteEvent::onRemoteSetFuelLevelAttribute,
                &ClusterDataStubRemoteEvent::onRemoteFuelLevelAttributeChanged
                ,&ClusterDataStubAdapter::fireFuelLevelAttributeChanged
                ,"y"
                );




/**
 * description: current vehicle speed. unit is km/h
 */
void ClusterDataDBusStubAdapterInternal::fireVehicleSpeedAttributeChanged(const uint16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint16_t
    >>
        ::sendSignal(
            *this,
            "onVehicleSpeedAttributeChanged",
            "q",
            value
    
    );
}
/**
 * description: current engine speed. unit is RPM
 */
void ClusterDataDBusStubAdapterInternal::fireEngineSpeedAttributeChanged(const uint16_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint16_t
    >>
        ::sendSignal(
            *this,
            "onEngineSpeedAttributeChanged",
            "q",
            value
    
    );
}
/**
 * description: current fuel level. unit is %
 */
void ClusterDataDBusStubAdapterInternal::fireFuelLevelAttributeChanged(const uint8_t& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint8_t
    >>
        ::sendSignal(
            *this,
            "onFuelLevelAttributeChanged",
            "y",
            value
    
    );
}



const ClusterDataDBusStubAdapterHelper::StubDispatcherTable& ClusterDataDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& ClusterDataDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

ClusterDataDBusStubAdapterInternal::ClusterDataDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ClusterDataDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<ClusterDataStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: current vehicle speed. unit is km/h
             */
            { { "getVehicleSpeedAttribute", "" }, &com::ivis::ClusterData::ClusterDataDBusStubAdapterInternal::getVehicleSpeedAttributeStubDispatcher }
            , { { "setVehicleSpeedAttribute", "q" }, &com::ivis::ClusterData::ClusterDataDBusStubAdapterInternal::setVehicleSpeedAttributeStubDispatcher },
            /**
             * description: current engine speed. unit is RPM
             */
            { { "getEngineSpeedAttribute", "" }, &com::ivis::ClusterData::ClusterDataDBusStubAdapterInternal::getEngineSpeedAttributeStubDispatcher }
            , { { "setEngineSpeedAttribute", "q" }, &com::ivis::ClusterData::ClusterDataDBusStubAdapterInternal::setEngineSpeedAttributeStubDispatcher },
            /**
             * description: current fuel level. unit is %
             */
            { { "getFuelLevelAttribute", "" }, &com::ivis::ClusterData::ClusterDataDBusStubAdapterInternal::getFuelLevelAttributeStubDispatcher }
            , { { "setFuelLevelAttribute", "y" }, &com::ivis::ClusterData::ClusterDataDBusStubAdapterInternal::setFuelLevelAttributeStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::ivis::ClusterData::ClusterDataDBusStubAdapterInternal::getClusterDataInterfaceVersionStubDispatcher });
}

bool ClusterDataDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace ClusterData
} // namespace ivis
} // namespace com
} // namespace v1
