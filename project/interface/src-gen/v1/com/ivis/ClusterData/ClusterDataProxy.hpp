/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.10.v201611111521.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_CLUSTERDATA_Cluster_Data_PROXY_HPP_
#define V1_COM_IVIS_CLUSTERDATA_Cluster_Data_PROXY_HPP_

#include <v1/com/ivis/ClusterData/ClusterDataProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace ClusterData {

template <typename ... _AttributeExtensions>
class ClusterDataProxy
    : virtual public ClusterData,
      virtual public ClusterDataProxyBase,
      virtual public _AttributeExtensions... {
public:
    ClusterDataProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ClusterDataProxy();

    typedef ClusterData InterfaceType;


    /**
     * description: current vehicle speed. unit is km/h
     */
    /**
     * Returns the wrapper class that provides access to the attribute vehicleSpeed.
     */
    virtual VehicleSpeedAttribute& getVehicleSpeedAttribute() {
        return delegate_->getVehicleSpeedAttribute();
    }
    /**
     * description: current engine speed. unit is RPM
     */
    /**
     * Returns the wrapper class that provides access to the attribute engineSpeed.
     */
    virtual EngineSpeedAttribute& getEngineSpeedAttribute() {
        return delegate_->getEngineSpeedAttribute();
    }
    /**
     * description: current fuel level. unit is %
     */
    /**
     * Returns the wrapper class that provides access to the attribute fuelLevel.
     */
    virtual FuelLevelAttribute& getFuelLevelAttribute() {
        return delegate_->getFuelLevelAttribute();
    }




    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< ClusterDataProxyBase> delegate_;
};

typedef ClusterDataProxy<> ClusterDataProxyDefault;

namespace ClusterDataExtensions {
    /**
     * description: current vehicle speed. unit is km/h
     */
    template <template <typename > class _ExtensionType>
    class VehicleSpeedAttributeExtension {
     public:
        typedef _ExtensionType< ClusterDataProxyBase::VehicleSpeedAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ClusterDataProxyBase::VehicleSpeedAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        VehicleSpeedAttributeExtension(ClusterDataProxyBase& proxy): attributeExtension_(proxy.getVehicleSpeedAttribute()) {
        }
    
        inline extension_type& getVehicleSpeedAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: current engine speed. unit is RPM
     */
    template <template <typename > class _ExtensionType>
    class EngineSpeedAttributeExtension {
     public:
        typedef _ExtensionType< ClusterDataProxyBase::EngineSpeedAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ClusterDataProxyBase::EngineSpeedAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        EngineSpeedAttributeExtension(ClusterDataProxyBase& proxy): attributeExtension_(proxy.getEngineSpeedAttribute()) {
        }
    
        inline extension_type& getEngineSpeedAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: current fuel level. unit is %
     */
    template <template <typename > class _ExtensionType>
    class FuelLevelAttributeExtension {
     public:
        typedef _ExtensionType< ClusterDataProxyBase::FuelLevelAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ClusterDataProxyBase::FuelLevelAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        FuelLevelAttributeExtension(ClusterDataProxyBase& proxy): attributeExtension_(proxy.getFuelLevelAttribute()) {
        }
    
        inline extension_type& getFuelLevelAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace ClusterDataExtensions

//
// ClusterDataProxy Implementation
//
template <typename ... _AttributeExtensions>
ClusterDataProxy<_AttributeExtensions...>::ClusterDataProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< ClusterDataProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< ClusterDataProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ClusterDataProxy<_AttributeExtensions...>::~ClusterDataProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &ClusterDataProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ClusterDataProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ClusterDataProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ClusterDataProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ClusterDataProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ClusterData
} // namespace ivis
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::com::ivis::ClusterData::ClusterDataProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::ivis::ClusterData::ClusterDataProxy<
            ::v1::com::ivis::ClusterData::ClusterDataExtensions::VehicleSpeedAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::ClusterData::ClusterDataExtensions::EngineSpeedAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::ClusterData::ClusterDataExtensions::FuelLevelAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_CLUSTERDATA_Cluster_Data_PROXY_HPP_
