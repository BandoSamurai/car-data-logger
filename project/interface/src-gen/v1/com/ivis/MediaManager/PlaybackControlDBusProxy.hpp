/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MEDIAMANAGER_Playback_Control_DBUS_PROXY_HPP_
#define V1_COM_IVIS_MEDIAMANAGER_Playback_Control_DBUS_PROXY_HPP_

#include <v1/com/ivis/MediaManager/PlaybackControlProxyBase.hpp>
#include "v1/com/ivis/MediaManager/PlaybackControlDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace ivis {
namespace MediaManager {

class PlaybackControlDBusProxy
    : virtual public PlaybackControlProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    PlaybackControlDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~PlaybackControlDBusProxy() { }

    virtual RepeatModeAttribute& getRepeatModeAttribute();
    virtual PlayModeAttribute& getPlayModeAttribute();
    virtual CurrentTrackInfoAttribute& getCurrentTrackInfoAttribute();
    virtual CurrentTrackNumberAttribute& getCurrentTrackNumberAttribute();
    virtual TotalTrackNumberAttribute& getTotalTrackNumberAttribute();
    virtual VideoVisibleAttribute& getVideoVisibleAttribute();
    virtual PlayStateInfoAttribute& getPlayStateInfoAttribute();

    virtual NotifiyTimePositionInfoChangedEvent& getNotifiyTimePositionInfoChangedEvent();
    virtual ResponseGetPlaylistEvent& getResponseGetPlaylistEvent();
    virtual NotifyPlaylistChangedEvent& getNotifyPlaylistChangedEvent();
    virtual NotifyPlaybackErrorEvent& getNotifyPlaybackErrorEvent();

    virtual void requestAction(const ::v1::com::ivis::MediaManager::MediaManagerTypes::Action &_action, const uint64_t &_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestActionAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::Action &_action, const uint64_t &_value, RequestActionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void requestPlay(const uint64_t &_indexOfplaylist, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestPlayAsync(const uint64_t &_indexOfplaylist, RequestPlayAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void requestPlayBrowsingSession(const uint64_t &_browsingSessionId, const uint64_t &_uniqueId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestPlayBrowsingSessionAsync(const uint64_t &_browsingSessionId, const uint64_t &_uniqueId, RequestPlayBrowsingSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void requestSetTimePosition(const uint32_t &_time, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestSetTimePositionAsync(const uint32_t &_time, RequestSetTimePositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void requestGetPlaylist(const ::v1::com::ivis::MediaManager::MediaManagerTypes::ResultTypeList &_resultTypes, const uint32_t &_startIndex, const int32_t &_amount, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestGetPlaylistAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::ResultTypeList &_resultTypes, const uint32_t &_startIndex, const int32_t &_amount, RequestGetPlaylistAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void requestSetRepeatMode(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode &_mode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestSetRepeatModeAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode &_mode, RequestSetRepeatModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void requestSetPlayMode(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode &_mode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> requestSetPlayModeAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode &_mode, RequestSetPlayModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    class DBusrepeatMode_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatModeAttribute>> {
    public:
    template <typename... _A>
    	DBusrepeatMode_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatModeAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatModeAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RepeatModeAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusrepeatMode_Attribute repeatMode_;
    class DBusplayMode_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayModeAttribute>> {
    public:
    template <typename... _A>
    	DBusplayMode_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayModeAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayModeAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayModeAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusplayMode_Attribute playMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CurrentTrackInfoAttribute, ::v1::com::ivis::MediaManager::MediaManagerTypes_::TrackInfoDeployment_t>> currentTrackInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CurrentTrackNumberAttribute>> currentTrackNumber_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<TotalTrackNumberAttribute>> totalTrackNumber_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<VideoVisibleAttribute>> videoVisible_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PlayStateInfoAttribute, ::v1::com::ivis::MediaManager::MediaManagerTypes_::PlayStateInfoDeployment_t>> playStateInfo_;

    CommonAPI::DBus::DBusEvent<NotifiyTimePositionInfoChangedEvent, CommonAPI::Deployable<::v1::com::ivis::MediaManager::MediaManagerTypes::TimePositionInfo, ::v1::com::ivis::MediaManager::MediaManagerTypes_::TimePositionInfoDeployment_t>> notifiyTimePositionInfoChanged_;
    CommonAPI::DBus::DBusEvent<ResponseGetPlaylistEvent, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v1::com::ivis::MediaManager::MediaManagerTypes::Playlist, ::v1::com::ivis::MediaManager::MediaManagerTypes_::PlaylistDeployment_t>> responseGetPlaylist_;
    CommonAPI::DBus::DBusEvent<NotifyPlaylistChangedEvent> notifyPlaylistChanged_;
    CommonAPI::DBus::DBusEvent<NotifyPlaybackErrorEvent, CommonAPI::Deployable<::v1::com::ivis::MediaManager::MediaManagerTypes::PlaybackError, CommonAPI::EmptyDeployment>> notifyPlaybackError_;

};

} // namespace MediaManager
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_MEDIAMANAGER_Playback_Control_DBUS_PROXY_HPP_

