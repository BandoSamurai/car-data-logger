/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MEDIAMANAGER_Media_Manager_Types_HPP_
#define V1_COM_IVIS_MEDIAMANAGER_Media_Manager_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace MediaManager {

struct MediaManagerTypes {
    
    struct PlaybackError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ERROR = 0
        };
        
        PlaybackError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ERROR)) {}
        PlaybackError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PlaybackError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PlaybackError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PlaybackError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PlaybackError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PlaybackError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PlaybackError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RepeatMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            REPEAT_OFF = 0,
            REPEAT_ALL = 1,
            REPEAT_ONE_SONG = 2
        };
        
        RepeatMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::REPEAT_OFF)) {}
        RepeatMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::REPEAT_OFF):
                case static_cast<int32_t>(Literal::REPEAT_ALL):
                case static_cast<int32_t>(Literal::REPEAT_ONE_SONG):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RepeatMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RepeatMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RepeatMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RepeatMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RepeatMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RepeatMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PlayMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NORMAL = 0,
            SUFFLE = 1
        };
        
        PlayMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NORMAL)) {}
        PlayMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NORMAL):
                case static_cast<int32_t>(Literal::SUFFLE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PlayMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PlayMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PlayMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PlayMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PlayMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PlayMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Action : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PLAY = 0,
            PAUSE = 1,
            STOP = 2,
            FAST_FOWARD = 3,
            FAST_FOWARD_AUTO = 4,
            FAST_REWIND = 5,
            FAST_REWIND_AUTO = 6,
            NEXT_TRACK = 7,
            PREV_TRACK = 8,
            STEP_FOWARD = 9,
            STEP_REWIND = 10
        };
        
        Action() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PLAY)) {}
        Action(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PLAY):
                case static_cast<int32_t>(Literal::PAUSE):
                case static_cast<int32_t>(Literal::STOP):
                case static_cast<int32_t>(Literal::FAST_FOWARD):
                case static_cast<int32_t>(Literal::FAST_FOWARD_AUTO):
                case static_cast<int32_t>(Literal::FAST_REWIND):
                case static_cast<int32_t>(Literal::FAST_REWIND_AUTO):
                case static_cast<int32_t>(Literal::NEXT_TRACK):
                case static_cast<int32_t>(Literal::PREV_TRACK):
                case static_cast<int32_t>(Literal::STEP_FOWARD):
                case static_cast<int32_t>(Literal::STEP_REWIND):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Action &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Action &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Action &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Action &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Action &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Action &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef Action PlayState;
    struct PlayStateInfo : CommonAPI::Struct<uint64_t, PlayState> {
    	
    	PlayStateInfo() {
    	}
    	PlayStateInfo(const uint64_t &_currentFid, const PlayState &_state)
    	{
    		std::get<0>(values_) = _currentFid;
    		std::get<1>(values_) = _state;
    	}
    	inline const uint64_t &getCurrentFid() const { return std::get<0>(values_); }
    	inline void setCurrentFid(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const PlayState &getState() const { return std::get<1>(values_); }
    	inline void setState(const PlayState &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const PlayStateInfo& _other) const {
                return (getCurrentFid() == _other.getCurrentFid() && getState() == _other.getState());
        }
    	inline bool operator!=(const PlayStateInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct TimePositionInfo : CommonAPI::Struct<uint64_t, uint32_t, uint32_t, uint32_t> {
    	
    	TimePositionInfo() {
    	}
    	TimePositionInfo(const uint64_t &_currentFid, const uint32_t &_currentTimePosition, const uint32_t &_totalTimeLength, const uint32_t &_seekFactor)
    	{
    		std::get<0>(values_) = _currentFid;
    		std::get<1>(values_) = _currentTimePosition;
    		std::get<2>(values_) = _totalTimeLength;
    		std::get<3>(values_) = _seekFactor;
    	}
    	inline const uint64_t &getCurrentFid() const { return std::get<0>(values_); }
    	inline void setCurrentFid(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getCurrentTimePosition() const { return std::get<1>(values_); }
    	inline void setCurrentTimePosition(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getTotalTimeLength() const { return std::get<2>(values_); }
    	inline void setTotalTimeLength(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getSeekFactor() const { return std::get<3>(values_); }
    	inline void setSeekFactor(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const TimePositionInfo& _other) const {
                return (getCurrentFid() == _other.getCurrentFid() && getCurrentTimePosition() == _other.getCurrentTimePosition() && getTotalTimeLength() == _other.getTotalTimeLength() && getSeekFactor() == _other.getSeekFactor());
        }
    	inline bool operator!=(const TimePositionInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct TrackInfo : CommonAPI::Struct<uint64_t, uint64_t, uint32_t, std::string, std::string, std::string, std::string, std::string, std::string> {
    	
    	TrackInfo() {
    	}
    	TrackInfo(const uint64_t &_fid, const uint64_t &_deviceId, const uint32_t &_totalTimeLength, const std::string &_title, const std::string &_artist, const std::string &_album, const std::string &_genre, const std::string &_albumArtPath, const std::string &_filePath)
    	{
    		std::get<0>(values_) = _fid;
    		std::get<1>(values_) = _deviceId;
    		std::get<2>(values_) = _totalTimeLength;
    		std::get<3>(values_) = _title;
    		std::get<4>(values_) = _artist;
    		std::get<5>(values_) = _album;
    		std::get<6>(values_) = _genre;
    		std::get<7>(values_) = _albumArtPath;
    		std::get<8>(values_) = _filePath;
    	}
    	inline const uint64_t &getFid() const { return std::get<0>(values_); }
    	inline void setFid(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getDeviceId() const { return std::get<1>(values_); }
    	inline void setDeviceId(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getTotalTimeLength() const { return std::get<2>(values_); }
    	inline void setTotalTimeLength(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getTitle() const { return std::get<3>(values_); }
    	inline void setTitle(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getArtist() const { return std::get<4>(values_); }
    	inline void setArtist(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getAlbum() const { return std::get<5>(values_); }
    	inline void setAlbum(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const std::string &getGenre() const { return std::get<6>(values_); }
    	inline void setGenre(const std::string &_value) { std::get<6>(values_) = _value; }
    	inline const std::string &getAlbumArtPath() const { return std::get<7>(values_); }
    	inline void setAlbumArtPath(const std::string &_value) { std::get<7>(values_) = _value; }
    	inline const std::string &getFilePath() const { return std::get<8>(values_); }
    	inline void setFilePath(const std::string &_value) { std::get<8>(values_) = _value; }
    	inline bool operator==(const TrackInfo& _other) const {
                return (getFid() == _other.getFid() && getDeviceId() == _other.getDeviceId() && getTotalTimeLength() == _other.getTotalTimeLength() && getTitle() == _other.getTitle() && getArtist() == _other.getArtist() && getAlbum() == _other.getAlbum() && getGenre() == _other.getGenre() && getAlbumArtPath() == _other.getAlbumArtPath() && getFilePath() == _other.getFilePath());
        }
    	inline bool operator!=(const TrackInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MediaManagerTypes::TrackInfo> Playlist;
    
    struct BrowserError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            BR_OK = 0,
            BR_NO_RESULT = 1,
            BR_INVALID_PARAMETER = 2,
            BR_INVALID_QUERY = 3,
            BR_UNKNOWN = 4
        };
        
        BrowserError() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::BR_OK)) {}
        BrowserError(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::BR_OK):
                case static_cast<int32_t>(Literal::BR_NO_RESULT):
                case static_cast<int32_t>(Literal::BR_INVALID_PARAMETER):
                case static_cast<int32_t>(Literal::BR_INVALID_QUERY):
                case static_cast<int32_t>(Literal::BR_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BrowserError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BrowserError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BrowserError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BrowserError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BrowserError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BrowserError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MetadataType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TITLE = 0,
            ARTIST = 1,
            ALBUM = 2,
            GENRE = 3,
            ALBUMART = 4,
            DURATION = 5
        };
        
        MetadataType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TITLE)) {}
        MetadataType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TITLE):
                case static_cast<int32_t>(Literal::ARTIST):
                case static_cast<int32_t>(Literal::ALBUM):
                case static_cast<int32_t>(Literal::GENRE):
                case static_cast<int32_t>(Literal::ALBUMART):
                case static_cast<int32_t>(Literal::DURATION):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MetadataType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MetadataType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MetadataType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MetadataType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MetadataType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MetadataType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MediaType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 128,
            AUDIO = 1,
            VIDEO = 2,
            IMAGE = 4
        };
        
        MediaType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        MediaType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::AUDIO):
                case static_cast<int32_t>(Literal::VIDEO):
                case static_cast<int32_t>(Literal::IMAGE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MediaType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MediaType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MediaType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MediaType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MediaType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MediaType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::vector<MediaManagerTypes::MetadataType> ResultTypeList;
    typedef CommonAPI::Variant<std::string, uint64_t>  Item;
    struct FilterItem : CommonAPI::Struct<MetadataType, Item> {
    	
    	FilterItem() {
    	}
    	FilterItem(const MetadataType &_type, const Item &_value)
    	{
    		std::get<0>(values_) = _type;
    		std::get<1>(values_) = _value;
    	}
    	inline const MetadataType &getType() const { return std::get<0>(values_); }
    	inline void setType(const MetadataType &_value) { std::get<0>(values_) = _value; }
    	inline const Item &getValue() const { return std::get<1>(values_); }
    	inline void setValue(const Item &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const FilterItem& _other) const {
                return (getType() == _other.getType() && getValue() == _other.getValue());
        }
    	inline bool operator!=(const FilterItem &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MediaManagerTypes::FilterItem> FilterList;
    
    struct BrowsingStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            START = 0,
            RUNNING = 1,
            FINISHED = 2
        };
        
        BrowsingStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::START)) {}
        BrowsingStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::START):
                case static_cast<int32_t>(Literal::RUNNING):
                case static_cast<int32_t>(Literal::FINISHED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const BrowsingStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const BrowsingStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const BrowsingStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const BrowsingStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const BrowsingStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const BrowsingStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct BrowsingResult : CommonAPI::Struct<uint64_t, BrowsingStatus, uint32_t, uint64_t, uint32_t> {
    	
    	BrowsingResult() {
    	}
    	BrowsingResult(const uint64_t &_sessionId, const BrowsingStatus &_status, const uint32_t &_resultListCount, const uint64_t &_deviceId, const uint32_t &_mediaTypes)
    	{
    		std::get<0>(values_) = _sessionId;
    		std::get<1>(values_) = _status;
    		std::get<2>(values_) = _resultListCount;
    		std::get<3>(values_) = _deviceId;
    		std::get<4>(values_) = _mediaTypes;
    	}
    	inline const uint64_t &getSessionId() const { return std::get<0>(values_); }
    	inline void setSessionId(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const BrowsingStatus &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const BrowsingStatus &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getResultListCount() const { return std::get<2>(values_); }
    	inline void setResultListCount(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint64_t &getDeviceId() const { return std::get<3>(values_); }
    	inline void setDeviceId(const uint64_t &_value) { std::get<3>(values_) = _value; }
    	inline const uint32_t &getMediaTypes() const { return std::get<4>(values_); }
    	inline void setMediaTypes(const uint32_t &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const BrowsingResult& _other) const {
                return (getSessionId() == _other.getSessionId() && getStatus() == _other.getStatus() && getResultListCount() == _other.getResultListCount() && getDeviceId() == _other.getDeviceId() && getMediaTypes() == _other.getMediaTypes());
        }
    	inline bool operator!=(const BrowsingResult &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct FilesystemItem : CommonAPI::Struct<bool, uint64_t, uint64_t, std::string, std::string> {
    	
    	FilesystemItem() {
    		std::get<0>(values_) = false;
    	}
    	FilesystemItem(const bool &_isFolder, const uint64_t &_uniqueId, const uint64_t &_parentId, const std::string &_name, const std::string &_relativePath)
    	{
    		std::get<0>(values_) = _isFolder;
    		std::get<1>(values_) = _uniqueId;
    		std::get<2>(values_) = _parentId;
    		std::get<3>(values_) = _name;
    		std::get<4>(values_) = _relativePath;
    	}
    	inline const bool &getIsFolder() const { return std::get<0>(values_); }
    	inline void setIsFolder(const bool _value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getUniqueId() const { return std::get<1>(values_); }
    	inline void setUniqueId(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint64_t &getParentId() const { return std::get<2>(values_); }
    	inline void setParentId(const uint64_t &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getName() const { return std::get<3>(values_); }
    	inline void setName(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getRelativePath() const { return std::get<4>(values_); }
    	inline void setRelativePath(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const FilesystemItem& _other) const {
                return (getIsFolder() == _other.getIsFolder() && getUniqueId() == _other.getUniqueId() && getParentId() == _other.getParentId() && getName() == _other.getName() && getRelativePath() == _other.getRelativePath());
        }
    	inline bool operator!=(const FilesystemItem &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct FilesystemBrowsingResult : CommonAPI::Struct<BrowsingResult, FilesystemItem, std::string> {
    	
    	FilesystemBrowsingResult() {
    	}
    	FilesystemBrowsingResult(const BrowsingResult &_browsingResult, const FilesystemItem &_currentItem, const std::string &_mountPath)
    	{
    		std::get<0>(values_) = _browsingResult;
    		std::get<1>(values_) = _currentItem;
    		std::get<2>(values_) = _mountPath;
    	}
    	inline const BrowsingResult &getBrowsingResult() const { return std::get<0>(values_); }
    	inline void setBrowsingResult(const BrowsingResult &_value) { std::get<0>(values_) = _value; }
    	inline const FilesystemItem &getCurrentItem() const { return std::get<1>(values_); }
    	inline void setCurrentItem(const FilesystemItem &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getMountPath() const { return std::get<2>(values_); }
    	inline void setMountPath(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const FilesystemBrowsingResult& _other) const {
                return (getBrowsingResult() == _other.getBrowsingResult() && getCurrentItem() == _other.getCurrentItem() && getMountPath() == _other.getMountPath());
        }
    	inline bool operator!=(const FilesystemBrowsingResult &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct MetadataBrowsingResult : CommonAPI::Struct<BrowsingResult, ResultTypeList, FilterList> {
    	
    	MetadataBrowsingResult() {
    	}
    	MetadataBrowsingResult(const BrowsingResult &_browsingResult, const ResultTypeList &_resultTypeList, const FilterList &_filterList)
    	{
    		std::get<0>(values_) = _browsingResult;
    		std::get<1>(values_) = _resultTypeList;
    		std::get<2>(values_) = _filterList;
    	}
    	inline const BrowsingResult &getBrowsingResult() const { return std::get<0>(values_); }
    	inline void setBrowsingResult(const BrowsingResult &_value) { std::get<0>(values_) = _value; }
    	inline const ResultTypeList &getResultTypeList() const { return std::get<1>(values_); }
    	inline void setResultTypeList(const ResultTypeList &_value) { std::get<1>(values_) = _value; }
    	inline const FilterList &getFilterList() const { return std::get<2>(values_); }
    	inline void setFilterList(const FilterList &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const MetadataBrowsingResult& _other) const {
                return (getBrowsingResult() == _other.getBrowsingResult() && getResultTypeList() == _other.getResultTypeList() && getFilterList() == _other.getFilterList());
        }
    	inline bool operator!=(const MetadataBrowsingResult &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct Metadata : CommonAPI::Struct<MetadataType, uint64_t, std::string> {
    	
    	Metadata() {
    	}
    	Metadata(const MetadataType &_type, const uint64_t &_uniqueId, const std::string &_value)
    	{
    		std::get<0>(values_) = _type;
    		std::get<1>(values_) = _uniqueId;
    		std::get<2>(values_) = _value;
    	}
    	inline const MetadataType &getType() const { return std::get<0>(values_); }
    	inline void setType(const MetadataType &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getUniqueId() const { return std::get<1>(values_); }
    	inline void setUniqueId(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getValue() const { return std::get<2>(values_); }
    	inline void setValue(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const Metadata& _other) const {
                return (getType() == _other.getType() && getUniqueId() == _other.getUniqueId() && getValue() == _other.getValue());
        }
    	inline bool operator!=(const Metadata &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct MetadataItem : CommonAPI::Struct<uint64_t, MediaType, std::vector<Metadata>, std::string> {
    	
    	MetadataItem() {
    	}
    	MetadataItem(const uint64_t &_uniqueId, const MediaType &_mediaType, const std::vector<Metadata> &_metadata, const std::string &_path)
    	{
    		std::get<0>(values_) = _uniqueId;
    		std::get<1>(values_) = _mediaType;
    		std::get<2>(values_) = _metadata;
    		std::get<3>(values_) = _path;
    	}
    	inline const uint64_t &getUniqueId() const { return std::get<0>(values_); }
    	inline void setUniqueId(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const MediaType &getMediaType() const { return std::get<1>(values_); }
    	inline void setMediaType(const MediaType &_value) { std::get<1>(values_) = _value; }
    	inline const std::vector<Metadata> &getMetadata() const { return std::get<2>(values_); }
    	inline void setMetadata(const std::vector<Metadata> &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getPath() const { return std::get<3>(values_); }
    	inline void setPath(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const MetadataItem& _other) const {
                return (getUniqueId() == _other.getUniqueId() && getMediaType() == _other.getMediaType() && getMetadata() == _other.getMetadata() && getPath() == _other.getPath());
        }
    	inline bool operator!=(const MetadataItem &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MediaManagerTypes::MetadataItem> MetadataList;
    typedef std::vector<MediaManagerTypes::FilesystemItem> FilesystemList;
    struct MatchCount : CommonAPI::Struct<MetadataType, uint32_t, uint64_t> {
    	
    	MatchCount() {
    	}
    	MatchCount(const MetadataType &_type, const uint32_t &_count, const uint64_t &_sessionId)
    	{
    		std::get<0>(values_) = _type;
    		std::get<1>(values_) = _count;
    		std::get<2>(values_) = _sessionId;
    	}
    	inline const MetadataType &getType() const { return std::get<0>(values_); }
    	inline void setType(const MetadataType &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getCount() const { return std::get<1>(values_); }
    	inline void setCount(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint64_t &getSessionId() const { return std::get<2>(values_); }
    	inline void setSessionId(const uint64_t &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const MatchCount& _other) const {
                return (getType() == _other.getType() && getCount() == _other.getCount() && getSessionId() == _other.getSessionId());
        }
    	inline bool operator!=(const MatchCount &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MediaManagerTypes::MatchCount> MatchCountList;
    
    struct SyncState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            IDLE = 0,
            RUNNING = 1,
            PAUSE = 2,
            ERROR = 3
        };
        
        SyncState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::IDLE)) {}
        SyncState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::IDLE):
                case static_cast<int32_t>(Literal::RUNNING):
                case static_cast<int32_t>(Literal::PAUSE):
                case static_cast<int32_t>(Literal::ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SyncState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SyncState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SyncState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SyncState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SyncState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SyncState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SyncLevel : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NONE = 0,
            FILE = 1,
            FILEANDMETADATA = 2
        };
        
        SyncLevel() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NONE)) {}
        SyncLevel(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NONE):
                case static_cast<int32_t>(Literal::FILE):
                case static_cast<int32_t>(Literal::FILEANDMETADATA):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SyncLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SyncLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SyncLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SyncLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SyncLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SyncLevel &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct DeviceSyncInformation : CommonAPI::Struct<uint64_t, SyncState, SyncLevel, std::string, bool, bool> {
    	
    	DeviceSyncInformation() {
    		std::get<4>(values_) = false;
    		std::get<5>(values_) = false;
    	}
    	DeviceSyncInformation(const uint64_t &_deviceId, const SyncState &_state, const SyncLevel &_level, const std::string &_syncPath, const bool &_audioAvailable, const bool &_videoAvailable)
    	{
    		std::get<0>(values_) = _deviceId;
    		std::get<1>(values_) = _state;
    		std::get<2>(values_) = _level;
    		std::get<3>(values_) = _syncPath;
    		std::get<4>(values_) = _audioAvailable;
    		std::get<5>(values_) = _videoAvailable;
    	}
    	inline const uint64_t &getDeviceId() const { return std::get<0>(values_); }
    	inline void setDeviceId(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const SyncState &getState() const { return std::get<1>(values_); }
    	inline void setState(const SyncState &_value) { std::get<1>(values_) = _value; }
    	inline const SyncLevel &getLevel() const { return std::get<2>(values_); }
    	inline void setLevel(const SyncLevel &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getSyncPath() const { return std::get<3>(values_); }
    	inline void setSyncPath(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const bool &getAudioAvailable() const { return std::get<4>(values_); }
    	inline void setAudioAvailable(const bool _value) { std::get<4>(values_) = _value; }
    	inline const bool &getVideoAvailable() const { return std::get<5>(values_); }
    	inline void setVideoAvailable(const bool _value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const DeviceSyncInformation& _other) const {
                return (getDeviceId() == _other.getDeviceId() && getState() == _other.getState() && getLevel() == _other.getLevel() && getSyncPath() == _other.getSyncPath() && getAudioAvailable() == _other.getAudioAvailable() && getVideoAvailable() == _other.getVideoAvailable());
        }
    	inline bool operator!=(const DeviceSyncInformation &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<MediaManagerTypes::DeviceSyncInformation> DeviceSyncList;
    
    struct IndexerState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            IDLE = 0,
            RUNNING = 1
        };
        
        IndexerState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::IDLE)) {}
        IndexerState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::IDLE):
                case static_cast<int32_t>(Literal::RUNNING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const IndexerState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const IndexerState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const IndexerState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const IndexerState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const IndexerState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const IndexerState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.ivis.MediaManager.MediaManagerTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct MediaManagerTypes

} // namespace MediaManager
} // namespace ivis
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for PlaybackError
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::PlaybackError> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlaybackError& playbackError) const {
            return static_cast<int32_t>(playbackError);
        }
    };
    //Hash for RepeatMode
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode& repeatMode) const {
            return static_cast<int32_t>(repeatMode);
        }
    };
    //Hash for PlayMode
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode& playMode) const {
            return static_cast<int32_t>(playMode);
        }
    };
    //Hash for Action
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::Action> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::Action& action) const {
            return static_cast<int32_t>(action);
        }
    };
    //Hash for BrowserError
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::BrowserError> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::BrowserError& browserError) const {
            return static_cast<int32_t>(browserError);
        }
    };
    //Hash for MetadataType
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::MetadataType> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::MetadataType& metadataType) const {
            return static_cast<int32_t>(metadataType);
        }
    };
    //Hash for MediaType
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::MediaType> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::MediaType& mediaType) const {
            return static_cast<int32_t>(mediaType);
        }
    };
    //Hash for BrowsingStatus
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::BrowsingStatus> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::BrowsingStatus& browsingStatus) const {
            return static_cast<int32_t>(browsingStatus);
        }
    };
    //Hash for IndexerState
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::IndexerState> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::IndexerState& indexerState) const {
            return static_cast<int32_t>(indexerState);
        }
    };
    //Hash for SyncState
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::SyncState> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::SyncState& syncState) const {
            return static_cast<int32_t>(syncState);
        }
    };
    //Hash for SyncLevel
    template<>
    struct hash<::v1::com::ivis::MediaManager::MediaManagerTypes::SyncLevel> {
        inline size_t operator()(const ::v1::com::ivis::MediaManager::MediaManagerTypes::SyncLevel& syncLevel) const {
            return static_cast<int32_t>(syncLevel);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_MEDIAMANAGER_Media_Manager_Types_HPP_
