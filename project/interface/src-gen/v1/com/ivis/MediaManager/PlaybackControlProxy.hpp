/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.10.v201611111521.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MEDIAMANAGER_Playback_Control_PROXY_HPP_
#define V1_COM_IVIS_MEDIAMANAGER_Playback_Control_PROXY_HPP_

#include <v1/com/ivis/MediaManager/PlaybackControlProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace MediaManager {

template <typename ... _AttributeExtensions>
class PlaybackControlProxy
    : virtual public PlaybackControl,
      virtual public PlaybackControlProxyBase,
      virtual public _AttributeExtensions... {
public:
    PlaybackControlProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~PlaybackControlProxy();

    typedef PlaybackControl InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute repeatMode.
     */
    virtual RepeatModeAttribute& getRepeatModeAttribute() {
        return delegate_->getRepeatModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute playMode.
     */
    virtual PlayModeAttribute& getPlayModeAttribute() {
        return delegate_->getPlayModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute currentTrackInfo.
     */
    virtual CurrentTrackInfoAttribute& getCurrentTrackInfoAttribute() {
        return delegate_->getCurrentTrackInfoAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute currentTrackNumber.
     */
    virtual CurrentTrackNumberAttribute& getCurrentTrackNumberAttribute() {
        return delegate_->getCurrentTrackNumberAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute totalTrackNumber.
     */
    virtual TotalTrackNumberAttribute& getTotalTrackNumberAttribute() {
        return delegate_->getTotalTrackNumberAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute videoVisible.
     */
    virtual VideoVisibleAttribute& getVideoVisibleAttribute() {
        return delegate_->getVideoVisibleAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute playStateInfo.
     */
    virtual PlayStateInfoAttribute& getPlayStateInfoAttribute() {
        return delegate_->getPlayStateInfoAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast notifiyTimePositionInfoChanged.
     */
    virtual NotifiyTimePositionInfoChangedEvent& getNotifiyTimePositionInfoChangedEvent() {
        return delegate_->getNotifiyTimePositionInfoChangedEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast responseGetPlaylist.
     */
    virtual ResponseGetPlaylistEvent& getResponseGetPlaylistEvent() {
        return delegate_->getResponseGetPlaylistEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast notifyPlaylistChanged.
     */
    virtual NotifyPlaylistChangedEvent& getNotifyPlaylistChangedEvent() {
        return delegate_->getNotifyPlaylistChangedEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast notifyPlaybackError.
     */
    virtual NotifyPlaybackErrorEvent& getNotifyPlaybackErrorEvent() {
        return delegate_->getNotifyPlaybackErrorEvent();
    }

    /**
     * Calls requestAction with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestAction(const ::v1::com::ivis::MediaManager::MediaManagerTypes::Action &_action, const uint64_t &_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestAction with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestActionAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::Action &_action, const uint64_t &_value, RequestActionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestPlay with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestPlay(const uint64_t &_indexOfplaylist, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestPlay with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestPlayAsync(const uint64_t &_indexOfplaylist, RequestPlayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestPlayBrowsingSession with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestPlayBrowsingSession(const uint64_t &_browsingSessionId, const uint64_t &_uniqueId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestPlayBrowsingSession with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestPlayBrowsingSessionAsync(const uint64_t &_browsingSessionId, const uint64_t &_uniqueId, RequestPlayBrowsingSessionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetTimePosition with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSetTimePosition(const uint32_t &_time, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetTimePosition with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSetTimePositionAsync(const uint32_t &_time, RequestSetTimePositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetPlaylist with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestGetPlaylist(const ::v1::com::ivis::MediaManager::MediaManagerTypes::ResultTypeList &_resultTypes, const uint32_t &_startIndex, const int32_t &_amount, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestGetPlaylist with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestGetPlaylistAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::ResultTypeList &_resultTypes, const uint32_t &_startIndex, const int32_t &_amount, RequestGetPlaylistAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetRepeatMode with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSetRepeatMode(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode &_mode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetRepeatMode with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSetRepeatModeAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode &_mode, RequestSetRepeatModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetPlayMode with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestSetPlayMode(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode &_mode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestSetPlayMode with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestSetPlayModeAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode &_mode, RequestSetPlayModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< PlaybackControlProxyBase> delegate_;
};

typedef PlaybackControlProxy<> PlaybackControlProxyDefault;

namespace PlaybackControlExtensions {
    template <template <typename > class _ExtensionType>
    class RepeatModeAttributeExtension {
     public:
        typedef _ExtensionType< PlaybackControlProxyBase::RepeatModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< PlaybackControlProxyBase::RepeatModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        RepeatModeAttributeExtension(PlaybackControlProxyBase& proxy): attributeExtension_(proxy.getRepeatModeAttribute()) {
        }
    
        inline extension_type& getRepeatModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PlayModeAttributeExtension {
     public:
        typedef _ExtensionType< PlaybackControlProxyBase::PlayModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< PlaybackControlProxyBase::PlayModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        PlayModeAttributeExtension(PlaybackControlProxyBase& proxy): attributeExtension_(proxy.getPlayModeAttribute()) {
        }
    
        inline extension_type& getPlayModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CurrentTrackInfoAttributeExtension {
     public:
        typedef _ExtensionType< PlaybackControlProxyBase::CurrentTrackInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< PlaybackControlProxyBase::CurrentTrackInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CurrentTrackInfoAttributeExtension(PlaybackControlProxyBase& proxy): attributeExtension_(proxy.getCurrentTrackInfoAttribute()) {
        }
    
        inline extension_type& getCurrentTrackInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CurrentTrackNumberAttributeExtension {
     public:
        typedef _ExtensionType< PlaybackControlProxyBase::CurrentTrackNumberAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< PlaybackControlProxyBase::CurrentTrackNumberAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CurrentTrackNumberAttributeExtension(PlaybackControlProxyBase& proxy): attributeExtension_(proxy.getCurrentTrackNumberAttribute()) {
        }
    
        inline extension_type& getCurrentTrackNumberAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TotalTrackNumberAttributeExtension {
     public:
        typedef _ExtensionType< PlaybackControlProxyBase::TotalTrackNumberAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< PlaybackControlProxyBase::TotalTrackNumberAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        TotalTrackNumberAttributeExtension(PlaybackControlProxyBase& proxy): attributeExtension_(proxy.getTotalTrackNumberAttribute()) {
        }
    
        inline extension_type& getTotalTrackNumberAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VideoVisibleAttributeExtension {
     public:
        typedef _ExtensionType< PlaybackControlProxyBase::VideoVisibleAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< PlaybackControlProxyBase::VideoVisibleAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        VideoVisibleAttributeExtension(PlaybackControlProxyBase& proxy): attributeExtension_(proxy.getVideoVisibleAttribute()) {
        }
    
        inline extension_type& getVideoVisibleAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PlayStateInfoAttributeExtension {
     public:
        typedef _ExtensionType< PlaybackControlProxyBase::PlayStateInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< PlaybackControlProxyBase::PlayStateInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        PlayStateInfoAttributeExtension(PlaybackControlProxyBase& proxy): attributeExtension_(proxy.getPlayStateInfoAttribute()) {
        }
    
        inline extension_type& getPlayStateInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace PlaybackControlExtensions

//
// PlaybackControlProxy Implementation
//
template <typename ... _AttributeExtensions>
PlaybackControlProxy<_AttributeExtensions...>::PlaybackControlProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< PlaybackControlProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< PlaybackControlProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
PlaybackControlProxy<_AttributeExtensions...>::~PlaybackControlProxy() {
}

template <typename ... _AttributeExtensions>
void PlaybackControlProxy<_AttributeExtensions...>::requestAction(const ::v1::com::ivis::MediaManager::MediaManagerTypes::Action &_action, const uint64_t &_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_action.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestAction(_action, _value, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlaybackControlProxy<_AttributeExtensions...>::requestActionAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::Action &_action, const uint64_t &_value, RequestActionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_action.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestActionAsync(_action, _value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void PlaybackControlProxy<_AttributeExtensions...>::requestPlay(const uint64_t &_indexOfplaylist, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestPlay(_indexOfplaylist, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlaybackControlProxy<_AttributeExtensions...>::requestPlayAsync(const uint64_t &_indexOfplaylist, RequestPlayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestPlayAsync(_indexOfplaylist, _callback, _info);
}
template <typename ... _AttributeExtensions>
void PlaybackControlProxy<_AttributeExtensions...>::requestPlayBrowsingSession(const uint64_t &_browsingSessionId, const uint64_t &_uniqueId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestPlayBrowsingSession(_browsingSessionId, _uniqueId, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlaybackControlProxy<_AttributeExtensions...>::requestPlayBrowsingSessionAsync(const uint64_t &_browsingSessionId, const uint64_t &_uniqueId, RequestPlayBrowsingSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestPlayBrowsingSessionAsync(_browsingSessionId, _uniqueId, _callback, _info);
}
template <typename ... _AttributeExtensions>
void PlaybackControlProxy<_AttributeExtensions...>::requestSetTimePosition(const uint32_t &_time, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestSetTimePosition(_time, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlaybackControlProxy<_AttributeExtensions...>::requestSetTimePositionAsync(const uint32_t &_time, RequestSetTimePositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestSetTimePositionAsync(_time, _callback, _info);
}
template <typename ... _AttributeExtensions>
void PlaybackControlProxy<_AttributeExtensions...>::requestGetPlaylist(const ::v1::com::ivis::MediaManager::MediaManagerTypes::ResultTypeList &_resultTypes, const uint32_t &_startIndex, const int32_t &_amount, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestGetPlaylist(_resultTypes, _startIndex, _amount, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlaybackControlProxy<_AttributeExtensions...>::requestGetPlaylistAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::ResultTypeList &_resultTypes, const uint32_t &_startIndex, const int32_t &_amount, RequestGetPlaylistAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestGetPlaylistAsync(_resultTypes, _startIndex, _amount, _callback, _info);
}
template <typename ... _AttributeExtensions>
void PlaybackControlProxy<_AttributeExtensions...>::requestSetRepeatMode(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode &_mode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSetRepeatMode(_mode, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlaybackControlProxy<_AttributeExtensions...>::requestSetRepeatModeAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode &_mode, RequestSetRepeatModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSetRepeatModeAsync(_mode, _callback, _info);
}
template <typename ... _AttributeExtensions>
void PlaybackControlProxy<_AttributeExtensions...>::requestSetPlayMode(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode &_mode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestSetPlayMode(_mode, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PlaybackControlProxy<_AttributeExtensions...>::requestSetPlayModeAsync(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode &_mode, RequestSetPlayModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_mode.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestSetPlayModeAsync(_mode, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &PlaybackControlProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool PlaybackControlProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool PlaybackControlProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& PlaybackControlProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& PlaybackControlProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace MediaManager
} // namespace ivis
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::com::ivis::MediaManager::PlaybackControlProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::ivis::MediaManager::PlaybackControlProxy<
            ::v1::com::ivis::MediaManager::PlaybackControlExtensions::RepeatModeAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::MediaManager::PlaybackControlExtensions::PlayModeAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::MediaManager::PlaybackControlExtensions::CurrentTrackInfoAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::MediaManager::PlaybackControlExtensions::CurrentTrackNumberAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::MediaManager::PlaybackControlExtensions::TotalTrackNumberAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::MediaManager::PlaybackControlExtensions::VideoVisibleAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::MediaManager::PlaybackControlExtensions::PlayStateInfoAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_MEDIAMANAGER_Playback_Control_PROXY_HPP_
