/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MEDIAMANAGER_Playback_Control_STUB_HPP_
#define V1_COM_IVIS_MEDIAMANAGER_Playback_Control_STUB_HPP_

#include <functional>



#include <v1/com/ivis/MediaManager/MediaManagerTypes.hpp>

#include <v1/com/ivis/MediaManager/PlaybackControl.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace MediaManager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service PlaybackControl. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class PlaybackControlStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual PlaybackControl {
 public:
    ///Notifies all remote listeners about a change of value of the attribute repeatMode.
    virtual void fireRepeatModeAttributeChanged(const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode& repeatMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute playMode.
    virtual void firePlayModeAttributeChanged(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode& playMode) = 0;
    ///Notifies all remote listeners about a change of value of the attribute currentTrackInfo.
    virtual void fireCurrentTrackInfoAttributeChanged(const ::v1::com::ivis::MediaManager::MediaManagerTypes::TrackInfo& currentTrackInfo) = 0;
    ///Notifies all remote listeners about a change of value of the attribute currentTrackNumber.
    virtual void fireCurrentTrackNumberAttributeChanged(const uint32_t& currentTrackNumber) = 0;
    ///Notifies all remote listeners about a change of value of the attribute totalTrackNumber.
    virtual void fireTotalTrackNumberAttributeChanged(const uint32_t& totalTrackNumber) = 0;
    ///Notifies all remote listeners about a change of value of the attribute videoVisible.
    virtual void fireVideoVisibleAttributeChanged(const bool& videoVisible) = 0;
    ///Notifies all remote listeners about a change of value of the attribute playStateInfo.
    virtual void firePlayStateInfoAttributeChanged(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayStateInfo& playStateInfo) = 0;

    /**
     * Sends a broadcast event for notifiyTimePositionInfoChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifiyTimePositionInfoChangedEvent(const ::v1::com::ivis::MediaManager::MediaManagerTypes::TimePositionInfo &_timePositionInfo) = 0;
    /**
     * Sends a broadcast event for responseGetPlaylist. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseGetPlaylistEvent(const uint32_t &_startIndex, const int32_t &_amount, const ::v1::com::ivis::MediaManager::MediaManagerTypes::Playlist &_playlist) = 0;
    /**
     * Sends a broadcast event for notifyPlaylistChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyPlaylistChangedEvent() = 0;
    /**
     * Sends a broadcast event for notifyPlaybackError. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyPlaybackErrorEvent(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlaybackError &_errType) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for PlaybackControl.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class PlaybackControlStubRemoteEvent
{
public:
    virtual ~PlaybackControlStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute repeatMode
    virtual bool onRemoteSetRepeatModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode _value) = 0;
    /// Action callback for remote set requests on the attribute repeatMode
    virtual void onRemoteRepeatModeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute playMode
    virtual bool onRemoteSetPlayModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode _value) = 0;
    /// Action callback for remote set requests on the attribute playMode
    virtual void onRemotePlayModeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute currentTrackInfo
    virtual bool onRemoteSetCurrentTrackInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::MediaManager::MediaManagerTypes::TrackInfo _value) = 0;
    /// Action callback for remote set requests on the attribute currentTrackInfo
    virtual void onRemoteCurrentTrackInfoAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute currentTrackNumber
    virtual bool onRemoteSetCurrentTrackNumberAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) = 0;
    /// Action callback for remote set requests on the attribute currentTrackNumber
    virtual void onRemoteCurrentTrackNumberAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute totalTrackNumber
    virtual bool onRemoteSetTotalTrackNumberAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) = 0;
    /// Action callback for remote set requests on the attribute totalTrackNumber
    virtual void onRemoteTotalTrackNumberAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute videoVisible
    virtual bool onRemoteSetVideoVisibleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute videoVisible
    virtual void onRemoteVideoVisibleAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute playStateInfo
    virtual bool onRemoteSetPlayStateInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayStateInfo _value) = 0;
    /// Action callback for remote set requests on the attribute playStateInfo
    virtual void onRemotePlayStateInfoAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service PlaybackControl to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class PlaybackControlStub
    : public virtual CommonAPI::Stub<PlaybackControlStubAdapter, PlaybackControlStubRemoteEvent>
{
public:
    typedef std::function<void ()>requestActionReply_t;
    typedef std::function<void ()>requestPlayReply_t;
    typedef std::function<void ()>requestPlayBrowsingSessionReply_t;
    typedef std::function<void ()>requestSetTimePositionReply_t;
    typedef std::function<void ()>requestGetPlaylistReply_t;
    typedef std::function<void ()>requestSetRepeatModeReply_t;
    typedef std::function<void ()>requestSetPlayModeReply_t;

    virtual ~PlaybackControlStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute repeatMode
    virtual const ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode &getRepeatModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute playMode
    virtual const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode &getPlayModeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute currentTrackInfo
    virtual const ::v1::com::ivis::MediaManager::MediaManagerTypes::TrackInfo &getCurrentTrackInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute currentTrackNumber
    virtual const uint32_t &getCurrentTrackNumberAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute totalTrackNumber
    virtual const uint32_t &getTotalTrackNumberAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute videoVisible
    virtual const bool &getVideoVisibleAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// Provides getter access to the attribute playStateInfo
    virtual const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayStateInfo &getPlayStateInfoAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// This is the method that will be called on remote calls on the method requestAction.
    virtual void requestAction(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::MediaManager::MediaManagerTypes::Action _action, uint64_t _value, requestActionReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestPlay.
    virtual void requestPlay(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _indexOfplaylist, requestPlayReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestPlayBrowsingSession.
    virtual void requestPlayBrowsingSession(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _browsingSessionId, uint64_t _uniqueId, requestPlayBrowsingSessionReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestSetTimePosition.
    virtual void requestSetTimePosition(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _time, requestSetTimePositionReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestGetPlaylist.
    virtual void requestGetPlaylist(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::MediaManager::MediaManagerTypes::ResultTypeList _resultTypes, uint32_t _startIndex, int32_t _amount, requestGetPlaylistReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestSetRepeatMode.
    virtual void requestSetRepeatMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::MediaManager::MediaManagerTypes::RepeatMode _mode, requestSetRepeatModeReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method requestSetPlayMode.
    virtual void requestSetPlayMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::MediaManager::MediaManagerTypes::PlayMode _mode, requestSetPlayModeReply_t _reply) = 0;
    /// Sends a broadcast event for notifiyTimePositionInfoChanged.
    virtual void fireNotifiyTimePositionInfoChangedEvent(const ::v1::com::ivis::MediaManager::MediaManagerTypes::TimePositionInfo &_timePositionInfo) = 0;
    /// Sends a broadcast event for responseGetPlaylist.
    virtual void fireResponseGetPlaylistEvent(const uint32_t &_startIndex, const int32_t &_amount, const ::v1::com::ivis::MediaManager::MediaManagerTypes::Playlist &_playlist) = 0;
    /// Sends a broadcast event for notifyPlaylistChanged.
    virtual void fireNotifyPlaylistChangedEvent() = 0;
    /// Sends a broadcast event for notifyPlaybackError.
    virtual void fireNotifyPlaybackErrorEvent(const ::v1::com::ivis::MediaManager::MediaManagerTypes::PlaybackError &_errType) = 0;

    using CommonAPI::Stub<PlaybackControlStubAdapter, PlaybackControlStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<PlaybackControlStubAdapter, PlaybackControlStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<PlaybackControlStubAdapter, PlaybackControlStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef PlaybackControlStubRemoteEvent RemoteEventType;
    typedef PlaybackControl StubInterface;
};

} // namespace MediaManager
} // namespace ivis
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_MEDIAMANAGER_Playback_Control_STUB_HPP_
