/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.5.v201601121433.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_CDL_CLIENT_API_REMOTE_SOMEIP_STUB_ADAPTER_HPP_
#define V1_COM_IVIS_CDL_CLIENT_API_REMOTE_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/com/ivis/CDL/ClientAPIRemoteStub.hpp>
#include <v1/com/ivis/CDL/ClientAPIRemoteSomeIPDeployment.hpp>
#include <v1/com/ivis/CDL/ClientAPIRemoteTypesSomeIPDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Config.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace CDL {

typedef CommonAPI::SomeIP::StubAdapterHelper<ClientAPIRemoteStub> ClientAPIRemoteSomeIPStubAdapterHelper;

class ClientAPIRemoteSomeIPStubAdapterInternal
    : public virtual ClientAPIRemoteStubAdapter,
      public ClientAPIRemoteSomeIPStubAdapterHelper
{
public:
    ClientAPIRemoteSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~ClientAPIRemoteSomeIPStubAdapterInternal();


    void fireNotifyDataEvent(const std::string& domain, const std::string& subDomain, const std::string& id, const ::v1::com::ivis::CDL::ClientAPIRemoteTypes::CDLData& data);


    const ClientAPIRemoteSomeIPStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::SomeIP::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();


    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::com::ivis::CDL::ClientAPIRemoteStub,
        CommonAPI::Version
    > getClientAPIRemoteInterfaceVersionStubDispatcher;


    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::ivis::CDL::ClientAPIRemoteStub,
        std::tuple<std::string, std::string, std::string, ClientAPIRemoteTypes::CDLData>,
        std::tuple<>,
        std::tuple<CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, ::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t>,
        std::tuple<>
    > storeDataStubDispatcher;

private:
    ClientAPIRemoteSomeIPStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::SomeIP::StubAttributeTable stubAttributeTable_;
};

class ClientAPIRemoteSomeIPStubAdapter
    : public ClientAPIRemoteSomeIPStubAdapterInternal,
      public std::enable_shared_from_this<ClientAPIRemoteSomeIPStubAdapter> {
public:
    ClientAPIRemoteSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub) 
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          ClientAPIRemoteSomeIPStubAdapterInternal(_address, _connection, _stub) {
    }
};

} // namespace CDL
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_CDL_Client_API_Remote_SOMEIP_STUB_ADAPTER_HPP_
