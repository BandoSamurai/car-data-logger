/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/CDL/ClientAPILocalDBusProxy.hpp>

namespace v1 {
namespace com {
namespace ivis {
namespace CDL {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createClientAPILocalDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<ClientAPILocalDBusProxy>(_address, _connection);
}

INITIALIZER(registerClientAPILocalDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		ClientAPILocal::getInterface(),
		&createClientAPILocalDBusProxy);
}

ClientAPILocalDBusProxy::ClientAPILocalDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		notifyData_(*this, "notifyData", "sss(yv)", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<ClientAPILocalTypes_::CDLDataDeployment_t*>(nullptr)))
{
}


ClientAPILocalDBusProxy::NotifyDataEvent& ClientAPILocalDBusProxy::getNotifyDataEvent() {
    return notifyData_;
}
    
    void ClientAPILocalDBusProxy::storeData(const std::string &_domain, const std::string &_subDomain, const std::string &_id, const ClientAPILocalTypes::CDLData &_data, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_domain(_domain, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_subDomain(_subDomain, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_id(_id, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPILocalTypes::CDLData, ClientAPILocalTypes_::CDLDataDeployment_t> deploy_data(_data, static_cast<ClientAPILocalTypes_::CDLDataDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<ClientAPILocalTypes::CDLData, ClientAPILocalTypes_::CDLDataDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "storeData",
        "sss(yv)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_domain, deploy_subDomain, deploy_id, deploy_data,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> ClientAPILocalDBusProxy::storeDataAsync(const std::string &_domain, const std::string &_subDomain, const std::string &_id, const ClientAPILocalTypes::CDLData &_data, StoreDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_domain(_domain, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_subDomain(_subDomain, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_id(_id, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPILocalTypes::CDLData, ClientAPILocalTypes_::CDLDataDeployment_t> deploy_data(_data, static_cast<ClientAPILocalTypes_::CDLDataDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<ClientAPILocalTypes::CDLData, ClientAPILocalTypes_::CDLDataDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "storeData",
        "sss(yv)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_domain, deploy_subDomain, deploy_id, deploy_data,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void ClientAPILocalDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace CDL
      } // namespace ivis
      } // namespace com
      } // namespace v1
