/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.5.v201601121433.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/CDL/ClientAPIRemoteSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace CDL {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createClientAPIRemoteSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared<ClientAPIRemoteSomeIPProxy>(_address, _connection);
}

INITIALIZER(registerClientAPIRemoteSomeIPProxy) {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:com.ivis.CDL.ClientAPIRemote:com.ivis.CDL.ClientAPIRemote.SomeIp",
        0x3e8, 0x44c, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         ClientAPIRemote::getInterface(),
         &createClientAPIRemoteSomeIPProxy);
}

ClientAPIRemoteSomeIPProxy::ClientAPIRemoteSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          notifyData_(*this, 0x2af8, CommonAPI::SomeIP::event_id_t(0x2b5c), false, std::make_tuple(static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr), static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr), static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr), static_cast<::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t*>(nullptr)))
    {
    }

    
    ClientAPIRemoteSomeIPProxy::NotifyDataEvent& ClientAPIRemoteSomeIPProxy::getNotifyDataEvent() {
        return notifyData_;
    }

        void ClientAPIRemoteSomeIPProxy::storeData(const std::string &_domain, const std::string &_subDomain, const std::string &_id, const ClientAPIRemoteTypes::CDLData &_data, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_domain(_domain, &::v1::com::ivis::CDL::ClientAPIRemote_::storeData_domainDeployment);
            CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_subDomain(_subDomain, &::v1::com::ivis::CDL::ClientAPIRemote_::storeData_subDomainDeployment);
            CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_id(_id, &::v1::com::ivis::CDL::ClientAPIRemote_::storeData_idDeployment);
            CommonAPI::Deployable<ClientAPIRemoteTypes::CDLData, ::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t> deploy_data(_data, static_cast<::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t*>(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        std::string, 
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        std::string, 
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        std::string, 
                        CommonAPI::SomeIP::StringDeployment
                    >,
                    CommonAPI::Deployable<
                        ClientAPIRemoteTypes::CDLData, 
                        ::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2774),
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_domain, deploy_subDomain, deploy_id, deploy_data,
    _internalCallStatus);
    }
    std::future<CommonAPI::CallStatus> ClientAPIRemoteSomeIPProxy::storeDataAsync(const std::string &_domain, const std::string &_subDomain, const std::string &_id, const ClientAPIRemoteTypes::CDLData &_data, StoreDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_domain(_domain, &::v1::com::ivis::CDL::ClientAPIRemote_::storeData_domainDeployment);
        CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_subDomain(_subDomain, &::v1::com::ivis::CDL::ClientAPIRemote_::storeData_subDomainDeployment);
        CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_id(_id, &::v1::com::ivis::CDL::ClientAPIRemote_::storeData_idDeployment);
        CommonAPI::Deployable<ClientAPIRemoteTypes::CDLData, ::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t> deploy_data(_data, static_cast<::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t*>(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    std::string, 
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    std::string, 
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    std::string, 
                    CommonAPI::SomeIP::StringDeployment
                >,
                CommonAPI::Deployable<
                    ClientAPIRemoteTypes::CDLData, 
                    ::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2774),
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_domain, deploy_subDomain, deploy_id, deploy_data,
            [_callback] (CommonAPI::CallStatus _internalCallStatus) {
            	if (_callback)
            		_callback(_internalCallStatus);
            },
            std::make_tuple());
    }
    
    
    
    void ClientAPIRemoteSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }
    
} // namespace CDL
} // namespace ivis
} // namespace com
} // namespace v1
