/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.5.v201601121433.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/CDL/ClientAPIRemoteSomeIPStubAdapter.hpp>
#include <v1/com/ivis/CDL/ClientAPIRemote.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace CDL {

std::shared_ptr<CommonAPI::SomeIP::StubAdapter> createClientAPIRemoteSomeIPStubAdapter(
                   const CommonAPI::SomeIP::Address &_address,
                   const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<ClientAPIRemoteSomeIPStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerClientAPIRemoteSomeIPStubAdapter) {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:com.ivis.CDL.ClientAPIRemote:com.ivis.CDL.ClientAPIRemote.SomeIp",
         0x3e8, 0x44c, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerStubAdapterCreateMethod(
        ClientAPIRemote::getInterface(), 
        &createClientAPIRemoteSomeIPStubAdapter);
}

ClientAPIRemoteSomeIPStubAdapterInternal::~ClientAPIRemoteSomeIPStubAdapterInternal() {
    deactivateManagedInstances();
    ClientAPIRemoteSomeIPStubAdapterHelper::deinit();
}

void ClientAPIRemoteSomeIPStubAdapterInternal::deactivateManagedInstances() {

}

CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::com::ivis::CDL::ClientAPIRemoteStub,
        CommonAPI::Version
        > ClientAPIRemoteSomeIPStubAdapterInternal::getClientAPIRemoteInterfaceVersionStubDispatcher(&ClientAPIRemoteStub::getInterfaceVersion);

CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::com::ivis::CDL::ClientAPIRemoteStub,
    std::tuple<std::string, std::string, std::string, ClientAPIRemoteTypes::CDLData>,
    std::tuple<>,
    std::tuple<CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, ::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t>,
    std::tuple<>
> ClientAPIRemoteSomeIPStubAdapterInternal::storeDataStubDispatcher(
    &ClientAPIRemoteStub::storeData, 
    std::make_tuple(&::v1::com::ivis::CDL::ClientAPIRemote_::storeData_domainDeployment, &::v1::com::ivis::CDL::ClientAPIRemote_::storeData_subDomainDeployment, &::v1::com::ivis::CDL::ClientAPIRemote_::storeData_idDeployment, static_cast<::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t*>(nullptr)),
    std::make_tuple());


void ClientAPIRemoteSomeIPStubAdapterInternal::fireNotifyDataEvent(const std::string& _domain, const std::string& _subDomain, const std::string& _id, const ::v1::com::ivis::CDL::ClientAPIRemoteTypes::CDLData& _data) {
  CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deployed_domain(_domain, static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr));
  CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deployed_subDomain(_subDomain, static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr));
  CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deployed_id(_id, static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr));
  CommonAPI::Deployable<ClientAPIRemoteTypes::CDLData, ::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t> deployed_data(_data, static_cast<::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t*>(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments< CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
    ,  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
    ,  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
    ,  CommonAPI::Deployable< ::v1::com::ivis::CDL::ClientAPIRemoteTypes::CDLData, ::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x2b5c),
             deployed_domain 
            ,  deployed_subDomain 
            ,  deployed_id 
            ,  deployed_data 
    );
}

const ClientAPIRemoteSomeIPStubAdapterHelper::StubDispatcherTable& ClientAPIRemoteSomeIPStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::SomeIP::StubAttributeTable& ClientAPIRemoteSomeIPStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}


ClientAPIRemoteSomeIPStubAdapterInternal::ClientAPIRemoteSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        ClientAPIRemoteSomeIPStubAdapterHelper(
            _address, 
            _connection,
            std::dynamic_pointer_cast<ClientAPIRemoteStub>(_stub)),
        stubDispatcherTable_({
            { { CommonAPI::SomeIP::method_id_t(0x2774) }, &com::ivis::CDL::ClientAPIRemoteSomeIPStubAdapterInternal::storeDataStubDispatcher }
        }),
        stubAttributeTable_(
        ) {
    
    // Provided events/fields
    {
        std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
        itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2af8));
        registerEvent(CommonAPI::SomeIP::event_id_t(0x2b5c), itsEventGroups, false);
    }

}

} // namespace CDL
} // namespace ivis
} // namespace com
} // namespace v1
