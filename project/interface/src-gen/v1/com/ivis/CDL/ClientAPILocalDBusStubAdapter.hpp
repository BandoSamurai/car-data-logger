/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.10.v201611111523.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_CDL_Client_API_Local_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_IVIS_CDL_Client_API_Local_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/ivis/CDL/ClientAPILocalStub.hpp>
#include "v1/com/ivis/CDL/ClientAPILocalDBusDeployment.hpp"
#include <v1/com/ivis/CDL/ClientAPILocalTypesDBusDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace CDL {

template <typename _Stub = ::v1::com::ivis::CDL::ClientAPILocalStub, typename... _Stubs>
class ClientAPILocalDBusStubAdapterInternal
    : public virtual ClientAPILocalStubAdapter,
      public CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...>
     {
public:
    typedef CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...> ClientAPILocalDBusStubAdapterHelper;

    ~ClientAPILocalDBusStubAdapterInternal() {
        deactivateManagedInstances();
        ClientAPILocalDBusStubAdapterHelper::deinit();
    }

    virtual bool hasFreedesktopProperties() {
        return false;
    }

    inline static const char* getInterface() {
        return ClientAPILocal::getInterface();
    }

    void fireNotifyDataEvent(const std::string& domain, const std::string& subDomain, const std::string& id, const ::v1::com::ivis::CDL::ClientAPILocalTypes::CDLData& data);

    void deactivateManagedInstances() {
    }

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::CDL::ClientAPILocalStub,
        CommonAPI::Version
        > getClientAPILocalInterfaceVersionStubDispatcher;

    
    static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
        ::v1::com::ivis::CDL::ClientAPILocalStub,
        std::tuple< std::string, std::string, std::string, ClientAPILocalTypes::CDLData>,
        std::tuple< >,
        std::tuple< CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, ::v1::com::ivis::CDL::ClientAPILocalTypes_::CDLDataDeployment_t>,
        std::tuple< >
    
        > storeDataStubDispatcher;


    ClientAPILocalDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
    : CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ClientAPILocalDBusStubAdapterHelper(_address, _connection, false, _stub) {
        ClientAPILocalDBusStubAdapterHelper::addStubDispatcher({ "storeData", "sss(yv)" }, &storeDataStubDispatcher);
        ClientAPILocalDBusStubAdapterHelper::addStubDispatcher({ "getInterfaceVersion", "" }, &getClientAPILocalInterfaceVersionStubDispatcher);
    }

protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const {
        static const std::string introspectionData =
            "<method name=\"getInterfaceVersion\">\n"
                "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
            "</method>\n"
            "<signal name=\"notifyData\">\n"
            "<arg name=\"domain\" type=\"s\" />\n"
            "<arg name=\"subDomain\" type=\"s\" />\n"
            "<arg name=\"id\" type=\"s\" />\n"
            "<arg name=\"data\" type=\"(yv)\" />\n"
            "</signal>\n"
            "<method name=\"storeData\">\n"
            "<arg name=\"_domain\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_subDomain\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_id\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_data\" type=\"(yv)\" direction=\"in\" />\n"
            "</method>\n"
            ;
        return introspectionData.c_str();
    }

private:
};


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
    ::v1::com::ivis::CDL::ClientAPILocalStub,
    CommonAPI::Version
    > ClientAPILocalDBusStubAdapterInternal<_Stub, _Stubs...>::getClientAPILocalInterfaceVersionStubDispatcher(&ClientAPILocalStub::getInterfaceVersion, "uu");


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::ivis::CDL::ClientAPILocalStub,
    std::tuple< std::string, std::string, std::string, ClientAPILocalTypes::CDLData>,
    std::tuple< >,
    std::tuple< CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, ::v1::com::ivis::CDL::ClientAPILocalTypes_::CDLDataDeployment_t>,
    std::tuple< >

    > ClientAPILocalDBusStubAdapterInternal<_Stub, _Stubs...>::storeDataStubDispatcher(
    &ClientAPILocalStub::storeData, "",
    std::make_tuple(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr), static_cast< CommonAPI::DBus::StringDeployment* >(nullptr), static_cast< CommonAPI::DBus::StringDeployment* >(nullptr), static_cast< ::v1::com::ivis::CDL::ClientAPILocalTypes_::CDLDataDeployment_t* >(nullptr)),
    std::make_tuple());

template <typename _Stub, typename... _Stubs>
void ClientAPILocalDBusStubAdapterInternal<_Stub, _Stubs...>::fireNotifyDataEvent(const std::string& domain, const std::string& subDomain, const std::string& id, const ::v1::com::ivis::CDL::ClientAPILocalTypes::CDLData& data) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable< ::v1::com::ivis::CDL::ClientAPILocalTypes::CDLData, ::v1::com::ivis::CDL::ClientAPILocalTypes_::CDLDataDeployment_t>
    >>::sendSignal(
            *this,
            "notifyData",
            "sss(yv)",
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment>(domain, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr)),
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment>(subDomain, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr)),
    CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment>(id, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr)),
    CommonAPI::Deployable< ::v1::com::ivis::CDL::ClientAPILocalTypes::CDLData, ::v1::com::ivis::CDL::ClientAPILocalTypes_::CDLDataDeployment_t>(data, static_cast< ::v1::com::ivis::CDL::ClientAPILocalTypes_::CDLDataDeployment_t* >(nullptr))
    );
}


template <typename _Stub = ::v1::com::ivis::CDL::ClientAPILocalStub, typename... _Stubs>
class ClientAPILocalDBusStubAdapter
    : public ClientAPILocalDBusStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< ClientAPILocalDBusStubAdapter<_Stub, _Stubs...>> {
public:
    ClientAPILocalDBusStubAdapter(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
        : CommonAPI::DBus::DBusStubAdapter(
            _address,
            _connection,
            false),
          ClientAPILocalDBusStubAdapterInternal<_Stub, _Stubs...>(
            _address,
            _connection,
            _stub) {
    }
};

} // namespace CDL
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_CDL_Client_API_Local_DBUS_STUB_ADAPTER_HPP_
