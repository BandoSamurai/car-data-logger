/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/CDL/ClientAPILocal.hpp>
#include <v1/com/ivis/CDL/ClientAPILocalDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace ivis {
namespace CDL {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createClientAPILocalDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<ClientAPILocalDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerClientAPILocalDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	ClientAPILocal::getInterface(), &createClientAPILocalDBusStubAdapter);
}

ClientAPILocalDBusStubAdapterInternal::~ClientAPILocalDBusStubAdapterInternal() {
    deactivateManagedInstances();
    ClientAPILocalDBusStubAdapterHelper::deinit();
}

void ClientAPILocalDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* ClientAPILocalDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"notifyData\">\n"
            "<arg name=\"domain\" type=\"s\" />\n"
            "<arg name=\"subDomain\" type=\"s\" />\n"
            "<arg name=\"id\" type=\"s\" />\n"
            "<arg name=\"data\" type=\"(yv)\" />\n"
        "</signal>\n"
        "<method name=\"storeData\">\n"
            "<arg name=\"_domain\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_subDomain\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_id\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_data\" type=\"(yv)\" direction=\"in\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::CDL::ClientAPILocalStub,
        CommonAPI::Version
        > ClientAPILocalDBusStubAdapterInternal::getClientAPILocalInterfaceVersionStubDispatcher(&ClientAPILocalStub::getInterfaceVersion, "uu");




CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::ivis::CDL::ClientAPILocalStub,
    std::tuple<std::string, std::string, std::string, ClientAPILocalTypes::CDLData>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, ClientAPILocalTypes_::CDLDataDeployment_t>,
    std::tuple<>
    
    > ClientAPILocalDBusStubAdapterInternal::storeDataStubDispatcher(
    &ClientAPILocalStub::storeData, "",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<ClientAPILocalTypes_::CDLDataDeployment_t*>(nullptr)),
                	std::make_tuple());



void ClientAPILocalDBusStubAdapterInternal::fireNotifyDataEvent(const std::string& domain, const std::string& subDomain, const std::string& id, const ::v1::com::ivis::CDL::ClientAPILocalTypes::CDLData& data) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
    CommonAPI::Deployable<::v1::com::ivis::CDL::ClientAPILocalTypes::CDLData, ClientAPILocalTypes_::CDLDataDeployment_t>
    >>::sendSignal(
            *this,
            "notifyData",
            "sss(yv)",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(domain, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(subDomain, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(id, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
    CommonAPI::Deployable<::v1::com::ivis::CDL::ClientAPILocalTypes::CDLData, ClientAPILocalTypes_::CDLDataDeployment_t>(data, static_cast<ClientAPILocalTypes_::CDLDataDeployment_t*>(nullptr))
    );
}


const ClientAPILocalDBusStubAdapterHelper::StubDispatcherTable& ClientAPILocalDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& ClientAPILocalDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

ClientAPILocalDBusStubAdapterInternal::ClientAPILocalDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ClientAPILocalDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<ClientAPILocalStub>(_stub), false),
      stubDispatcherTable_({
            { { "storeData", "sss(yv)" }, &com::ivis::CDL::ClientAPILocalDBusStubAdapterInternal::storeDataStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::ivis::CDL::ClientAPILocalDBusStubAdapterInternal::getClientAPILocalInterfaceVersionStubDispatcher });
}

bool ClientAPILocalDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace CDL
} // namespace ivis
} // namespace com
} // namespace v1
