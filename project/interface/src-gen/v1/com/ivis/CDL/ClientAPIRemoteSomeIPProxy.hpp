/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.10.v201610310807.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_CDL_CLIENT_API_REMOTE_SOMEIP_PROXY_HPP_
#define V1_COM_IVIS_CDL_CLIENT_API_REMOTE_SOMEIP_PROXY_HPP_

#include <v1/com/ivis/CDL/ClientAPIRemoteProxyBase.hpp>
#include <v1/com/ivis/CDL/ClientAPIRemoteSomeIPDeployment.hpp>
#include <v1/com/ivis/CDL/ClientAPIRemoteTypesSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Event.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif

#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif

namespace v1 {
namespace com {
namespace ivis {
namespace CDL {

class ClientAPIRemoteSomeIPProxy
    : virtual public ClientAPIRemoteProxyBase,
    virtual public CommonAPI::SomeIP::Proxy {
public:
    ClientAPIRemoteSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~ClientAPIRemoteSomeIPProxy() { }


    virtual NotifyDataEvent& getNotifyDataEvent();

    virtual void storeData(const std::string &_domain, const std::string &_subDomain, const std::string &_id, const ClientAPIRemoteTypes::CDLData &_data, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> storeDataAsync(const std::string &_domain, const std::string &_subDomain, const std::string &_id, const ClientAPIRemoteTypes::CDLData &_data, StoreDataAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

private:


     CommonAPI::SomeIP::Event<NotifyDataEvent, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment >, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment >, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment >, CommonAPI::Deployable< ::v1::com::ivis::CDL::ClientAPIRemoteTypes::CDLData, ::v1::com::ivis::CDL::ClientAPIRemoteTypes_::CDLDataDeployment_t >> notifyData_;

};

} // namespace CDL
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_CDL_Client_API_Remote_SOMEIP_PROXY_HPP_
