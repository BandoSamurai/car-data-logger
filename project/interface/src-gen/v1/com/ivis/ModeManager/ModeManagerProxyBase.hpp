/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.10.v201611111521.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MODEMANAGER_Mode_Manager_PROXY_BASE_HPP_
#define V1_COM_IVIS_MODEMANAGER_Mode_Manager_PROXY_BASE_HPP_

#include <v1/com/ivis/ModeManager/ModeManager.hpp>


#include <v1/com/ivis/ModeManager/ModeManagerTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace ModeManager {

class ModeManagerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo> ActiveApplicationAttribute;
    typedef CommonAPI::Event<
        ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult, ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester
    > ResponseChangeApplicationEvent;
    typedef CommonAPI::Event<
        ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester
    > ActiveApplicationChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> RequestChangeApplicationAsyncCallback;

    virtual ActiveApplicationAttribute& getActiveApplicationAttribute() = 0;

    virtual ResponseChangeApplicationEvent& getResponseChangeApplicationEvent() = 0;
    virtual ActiveApplicationChangedEvent& getActiveApplicationChangedEvent() = 0;

    virtual void requestChangeApplication(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType &_app, const ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType &_subApp, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestChangeApplicationAsync(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType &_app, const ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType &_subApp, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester, RequestChangeApplicationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace ModeManager
} // namespace ivis
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_MODEMANAGER_Mode_Manager_PROXY_BASE_HPP_
