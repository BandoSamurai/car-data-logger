/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MODEMANAGER_Mode_Manager_PROXY_HPP_
#define V1_COM_IVIS_MODEMANAGER_Mode_Manager_PROXY_HPP_

#include <v1/com/ivis/ModeManager/ModeManagerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace ModeManager {

template <typename ... _AttributeExtensions>
class ModeManagerProxy
    : virtual public ModeManager, 
      virtual public ModeManagerProxyBase,
      virtual public _AttributeExtensions... {
public:
    ModeManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ModeManagerProxy();

    typedef ModeManager InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute activeApplication.
     */
    virtual ActiveApplicationAttribute& getActiveApplicationAttribute() {
        return delegate_->getActiveApplicationAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast responseChangeApplication.
     */
    virtual ResponseChangeApplicationEvent& getResponseChangeApplicationEvent() {
        return delegate_->getResponseChangeApplicationEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast activeApplicationChanged.
     */
    virtual ActiveApplicationChangedEvent& getActiveApplicationChangedEvent() {
        return delegate_->getActiveApplicationChangedEvent();
    }

    /**
     * Calls requestChangeApplication with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestChangeApplication(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType &_app, const ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType &_subApp, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestChangeApplication with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestChangeApplicationAsync(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType &_app, const ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType &_subApp, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester, RequestChangeApplicationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ModeManagerProxyBase> delegate_;
};

typedef ModeManagerProxy<> ModeManagerProxyDefault;

namespace ModeManagerExtensions {
    template <template <typename > class _ExtensionType>
    class ActiveApplicationAttributeExtension {
     public:
        typedef _ExtensionType<ModeManagerProxyBase::ActiveApplicationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<ModeManagerProxyBase::ActiveApplicationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ActiveApplicationAttributeExtension() {}
    #endif
    
        ActiveApplicationAttributeExtension(ModeManagerProxyBase& proxy): attributeExtension_(proxy.getActiveApplicationAttribute()) {
        }
    
        inline extension_type& getActiveApplicationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace ModeManagerExtensions

//
// ModeManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
ModeManagerProxy<_AttributeExtensions...>::ModeManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<ModeManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<ModeManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ModeManagerProxy<_AttributeExtensions...>::~ModeManagerProxy() {
}

template <typename ... _AttributeExtensions>
void ModeManagerProxy<_AttributeExtensions...>::requestChangeApplication(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType &_app, const ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType &_subApp, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_app.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_subApp.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_requester.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestChangeApplication(_app, _subApp, _requester, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ModeManagerProxy<_AttributeExtensions...>::requestChangeApplicationAsync(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType &_app, const ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType &_subApp, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester, RequestChangeApplicationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_app.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_subApp.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_requester.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestChangeApplicationAsync(_app, _subApp, _requester, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &ModeManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ModeManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ModeManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ModeManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ModeManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ModeManager
} // namespace ivis
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::ivis::ModeManager::ModeManagerProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::ivis::ModeManager::ModeManagerProxy<
            ::v1::com::ivis::ModeManager::ModeManagerExtensions::ActiveApplicationAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_MODEMANAGER_Mode_Manager_PROXY_HPP_
