/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/ModeManager/ModeManagerStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace com {
namespace ivis {
namespace ModeManager {

ModeManagerStubDefault::ModeManagerStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(ModeManager::getInterfaceVersion()) {
}

const CommonAPI::Version& ModeManagerStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

ModeManagerStubRemoteEvent* ModeManagerStubDefault::initStubAdapter(const std::shared_ptr<ModeManagerStubAdapter> &_adapter) {
    CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& ModeManagerStubDefault::getActiveApplicationAttribute() {
    return activeApplicationAttributeValue_;
}

const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& ModeManagerStubDefault::getActiveApplicationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getActiveApplicationAttribute();
}

void ModeManagerStubDefault::setActiveApplicationAttribute(::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo _value) {
    const bool valueChanged = trySetActiveApplicationAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireActiveApplicationAttributeChanged(activeApplicationAttributeValue_);
    }
}

bool ModeManagerStubDefault::trySetActiveApplicationAttribute(::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo _value) {
    if (!validateActiveApplicationAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (activeApplicationAttributeValue_ != _value);
    activeApplicationAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool ModeManagerStubDefault::validateActiveApplicationAttributeRequestedValue(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_value) {
    (void)_value;
	return true;
}

void ModeManagerStubDefault::setActiveApplicationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo _value) {
    (void)_client;
    setActiveApplicationAttribute(_value);
}

void ModeManagerStubDefault::onRemoteActiveApplicationAttributeChanged() {
    // No operation in default
}

void ModeManagerStubDefault::RemoteEventHandler::onRemoteActiveApplicationAttributeChanged() {
	assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteActiveApplicationAttributeChanged();
}

bool ModeManagerStubDefault::RemoteEventHandler::onRemoteSetActiveApplicationAttribute(::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo _value) {
	assert(defaultStub_ !=NULL);
    return defaultStub_->trySetActiveApplicationAttribute(std::move(_value));
}

bool ModeManagerStubDefault::RemoteEventHandler::onRemoteSetActiveApplicationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo _value) {
    (void)_client;
    return onRemoteSetActiveApplicationAttribute(_value);
}


void ModeManagerStubDefault::requestChangeApplication(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType _app, ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType _subApp, ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester _requester, requestChangeApplicationReply_t _reply) {
    (void)_client;
    (void) _app;
    (void) _subApp;
    (void) _requester;
    _reply();
}


void ModeManagerStubDefault::fireResponseChangeApplicationEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult &_result, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_currentAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_requestAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester) {
    if (!_result.validate()) {
        return;
    }
    if (!_requester.validate()) {
        return;
    }
    assert((CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireResponseChangeApplicationEvent(_result, _currentAppInfo, _requestAppInfo, _requester);
}
void ModeManagerStubDefault::fireActiveApplicationChangedEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_appInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester) {
    if (!_requester.validate()) {
        return;
    }
    assert((CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireActiveApplicationChangedEvent(_appInfo, _requester);
}


ModeManagerStubDefault::RemoteEventHandler::RemoteEventHandler(ModeManagerStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace ModeManager
} // namespace ivis
} // namespace com
} // namespace v1
