/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MODEMANAGER_Mode_Manager_STUB_HPP_
#define V1_COM_IVIS_MODEMANAGER_Mode_Manager_STUB_HPP_

#include <functional>



#include <v1/com/ivis/ModeManager/ModeManagerTypes.hpp>

#include <v1/com/ivis/ModeManager/ModeManager.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace ModeManager {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ModeManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ModeManagerStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual ModeManager {
 public:
    ///Notifies all remote listeners about a change of value of the attribute activeApplication.
    virtual void fireActiveApplicationAttributeChanged(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& activeApplication) = 0;

    /**
     * Sends a broadcast event for responseChangeApplication. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireResponseChangeApplicationEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult &_result, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_currentAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_requestAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester) = 0;
    /**
     * Sends a broadcast event for activeApplicationChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireActiveApplicationChangedEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_appInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ModeManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ModeManagerStubRemoteEvent
{
public:
    virtual ~ModeManagerStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute activeApplication
    virtual bool onRemoteSetActiveApplicationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo _value) = 0;
    /// Action callback for remote set requests on the attribute activeApplication
    virtual void onRemoteActiveApplicationAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ModeManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ModeManagerStub
    : public virtual CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>
{
public:
    typedef std::function<void ()>requestChangeApplicationReply_t;

    virtual ~ModeManagerStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /// Provides getter access to the attribute activeApplication
    virtual const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &getActiveApplicationAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// This is the method that will be called on remote calls on the method requestChangeApplication.
    virtual void requestChangeApplication(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType _app, ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType _subApp, ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester _requester, requestChangeApplicationReply_t _reply) = 0;
    /// Sends a broadcast event for responseChangeApplication.
    virtual void fireResponseChangeApplicationEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult &_result, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_currentAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_requestAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester) = 0;
    /// Sends a broadcast event for activeApplicationChanged.
    virtual void fireActiveApplicationChangedEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo &_appInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester &_requester) = 0;

    using CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ModeManagerStubAdapter, ModeManagerStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ModeManagerStubRemoteEvent RemoteEventType;
    typedef ModeManager StubInterface;
};

} // namespace ModeManager
} // namespace ivis
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_MODEMANAGER_Mode_Manager_STUB_HPP_
