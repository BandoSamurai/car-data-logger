/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MODEMANAGER_Mode_Manager_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_IVIS_MODEMANAGER_Mode_Manager_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/ivis/ModeManager/ModeManagerStub.hpp>
#include "v1/com/ivis/ModeManager/ModeManagerDBusDeployment.hpp"        
#include <v1/com/ivis/ModeManager/ModeManagerTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace ModeManager {

typedef CommonAPI::DBus::DBusStubAdapterHelper<ModeManagerStub> ModeManagerDBusStubAdapterHelper;

class ModeManagerDBusStubAdapterInternal
    : public virtual ModeManagerStubAdapter,
      public ModeManagerDBusStubAdapterHelper
{
public:
    ModeManagerDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~ModeManagerDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return ModeManager::getInterface();
    }

    void fireActiveApplicationAttributeChanged(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& value);

    void fireResponseChangeApplicationEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult& result, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& currentAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& requestAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester& requester);
    void fireActiveApplicationChangedEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& appInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester& requester);


    const ModeManagerDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        CommonAPI::Version
        > getModeManagerInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
        ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t                
        > getActiveApplicationAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
        ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t                    
        > setActiveApplicationAttributeStubDispatcher;



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::ivis::ModeManager::ModeManagerStub,
    std::tuple<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType, ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType, ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > requestChangeApplicationStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    ModeManagerDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class ModeManagerDBusStubAdapter
    : public ModeManagerDBusStubAdapterInternal,
      public std::enable_shared_from_this<ModeManagerDBusStubAdapter> {
public:
    ModeManagerDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          ModeManagerDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace ModeManager
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_MODEMANAGER_Mode_Manager_DBUS_STUB_ADAPTER_HPP_
