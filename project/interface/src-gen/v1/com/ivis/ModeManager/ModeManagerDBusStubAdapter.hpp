/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.10.v201611111523.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MODEMANAGER_Mode_Manager_DBUS_STUB_ADAPTER_HPP_
#define V1_COM_IVIS_MODEMANAGER_Mode_Manager_DBUS_STUB_ADAPTER_HPP_

#include <v1/com/ivis/ModeManager/ModeManagerStub.hpp>
#include "v1/com/ivis/ModeManager/ModeManagerDBusDeployment.hpp"
#include <v1/com/ivis/ModeManager/ModeManagerTypesDBusDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace ModeManager {

template <typename _Stub = ::v1::com::ivis::ModeManager::ModeManagerStub, typename... _Stubs>
class ModeManagerDBusStubAdapterInternal
    : public virtual ModeManagerStubAdapter,
      public CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...>
     {
public:
    typedef CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...> ModeManagerDBusStubAdapterHelper;

    ~ModeManagerDBusStubAdapterInternal() {
        deactivateManagedInstances();
        ModeManagerDBusStubAdapterHelper::deinit();
    }

    virtual bool hasFreedesktopProperties() {
        return false;
    }

    inline static const char* getInterface() {
        return ModeManager::getInterface();
    }

    void fireActiveApplicationAttributeChanged(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& value);

    void fireResponseChangeApplicationEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult& result, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& currentAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& requestAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester& requester);

    void fireActiveApplicationChangedEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& appInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester& requester);

    void deactivateManagedInstances() {
    }

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        CommonAPI::Version
        > getModeManagerInterfaceVersionStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v1::com::ivis::ModeManager::ModeManagerStub,
            ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
            ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t
            > getActiveApplicationAttributeStubDispatcher;
    static CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
            ::v1::com::ivis::ModeManager::ModeManagerStub,
            ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
            ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t
            > setActiveApplicationAttributeStubDispatcher;

    
    static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        std::tuple< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType, ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType, ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester>,
        std::tuple< >,
        std::tuple< CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
        std::tuple< >
    
        > requestChangeApplicationStubDispatcher;



    ModeManagerDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
    : CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ModeManagerDBusStubAdapterHelper(_address, _connection, false, _stub) {
        ModeManagerDBusStubAdapterHelper::addStubDispatcher({ "getActiveApplicationAttribute", "" }, &getActiveApplicationAttributeStubDispatcher);
        ModeManagerDBusStubAdapterHelper::addStubDispatcher({ "setActiveApplicationAttribute", "(tiii)" }, &setActiveApplicationAttributeStubDispatcher);
        ModeManagerDBusStubAdapterHelper::addStubDispatcher({ "requestChangeApplication", "iii" }, &requestChangeApplicationStubDispatcher);
        ModeManagerDBusStubAdapterHelper::addStubDispatcher({ "getInterfaceVersion", "" }, &getModeManagerInterfaceVersionStubDispatcher);
    }

protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const {
        static const std::string introspectionData =
            "<method name=\"getInterfaceVersion\">\n"
                "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"getActiveApplicationAttribute\">\n"
            "<arg name=\"value\" type=\"(tiii)\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"setActiveApplicationAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"(tiii)\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"(tiii)\" direction=\"out\" />\n"
            "</method>\n"
            "<signal name=\"onActiveApplicationAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(tiii)\" />\n"
            "</signal>\n"
            "<signal name=\"responseChangeApplication\">\n"
            "<arg name=\"result\" type=\"i\" />\n"
            "<arg name=\"currentAppInfo\" type=\"(tiii)\" />\n"
            "<arg name=\"requestAppInfo\" type=\"(tiii)\" />\n"
            "<arg name=\"requester\" type=\"i\" />\n"
            "</signal>\n"
            "<signal name=\"activeApplicationChanged\">\n"
            "<arg name=\"appInfo\" type=\"(tiii)\" />\n"
            "<arg name=\"requester\" type=\"i\" />\n"
            "</signal>\n"
            "<method name=\"requestChangeApplication\">\n"
            "<arg name=\"_app\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_subApp\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_requester\" type=\"i\" direction=\"in\" />\n"
            "</method>\n"
            ;
        return introspectionData.c_str();
    }

private:
};


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
    ::v1::com::ivis::ModeManager::ModeManagerStub,
    CommonAPI::Version
    > ModeManagerDBusStubAdapterInternal<_Stub, _Stubs...>::getModeManagerInterfaceVersionStubDispatcher(&ModeManagerStub::getInterfaceVersion, "uu");

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
        ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t
        > ModeManagerDBusStubAdapterInternal<_Stub, _Stubs...>::getActiveApplicationAttributeStubDispatcher(
            &::v1::com::ivis::ModeManager::ModeManagerStub::getActiveApplicationAttribute
            , "(tiii)"
            );
template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
        ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t
        > ModeManagerDBusStubAdapterInternal<_Stub, _Stubs...>::setActiveApplicationAttributeStubDispatcher(
                &::v1::com::ivis::ModeManager::ModeManagerStub::getActiveApplicationAttribute,
                &ModeManagerStubRemoteEvent::onRemoteSetActiveApplicationAttribute,
                &ModeManagerStubRemoteEvent::onRemoteActiveApplicationAttributeChanged
                ,&ModeManagerStubAdapter::fireActiveApplicationAttributeChanged
                ,"(tiii)"
                );


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::ivis::ModeManager::ModeManagerStub,
    std::tuple< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType, ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType, ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester>,
    std::tuple< >,
    std::tuple< CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple< >

    > ModeManagerDBusStubAdapterInternal<_Stub, _Stubs...>::requestChangeApplicationStubDispatcher(
    &ModeManagerStub::requestChangeApplication, "",
    std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
    std::make_tuple());

template <typename _Stub, typename... _Stubs>
void ModeManagerDBusStubAdapterInternal<_Stub, _Stubs...>::fireActiveApplicationAttributeChanged(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& value) {
    CommonAPI::Deployable< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t> deployedValue(value, static_cast< ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t* >(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
        ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onActiveApplicationAttributeChanged",
            "(tiii)",
            deployedValue
    
    );
}

template <typename _Stub, typename... _Stubs>
void ModeManagerDBusStubAdapterInternal<_Stub, _Stubs...>::fireResponseChangeApplicationEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult& result, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& currentAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& requestAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester& requester) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult,
    CommonAPI::Deployable< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>,
    CommonAPI::Deployable< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>,
    ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester
    >>::sendSignal(
            *this,
            "responseChangeApplication",
            "i(tiii)(tiii)i",
    result,
    CommonAPI::Deployable< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>(currentAppInfo, static_cast< ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t* >(nullptr)),
    CommonAPI::Deployable< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>(requestAppInfo, static_cast< ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t* >(nullptr)),
    requester
    );
}

template <typename _Stub, typename... _Stubs>
void ModeManagerDBusStubAdapterInternal<_Stub, _Stubs...>::fireActiveApplicationChangedEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& appInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester& requester) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>,
    ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester
    >>::sendSignal(
            *this,
            "activeApplicationChanged",
            "(tiii)i",
    CommonAPI::Deployable< ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>(appInfo, static_cast< ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t* >(nullptr)),
    requester
    );
}


template <typename _Stub = ::v1::com::ivis::ModeManager::ModeManagerStub, typename... _Stubs>
class ModeManagerDBusStubAdapter
    : public ModeManagerDBusStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< ModeManagerDBusStubAdapter<_Stub, _Stubs...>> {
public:
    ModeManagerDBusStubAdapter(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
        : CommonAPI::DBus::DBusStubAdapter(
            _address,
            _connection,
            false),
          ModeManagerDBusStubAdapterInternal<_Stub, _Stubs...>(
            _address,
            _connection,
            _stub) {
    }
};

} // namespace ModeManager
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_MODEMANAGER_Mode_Manager_DBUS_STUB_ADAPTER_HPP_
