/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_MODEMANAGER_Mode_Manager_Types_HPP_
#define V1_COM_IVIS_MODEMANAGER_Mode_Manager_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace ModeManager {

struct ModeManagerTypes {
    
    struct DeviceType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            USB = 0,
            IPOD = 1,
            BLUETOOTH = 2,
            AUX = 3
        };
        
        DeviceType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::USB)) {}
        DeviceType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::USB):
                case static_cast<int32_t>(Literal::IPOD):
                case static_cast<int32_t>(Literal::BLUETOOTH):
                case static_cast<int32_t>(Literal::AUX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DeviceType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DeviceType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DeviceType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DeviceType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DeviceType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DeviceType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ApplicationType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            APP_NONE = 0,
            APP_FM = 1,
            APP_AM = 2,
            APP_USB = 3,
            APP_IPOD = 4,
            APP_BLUETOOTH = 5,
            APP_AUX = 6
        };
        
        ApplicationType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::APP_NONE)) {}
        ApplicationType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::APP_NONE):
                case static_cast<int32_t>(Literal::APP_FM):
                case static_cast<int32_t>(Literal::APP_AM):
                case static_cast<int32_t>(Literal::APP_USB):
                case static_cast<int32_t>(Literal::APP_IPOD):
                case static_cast<int32_t>(Literal::APP_BLUETOOTH):
                case static_cast<int32_t>(Literal::APP_AUX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ApplicationType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ApplicationType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ApplicationType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ApplicationType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ApplicationType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ApplicationType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SubApplicationType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SUB_APP_NONE = 0,
            SUB_APP_AUDIO = 1,
            SUB_APP_VIDEO = 2
        };
        
        SubApplicationType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SUB_APP_NONE)) {}
        SubApplicationType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SUB_APP_NONE):
                case static_cast<int32_t>(Literal::SUB_APP_AUDIO):
                case static_cast<int32_t>(Literal::SUB_APP_VIDEO):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SubApplicationType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SubApplicationType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SubApplicationType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SubApplicationType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SubApplicationType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SubApplicationType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct ApplicationInfo : CommonAPI::Struct<uint64_t, DeviceType, ApplicationType, SubApplicationType> {
    	
    	ApplicationInfo() {
    	}
    	ApplicationInfo(const uint64_t &_deviceId, const DeviceType &_deviceType, const ApplicationType &_app, const SubApplicationType &_subApp)
    	{
    		std::get<0>(values_) = _deviceId;
    		std::get<1>(values_) = _deviceType;
    		std::get<2>(values_) = _app;
    		std::get<3>(values_) = _subApp;
    	}
    	inline const uint64_t &getDeviceId() const { return std::get<0>(values_); }
    	inline void setDeviceId(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const DeviceType &getDeviceType() const { return std::get<1>(values_); }
    	inline void setDeviceType(const DeviceType &_value) { std::get<1>(values_) = _value; }
    	inline const ApplicationType &getApp() const { return std::get<2>(values_); }
    	inline void setApp(const ApplicationType &_value) { std::get<2>(values_) = _value; }
    	inline const SubApplicationType &getSubApp() const { return std::get<3>(values_); }
    	inline void setSubApp(const SubApplicationType &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const ApplicationInfo& _other) const {
                return (getDeviceId() == _other.getDeviceId() && getDeviceType() == _other.getDeviceType() && getApp() == _other.getApp() && getSubApp() == _other.getSubApp());
        }
    	inline bool operator!=(const ApplicationInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct AppChangeRequester : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            BY_HMI = 1,
            AUTOMATIC = 2
        };
        
        AppChangeRequester() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        AppChangeRequester(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::BY_HMI):
                case static_cast<int32_t>(Literal::AUTOMATIC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AppChangeRequester &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AppChangeRequester &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AppChangeRequester &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AppChangeRequester &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AppChangeRequester &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AppChangeRequester &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AppChangeResult : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            RESULT_OK = 0,
            RESULT_FAIL = 1
        };
        
        AppChangeResult() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::RESULT_OK)) {}
        AppChangeResult(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::RESULT_OK):
                case static_cast<int32_t>(Literal::RESULT_FAIL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AppChangeResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AppChangeResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AppChangeResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AppChangeResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AppChangeResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AppChangeResult &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.ivis.ModeManager.ModeManagerTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct ModeManagerTypes

} // namespace ModeManager
} // namespace ivis
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for DeviceType
    template<>
    struct hash<::v1::com::ivis::ModeManager::ModeManagerTypes::DeviceType> {
        inline size_t operator()(const ::v1::com::ivis::ModeManager::ModeManagerTypes::DeviceType& deviceType) const {
            return static_cast<int32_t>(deviceType);
        }
    };
    //Hash for ApplicationType
    template<>
    struct hash<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType> {
        inline size_t operator()(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType& applicationType) const {
            return static_cast<int32_t>(applicationType);
        }
    };
    //Hash for SubApplicationType
    template<>
    struct hash<::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType> {
        inline size_t operator()(const ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType& subApplicationType) const {
            return static_cast<int32_t>(subApplicationType);
        }
    };
    //Hash for AppChangeRequester
    template<>
    struct hash<::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester> {
        inline size_t operator()(const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester& appChangeRequester) const {
            return static_cast<int32_t>(appChangeRequester);
        }
    };
    //Hash for AppChangeResult
    template<>
    struct hash<::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult> {
        inline size_t operator()(const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult& appChangeResult) const {
            return static_cast<int32_t>(appChangeResult);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_MODEMANAGER_Mode_Manager_Types_HPP_
