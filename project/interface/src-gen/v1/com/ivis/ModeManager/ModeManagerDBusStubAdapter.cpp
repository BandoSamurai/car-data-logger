/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/ModeManager/ModeManager.hpp>
#include <v1/com/ivis/ModeManager/ModeManagerDBusStubAdapter.hpp>

namespace v1 {
namespace com {
namespace ivis {
namespace ModeManager {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createModeManagerDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<ModeManagerDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerModeManagerDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	ModeManager::getInterface(), &createModeManagerDBusStubAdapter);
}

ModeManagerDBusStubAdapterInternal::~ModeManagerDBusStubAdapterInternal() {
    deactivateManagedInstances();
    ModeManagerDBusStubAdapterHelper::deinit();
}

void ModeManagerDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* ModeManagerDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getActiveApplicationAttribute\">\n"
            "<arg name=\"value\" type=\"(tiii)\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"setActiveApplicationAttribute\">\n"
            "<arg name=\"requestedValue\" type=\"(tiii)\" direction=\"in\" />\n"
            "<arg name=\"setValue\" type=\"(tiii)\" direction=\"out\" />\n"
        "</method>\n"
        "<signal name=\"onActiveApplicationAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"(tiii)\" />\n"
        "</signal>\n"
        "<signal name=\"responseChangeApplication\">\n"
            "<arg name=\"result\" type=\"i\" />\n"
            "<arg name=\"currentAppInfo\" type=\"(tiii)\" />\n"
            "<arg name=\"requestAppInfo\" type=\"(tiii)\" />\n"
            "<arg name=\"requester\" type=\"i\" />\n"
        "</signal>\n"
        "<signal name=\"activeApplicationChanged\">\n"
            "<arg name=\"appInfo\" type=\"(tiii)\" />\n"
            "<arg name=\"requester\" type=\"i\" />\n"
        "</signal>\n"
        "<method name=\"requestChangeApplication\">\n"
            "<arg name=\"_app\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_subApp\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_requester\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        CommonAPI::Version
        > ModeManagerDBusStubAdapterInternal::getModeManagerInterfaceVersionStubDispatcher(&ModeManagerStub::getInterfaceVersion, "uu");

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
        ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t
        > ModeManagerDBusStubAdapterInternal::getActiveApplicationAttributeStubDispatcher(
            &::v1::com::ivis::ModeManager::ModeManagerStub::getActiveApplicationAttribute
            , "(tiii)"
            );
CommonAPI::DBus::DBusSetObservableAttributeStubDispatcher<
        ::v1::com::ivis::ModeManager::ModeManagerStub,
        ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
        ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t
        > ModeManagerDBusStubAdapterInternal::setActiveApplicationAttributeStubDispatcher(
                &::v1::com::ivis::ModeManager::ModeManagerStub::getActiveApplicationAttribute,
                &ModeManagerStubRemoteEvent::onRemoteSetActiveApplicationAttribute,
                &ModeManagerStubRemoteEvent::onRemoteActiveApplicationAttributeChanged
                ,&ModeManagerStubAdapter::fireActiveApplicationAttributeChanged
                ,"(tiii)"
                );



CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::com::ivis::ModeManager::ModeManagerStub,
    std::tuple<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationType, ::v1::com::ivis::ModeManager::ModeManagerTypes::SubApplicationType, ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > ModeManagerDBusStubAdapterInternal::requestChangeApplicationStubDispatcher(
    &ModeManagerStub::requestChangeApplication, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());


void ModeManagerDBusStubAdapterInternal::fireActiveApplicationAttributeChanged(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& value) {
    CommonAPI::Deployable<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t> deployedValue(value, static_cast<::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo,
        ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t
    >
    >>
        ::sendSignal(
            *this,
            "onActiveApplicationAttributeChanged",
            "(tiii)",
            deployedValue
    
    );
}

void ModeManagerDBusStubAdapterInternal::fireResponseChangeApplicationEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult& result, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& currentAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& requestAppInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester& requester) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeResult,
    CommonAPI::Deployable<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>,
    CommonAPI::Deployable<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>,
    ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester
    >>::sendSignal(
            *this,
            "responseChangeApplication",
            "i(tiii)(tiii)i",
    result,
    CommonAPI::Deployable<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>(currentAppInfo, static_cast<::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t*>(nullptr)),
    CommonAPI::Deployable<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>(requestAppInfo, static_cast<::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t*>(nullptr)),
    requester
    );
}
void ModeManagerDBusStubAdapterInternal::fireActiveApplicationChangedEvent(const ::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo& appInfo, const ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester& requester) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>,
    ::v1::com::ivis::ModeManager::ModeManagerTypes::AppChangeRequester
    >>::sendSignal(
            *this,
            "activeApplicationChanged",
            "(tiii)i",
    CommonAPI::Deployable<::v1::com::ivis::ModeManager::ModeManagerTypes::ApplicationInfo, ::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t>(appInfo, static_cast<::v1::com::ivis::ModeManager::ModeManagerTypes_::ApplicationInfoDeployment_t*>(nullptr)),
    requester
    );
}


const ModeManagerDBusStubAdapterHelper::StubDispatcherTable& ModeManagerDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& ModeManagerDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

ModeManagerDBusStubAdapterInternal::ModeManagerDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ModeManagerDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<ModeManagerStub>(_stub), false),
      stubDispatcherTable_({
            { { "getActiveApplicationAttribute", "" }, &com::ivis::ModeManager::ModeManagerDBusStubAdapterInternal::getActiveApplicationAttributeStubDispatcher }
            , { { "setActiveApplicationAttribute", "(tiii)" }, &com::ivis::ModeManager::ModeManagerDBusStubAdapterInternal::setActiveApplicationAttributeStubDispatcher }
            ,
            { { "requestChangeApplication", "iii" }, &com::ivis::ModeManager::ModeManagerDBusStubAdapterInternal::requestChangeApplicationStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::ivis::ModeManager::ModeManagerDBusStubAdapterInternal::getModeManagerInterfaceVersionStubDispatcher });
}

bool ModeManagerDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace ModeManager
} // namespace ivis
} // namespace com
} // namespace v1
