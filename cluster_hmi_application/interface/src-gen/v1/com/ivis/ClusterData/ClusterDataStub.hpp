/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_CLUSTERDATA_Cluster_Data_STUB_HPP_
#define V1_COM_IVIS_CLUSTERDATA_Cluster_Data_STUB_HPP_

#include <functional>




#include <v1/com/ivis/ClusterData/ClusterData.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace ClusterData {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ClusterData. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ClusterDataStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual ClusterData {
 public:
    ///Notifies all remote listeners about a change of value of the attribute vehicleSpeed.
    virtual void fireVehicleSpeedAttributeChanged(const uint16_t& vehicleSpeed) = 0;
    ///Notifies all remote listeners about a change of value of the attribute engineSpeed.
    virtual void fireEngineSpeedAttributeChanged(const uint16_t& engineSpeed) = 0;
    ///Notifies all remote listeners about a change of value of the attribute fuelLevel.
    virtual void fireFuelLevelAttributeChanged(const uint8_t& fuelLevel) = 0;
    ///Notifies all remote listeners about a change of value of the attribute airBagDeployed.
    virtual void fireAirBagDeployedAttributeChanged(const bool& airBagDeployed) = 0;
    ///Notifies all remote listeners about a change of value of the attribute lowWasherFluid.
    virtual void fireLowWasherFluidAttributeChanged(const bool& lowWasherFluid) = 0;
    ///Notifies all remote listeners about a change of value of the attribute parkingBrake.
    virtual void fireParkingBrakeAttributeChanged(const bool& parkingBrake) = 0;
    ///Notifies all remote listeners about a change of value of the attribute seatBeltActive.
    virtual void fireSeatBeltActiveAttributeChanged(const bool& seatBeltActive) = 0;
    ///Notifies all remote listeners about a change of value of the attribute fogLight.
    virtual void fireFogLightAttributeChanged(const bool& fogLight) = 0;
    ///Notifies all remote listeners about a change of value of the attribute headLight.
    virtual void fireHeadLightAttributeChanged(const bool& headLight) = 0;
    ///Notifies all remote listeners about a change of value of the attribute highBeam.
    virtual void fireHighBeamAttributeChanged(const bool& highBeam) = 0;
    ///Notifies all remote listeners about a change of value of the attribute leftIndicator.
    virtual void fireLeftIndicatorAttributeChanged(const bool& leftIndicator) = 0;
    ///Notifies all remote listeners about a change of value of the attribute rightIndicator.
    virtual void fireRightIndicatorAttributeChanged(const bool& rightIndicator) = 0;
    ///Notifies all remote listeners about a change of value of the attribute gearState.
    virtual void fireGearStateAttributeChanged(const uint8_t& gearState) = 0;
    ///Notifies all remote listeners about a change of value of the attribute engineCoolantTemperature.
    virtual void fireEngineCoolantTemperatureAttributeChanged(const int16_t& engineCoolantTemperature) = 0;



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ClusterData.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ClusterDataStubRemoteEvent
{
public:
    virtual ~ClusterDataStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute vehicleSpeed
    virtual bool onRemoteSetVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) = 0;
    /// Action callback for remote set requests on the attribute vehicleSpeed
    virtual void onRemoteVehicleSpeedAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute engineSpeed
    virtual bool onRemoteSetEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) = 0;
    /// Action callback for remote set requests on the attribute engineSpeed
    virtual void onRemoteEngineSpeedAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute fuelLevel
    virtual bool onRemoteSetFuelLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) = 0;
    /// Action callback for remote set requests on the attribute fuelLevel
    virtual void onRemoteFuelLevelAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute airBagDeployed
    virtual bool onRemoteSetAirBagDeployedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute airBagDeployed
    virtual void onRemoteAirBagDeployedAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute lowWasherFluid
    virtual bool onRemoteSetLowWasherFluidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute lowWasherFluid
    virtual void onRemoteLowWasherFluidAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute parkingBrake
    virtual bool onRemoteSetParkingBrakeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute parkingBrake
    virtual void onRemoteParkingBrakeAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute seatBeltActive
    virtual bool onRemoteSetSeatBeltActiveAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute seatBeltActive
    virtual void onRemoteSeatBeltActiveAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute fogLight
    virtual bool onRemoteSetFogLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute fogLight
    virtual void onRemoteFogLightAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute headLight
    virtual bool onRemoteSetHeadLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute headLight
    virtual void onRemoteHeadLightAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute highBeam
    virtual bool onRemoteSetHighBeamAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute highBeam
    virtual void onRemoteHighBeamAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute leftIndicator
    virtual bool onRemoteSetLeftIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute leftIndicator
    virtual void onRemoteLeftIndicatorAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute rightIndicator
    virtual bool onRemoteSetRightIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute rightIndicator
    virtual void onRemoteRightIndicatorAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute gearState
    virtual bool onRemoteSetGearStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) = 0;
    /// Action callback for remote set requests on the attribute gearState
    virtual void onRemoteGearStateAttributeChanged() = 0;
    /// Verification callback for remote set requests on the attribute engineCoolantTemperature
    virtual bool onRemoteSetEngineCoolantTemperatureAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _value) = 0;
    /// Action callback for remote set requests on the attribute engineCoolantTemperature
    virtual void onRemoteEngineCoolantTemperatureAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ClusterData to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ClusterDataStub
    : public virtual CommonAPI::Stub<ClusterDataStubAdapter, ClusterDataStubRemoteEvent>
{
public:

    virtual ~ClusterDataStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: current vehicle speed. unit is km/h
     */
    /// Provides getter access to the attribute vehicleSpeed
    virtual const uint16_t &getVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: current engine speed. unit is RPM
     */
    /// Provides getter access to the attribute engineSpeed
    virtual const uint16_t &getEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: current fuel level. unit is %
     */
    /// Provides getter access to the attribute fuelLevel
    virtual const uint8_t &getFuelLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: is air bag deployed.
     */
    /// Provides getter access to the attribute airBagDeployed
    virtual const bool &getAirBagDeployedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: is low washer fluid.
     */
    /// Provides getter access to the attribute lowWasherFluid
    virtual const bool &getLowWasherFluidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: is parking brake engaged
     */
    /// Provides getter access to the attribute parkingBrake
    virtual const bool &getParkingBrakeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: is seat belt active
     */
    /// Provides getter access to the attribute seatBeltActive
    virtual const bool &getSeatBeltActiveAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: is fog light on
     */
    /// Provides getter access to the attribute fogLight
    virtual const bool &getFogLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: is head light on
     */
    /// Provides getter access to the attribute headLight
    virtual const bool &getHeadLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: is high beam on
     */
    /// Provides getter access to the attribute highBeam
    virtual const bool &getHighBeamAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: is left indicator active
     */
    /// Provides getter access to the attribute leftIndicator
    virtual const bool &getLeftIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: is right indicator active
     */
    /// Provides getter access to the attribute rightIndicator
    virtual const bool &getRightIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: current gear state. -1 : reverse, 0 : neutral
     */
    /// Provides getter access to the attribute gearState
    virtual const uint8_t &getGearStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: ect ( Engine Coolant Temperature ) level
     */
    /// Provides getter access to the attribute engineCoolantTemperature
    virtual const int16_t &getEngineCoolantTemperatureAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;


    using CommonAPI::Stub<ClusterDataStubAdapter, ClusterDataStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ClusterDataStubAdapter, ClusterDataStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ClusterDataStubAdapter, ClusterDataStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ClusterDataStubRemoteEvent RemoteEventType;
    typedef ClusterData StubInterface;
};

} // namespace ClusterData
} // namespace ivis
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_CLUSTERDATA_Cluster_Data_STUB_HPP_
