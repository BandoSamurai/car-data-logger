/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_CLUSTERDATA_Cluster_Data_STUB_DEFAULT_HPP_
#define V1_COM_IVIS_CLUSTERDATA_Cluster_Data_STUB_DEFAULT_HPP_


#include <v1/com/ivis/ClusterData/ClusterDataStub.hpp>
#include <sstream>

namespace v1 {
namespace com {
namespace ivis {
namespace ClusterData {

/**
 * Provides a default implementation for ClusterDataStubRemoteEvent and
 * ClusterDataStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class ClusterDataStubDefault
    : public virtual ClusterDataStub {
public:
    ClusterDataStubDefault();

    ClusterDataStubRemoteEvent* initStubAdapter(const std::shared_ptr<ClusterDataStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const uint16_t& getVehicleSpeedAttribute();
    virtual const uint16_t& getVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setVehicleSpeedAttribute(uint16_t _value);
    virtual void setVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value);
    virtual const uint16_t& getEngineSpeedAttribute();
    virtual const uint16_t& getEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setEngineSpeedAttribute(uint16_t _value);
    virtual void setEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value);
    virtual const uint8_t& getFuelLevelAttribute();
    virtual const uint8_t& getFuelLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setFuelLevelAttribute(uint8_t _value);
    virtual void setFuelLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value);
    virtual const bool& getAirBagDeployedAttribute();
    virtual const bool& getAirBagDeployedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setAirBagDeployedAttribute(bool _value);
    virtual void setAirBagDeployedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getLowWasherFluidAttribute();
    virtual const bool& getLowWasherFluidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setLowWasherFluidAttribute(bool _value);
    virtual void setLowWasherFluidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getParkingBrakeAttribute();
    virtual const bool& getParkingBrakeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setParkingBrakeAttribute(bool _value);
    virtual void setParkingBrakeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getSeatBeltActiveAttribute();
    virtual const bool& getSeatBeltActiveAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setSeatBeltActiveAttribute(bool _value);
    virtual void setSeatBeltActiveAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getFogLightAttribute();
    virtual const bool& getFogLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setFogLightAttribute(bool _value);
    virtual void setFogLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getHeadLightAttribute();
    virtual const bool& getHeadLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setHeadLightAttribute(bool _value);
    virtual void setHeadLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getHighBeamAttribute();
    virtual const bool& getHighBeamAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setHighBeamAttribute(bool _value);
    virtual void setHighBeamAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getLeftIndicatorAttribute();
    virtual const bool& getLeftIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setLeftIndicatorAttribute(bool _value);
    virtual void setLeftIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const bool& getRightIndicatorAttribute();
    virtual const bool& getRightIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setRightIndicatorAttribute(bool _value);
    virtual void setRightIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
    virtual const uint8_t& getGearStateAttribute();
    virtual const uint8_t& getGearStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setGearStateAttribute(uint8_t _value);
    virtual void setGearStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value);
    virtual const int16_t& getEngineCoolantTemperatureAttribute();
    virtual const int16_t& getEngineCoolantTemperatureAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setEngineCoolantTemperatureAttribute(int16_t _value);
    virtual void setEngineCoolantTemperatureAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _value);




protected:
    /**
     * description: current vehicle speed. unit is km/h
     */
    virtual bool trySetVehicleSpeedAttribute(uint16_t _value);
    virtual bool validateVehicleSpeedAttributeRequestedValue(const uint16_t &_value);
    virtual void onRemoteVehicleSpeedAttributeChanged();
    /**
     * description: current engine speed. unit is RPM
     */
    virtual bool trySetEngineSpeedAttribute(uint16_t _value);
    virtual bool validateEngineSpeedAttributeRequestedValue(const uint16_t &_value);
    virtual void onRemoteEngineSpeedAttributeChanged();
    /**
     * description: current fuel level. unit is %
     */
    virtual bool trySetFuelLevelAttribute(uint8_t _value);
    virtual bool validateFuelLevelAttributeRequestedValue(const uint8_t &_value);
    virtual void onRemoteFuelLevelAttributeChanged();
    /**
     * description: is air bag deployed.
     */
    virtual bool trySetAirBagDeployedAttribute(bool _value);
    virtual bool validateAirBagDeployedAttributeRequestedValue(const bool &_value);
    virtual void onRemoteAirBagDeployedAttributeChanged();
    /**
     * description: is low washer fluid.
     */
    virtual bool trySetLowWasherFluidAttribute(bool _value);
    virtual bool validateLowWasherFluidAttributeRequestedValue(const bool &_value);
    virtual void onRemoteLowWasherFluidAttributeChanged();
    /**
     * description: is parking brake engaged
     */
    virtual bool trySetParkingBrakeAttribute(bool _value);
    virtual bool validateParkingBrakeAttributeRequestedValue(const bool &_value);
    virtual void onRemoteParkingBrakeAttributeChanged();
    /**
     * description: is seat belt active
     */
    virtual bool trySetSeatBeltActiveAttribute(bool _value);
    virtual bool validateSeatBeltActiveAttributeRequestedValue(const bool &_value);
    virtual void onRemoteSeatBeltActiveAttributeChanged();
    /**
     * description: is fog light on
     */
    virtual bool trySetFogLightAttribute(bool _value);
    virtual bool validateFogLightAttributeRequestedValue(const bool &_value);
    virtual void onRemoteFogLightAttributeChanged();
    /**
     * description: is head light on
     */
    virtual bool trySetHeadLightAttribute(bool _value);
    virtual bool validateHeadLightAttributeRequestedValue(const bool &_value);
    virtual void onRemoteHeadLightAttributeChanged();
    /**
     * description: is high beam on
     */
    virtual bool trySetHighBeamAttribute(bool _value);
    virtual bool validateHighBeamAttributeRequestedValue(const bool &_value);
    virtual void onRemoteHighBeamAttributeChanged();
    /**
     * description: is left indicator active
     */
    virtual bool trySetLeftIndicatorAttribute(bool _value);
    virtual bool validateLeftIndicatorAttributeRequestedValue(const bool &_value);
    virtual void onRemoteLeftIndicatorAttributeChanged();
    /**
     * description: is right indicator active
     */
    virtual bool trySetRightIndicatorAttribute(bool _value);
    virtual bool validateRightIndicatorAttributeRequestedValue(const bool &_value);
    virtual void onRemoteRightIndicatorAttributeChanged();
    /**
     * description: current gear state. -1 : reverse, 0 : neutral
     */
    virtual bool trySetGearStateAttribute(uint8_t _value);
    virtual bool validateGearStateAttributeRequestedValue(const uint8_t &_value);
    virtual void onRemoteGearStateAttributeChanged();
    /**
     * description: ect ( Engine Coolant Temperature ) level
     */
    virtual bool trySetEngineCoolantTemperatureAttribute(int16_t _value);
    virtual bool validateEngineCoolantTemperatureAttributeRequestedValue(const int16_t &_value);
    virtual void onRemoteEngineCoolantTemperatureAttributeChanged();
    class RemoteEventHandler: public virtual ClusterDataStubRemoteEvent {
    public:
        RemoteEventHandler(ClusterDataStubDefault *_defaultStub);

        /**
         * description: current vehicle speed. unit is km/h
         */
        virtual bool onRemoteSetVehicleSpeedAttribute(uint16_t _value);
        virtual bool onRemoteSetVehicleSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value);
        virtual void onRemoteVehicleSpeedAttributeChanged();

        /**
         * description: current engine speed. unit is RPM
         */
        virtual bool onRemoteSetEngineSpeedAttribute(uint16_t _value);
        virtual bool onRemoteSetEngineSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value);
        virtual void onRemoteEngineSpeedAttributeChanged();

        /**
         * description: current fuel level. unit is %
         */
        virtual bool onRemoteSetFuelLevelAttribute(uint8_t _value);
        virtual bool onRemoteSetFuelLevelAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value);
        virtual void onRemoteFuelLevelAttributeChanged();

        /**
         * description: is air bag deployed.
         */
        virtual bool onRemoteSetAirBagDeployedAttribute(bool _value);
        virtual bool onRemoteSetAirBagDeployedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteAirBagDeployedAttributeChanged();

        /**
         * description: is low washer fluid.
         */
        virtual bool onRemoteSetLowWasherFluidAttribute(bool _value);
        virtual bool onRemoteSetLowWasherFluidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteLowWasherFluidAttributeChanged();

        /**
         * description: is parking brake engaged
         */
        virtual bool onRemoteSetParkingBrakeAttribute(bool _value);
        virtual bool onRemoteSetParkingBrakeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteParkingBrakeAttributeChanged();

        /**
         * description: is seat belt active
         */
        virtual bool onRemoteSetSeatBeltActiveAttribute(bool _value);
        virtual bool onRemoteSetSeatBeltActiveAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteSeatBeltActiveAttributeChanged();

        /**
         * description: is fog light on
         */
        virtual bool onRemoteSetFogLightAttribute(bool _value);
        virtual bool onRemoteSetFogLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteFogLightAttributeChanged();

        /**
         * description: is head light on
         */
        virtual bool onRemoteSetHeadLightAttribute(bool _value);
        virtual bool onRemoteSetHeadLightAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteHeadLightAttributeChanged();

        /**
         * description: is high beam on
         */
        virtual bool onRemoteSetHighBeamAttribute(bool _value);
        virtual bool onRemoteSetHighBeamAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteHighBeamAttributeChanged();

        /**
         * description: is left indicator active
         */
        virtual bool onRemoteSetLeftIndicatorAttribute(bool _value);
        virtual bool onRemoteSetLeftIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteLeftIndicatorAttributeChanged();

        /**
         * description: is right indicator active
         */
        virtual bool onRemoteSetRightIndicatorAttribute(bool _value);
        virtual bool onRemoteSetRightIndicatorAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value);
        virtual void onRemoteRightIndicatorAttributeChanged();

        /**
         * description: current gear state. -1 : reverse, 0 : neutral
         */
        virtual bool onRemoteSetGearStateAttribute(uint8_t _value);
        virtual bool onRemoteSetGearStateAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value);
        virtual void onRemoteGearStateAttributeChanged();

        /**
         * description: ect ( Engine Coolant Temperature ) level
         */
        virtual bool onRemoteSetEngineCoolantTemperatureAttribute(int16_t _value);
        virtual bool onRemoteSetEngineCoolantTemperatureAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _value);
        virtual void onRemoteEngineCoolantTemperatureAttributeChanged();


    private:
        ClusterDataStubDefault *defaultStub_;
    };
private:
    ClusterDataStubDefault::RemoteEventHandler remoteEventHandler_;

    /**
     * description: current vehicle speed. unit is km/h
     */
    uint16_t vehicleSpeedAttributeValue_ {};
    /**
     * description: current engine speed. unit is RPM
     */
    uint16_t engineSpeedAttributeValue_ {};
    /**
     * description: current fuel level. unit is %
     */
    uint8_t fuelLevelAttributeValue_ {};
    /**
     * description: is air bag deployed.
     */
    bool airBagDeployedAttributeValue_ {};
    /**
     * description: is low washer fluid.
     */
    bool lowWasherFluidAttributeValue_ {};
    /**
     * description: is parking brake engaged
     */
    bool parkingBrakeAttributeValue_ {};
    /**
     * description: is seat belt active
     */
    bool seatBeltActiveAttributeValue_ {};
    /**
     * description: is fog light on
     */
    bool fogLightAttributeValue_ {};
    /**
     * description: is head light on
     */
    bool headLightAttributeValue_ {};
    /**
     * description: is high beam on
     */
    bool highBeamAttributeValue_ {};
    /**
     * description: is left indicator active
     */
    bool leftIndicatorAttributeValue_ {};
    /**
     * description: is right indicator active
     */
    bool rightIndicatorAttributeValue_ {};
    /**
     * description: current gear state. -1 : reverse, 0 : neutral
     */
    uint8_t gearStateAttributeValue_ {};
    /**
     * description: ect ( Engine Coolant Temperature ) level
     */
    int16_t engineCoolantTemperatureAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace ClusterData
} // namespace ivis
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_CLUSTERDATA_Cluster_Data_STUB_DEFAULT
