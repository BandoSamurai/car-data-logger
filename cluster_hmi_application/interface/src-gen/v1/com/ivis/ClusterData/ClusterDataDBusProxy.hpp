/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_CLUSTERDATA_Cluster_Data_DBUS_PROXY_HPP_
#define V1_COM_IVIS_CLUSTERDATA_Cluster_Data_DBUS_PROXY_HPP_

#include <v1/com/ivis/ClusterData/ClusterDataProxyBase.hpp>
#include "v1/com/ivis/ClusterData/ClusterDataDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace ivis {
namespace ClusterData {

class ClusterDataDBusProxy
    : virtual public ClusterDataProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    ClusterDataDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~ClusterDataDBusProxy() { }

    virtual VehicleSpeedAttribute& getVehicleSpeedAttribute();
    virtual EngineSpeedAttribute& getEngineSpeedAttribute();
    virtual FuelLevelAttribute& getFuelLevelAttribute();
    virtual AirBagDeployedAttribute& getAirBagDeployedAttribute();
    virtual LowWasherFluidAttribute& getLowWasherFluidAttribute();
    virtual ParkingBrakeAttribute& getParkingBrakeAttribute();
    virtual SeatBeltActiveAttribute& getSeatBeltActiveAttribute();
    virtual FogLightAttribute& getFogLightAttribute();
    virtual HeadLightAttribute& getHeadLightAttribute();
    virtual HighBeamAttribute& getHighBeamAttribute();
    virtual LeftIndicatorAttribute& getLeftIndicatorAttribute();
    virtual RightIndicatorAttribute& getRightIndicatorAttribute();
    virtual GearStateAttribute& getGearStateAttribute();
    virtual EngineCoolantTemperatureAttribute& getEngineCoolantTemperatureAttribute();




    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<VehicleSpeedAttribute>> vehicleSpeed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EngineSpeedAttribute>> engineSpeed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<FuelLevelAttribute>> fuelLevel_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<AirBagDeployedAttribute>> airBagDeployed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<LowWasherFluidAttribute>> lowWasherFluid_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ParkingBrakeAttribute>> parkingBrake_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SeatBeltActiveAttribute>> seatBeltActive_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<FogLightAttribute>> fogLight_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HeadLightAttribute>> headLight_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HighBeamAttribute>> highBeam_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<LeftIndicatorAttribute>> leftIndicator_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RightIndicatorAttribute>> rightIndicator_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<GearStateAttribute>> gearState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<EngineCoolantTemperatureAttribute>> engineCoolantTemperature_;


};

} // namespace ClusterData
} // namespace ivis
} // namespace com
} // namespace v1

#endif // V1_COM_IVIS_CLUSTERDATA_Cluster_Data_DBUS_PROXY_HPP_

