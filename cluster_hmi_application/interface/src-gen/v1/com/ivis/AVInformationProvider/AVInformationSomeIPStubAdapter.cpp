/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.5.v201601121433.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/com/ivis/AVInformationProvider/AVInformationSomeIPStubAdapter.hpp>
#include <v1/com/ivis/AVInformationProvider/AVInformation.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace AVInformationProvider {

std::shared_ptr<CommonAPI::SomeIP::StubAdapter> createAVInformationSomeIPStubAdapter(
                   const CommonAPI::SomeIP::Address &_address,
                   const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<AVInformationSomeIPStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerAVInformationSomeIPStubAdapter) {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:com.ivis.AVInformationProvider.AVInformation:com.ivis.AVInformationProvider.AVInformation.SomeIp",
         0x7d0, 0x834, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerStubAdapterCreateMethod(
        AVInformation::getInterface(), 
        &createAVInformationSomeIPStubAdapter);
}

AVInformationSomeIPStubAdapterInternal::~AVInformationSomeIPStubAdapterInternal() {
    deactivateManagedInstances();
    AVInformationSomeIPStubAdapterHelper::deinit();
}

void AVInformationSomeIPStubAdapterInternal::deactivateManagedInstances() {

}

CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        CommonAPI::Version
        > AVInformationSomeIPStubAdapterInternal::getAVInformationInterfaceVersionStubDispatcher(&AVInformationStub::getInterfaceVersion);

CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::com::ivis::AVInformationProvider::AVInformationStub,
    ::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source,
    CommonAPI::SomeIP::EnumerationDeployment
> AVInformationSomeIPStubAdapterInternal::getCurrentSourceAttributeStubDispatcher(
    &AVInformationStub::getCurrentSourceAttribute);
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source,
        CommonAPI::SomeIP::EnumerationDeployment
        > AVInformationSomeIPStubAdapterInternal::setCurrentSourceAttributeStubDispatcher(
            &AVInformationStub::getCurrentSourceAttribute,
            &AVInformationStubRemoteEvent::onRemoteSetCurrentSourceAttribute,
            &AVInformationStubRemoteEvent::onRemoteCurrentSourceAttributeChanged,
            &AVInformationStubAdapter::fireCurrentSourceAttributeChanged
        );
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::com::ivis::AVInformationProvider::AVInformationStub,
    ::v1::com::ivis::AVInformationProvider::AVInformationTypes::MetaData,
    ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::MetaDataDeployment_t
> AVInformationSomeIPStubAdapterInternal::getMetaDataAttributeStubDispatcher(
    &AVInformationStub::getMetaDataAttribute, &::v1::com::ivis::AVInformationProvider::AVInformation_::metaDataDeployment);
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes::MetaData,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::MetaDataDeployment_t
        > AVInformationSomeIPStubAdapterInternal::setMetaDataAttributeStubDispatcher(
            &AVInformationStub::getMetaDataAttribute,
            &AVInformationStubRemoteEvent::onRemoteSetMetaDataAttribute,
            &AVInformationStubRemoteEvent::onRemoteMetaDataAttributeChanged,
            &AVInformationStubAdapter::fireMetaDataAttributeChanged,
            &::v1::com::ivis::AVInformationProvider::AVInformation_::metaDataDeployment
        );
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::com::ivis::AVInformationProvider::AVInformationStub,
    ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayPosition,
    ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::PlayPositionDeployment_t
> AVInformationSomeIPStubAdapterInternal::getPlayPositionAttributeStubDispatcher(
    &AVInformationStub::getPlayPositionAttribute, &::v1::com::ivis::AVInformationProvider::AVInformation_::playPositionDeployment);
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayPosition,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::PlayPositionDeployment_t
        > AVInformationSomeIPStubAdapterInternal::setPlayPositionAttributeStubDispatcher(
            &AVInformationStub::getPlayPositionAttribute,
            &AVInformationStubRemoteEvent::onRemoteSetPlayPositionAttribute,
            &AVInformationStubRemoteEvent::onRemotePlayPositionAttributeChanged,
            &AVInformationStubAdapter::firePlayPositionAttributeChanged,
            &::v1::com::ivis::AVInformationProvider::AVInformation_::playPositionDeployment
        );
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::com::ivis::AVInformationProvider::AVInformationStub,
    ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus,
    CommonAPI::SomeIP::EnumerationDeployment
> AVInformationSomeIPStubAdapterInternal::getPlayStatusAttributeStubDispatcher(
    &AVInformationStub::getPlayStatusAttribute);
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus,
        CommonAPI::SomeIP::EnumerationDeployment
        > AVInformationSomeIPStubAdapterInternal::setPlayStatusAttributeStubDispatcher(
            &AVInformationStub::getPlayStatusAttribute,
            &AVInformationStubRemoteEvent::onRemoteSetPlayStatusAttribute,
            &AVInformationStubRemoteEvent::onRemotePlayStatusAttributeChanged,
            &AVInformationStubAdapter::firePlayStatusAttributeChanged
        );
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::com::ivis::AVInformationProvider::AVInformationStub,
    uint32_t
> AVInformationSomeIPStubAdapterInternal::getSystemTimeAttributeStubDispatcher(
    &AVInformationStub::getSystemTimeAttribute);
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::ivis::AVInformationProvider::AVInformationStub,
        uint32_t
        > AVInformationSomeIPStubAdapterInternal::setSystemTimeAttributeStubDispatcher(
            &AVInformationStub::getSystemTimeAttribute,
            &AVInformationStubRemoteEvent::onRemoteSetSystemTimeAttribute,
            &AVInformationStubRemoteEvent::onRemoteSystemTimeAttributeChanged,
            &AVInformationStubAdapter::fireSystemTimeAttributeChanged
        );
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::com::ivis::AVInformationProvider::AVInformationStub,
    std::tuple<AVInformationTypes::Action>,
    std::tuple<>,
    std::tuple<CommonAPI::SomeIP::EnumerationDeployment>,
    std::tuple<>
> AVInformationSomeIPStubAdapterInternal::requestActionStubDispatcher(
    &AVInformationStub::requestAction, 
    std::make_tuple(static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr)),
    std::make_tuple());

void AVInformationSomeIPStubAdapterInternal::fireCurrentSourceAttributeChanged(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source& value) {
    CommonAPI::Deployable<::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source, CommonAPI::SomeIP::EnumerationDeployment> deployedValue(value, static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
        CommonAPI::Deployable<
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes::Source,
            CommonAPI::SomeIP::EnumerationDeployment
        >
        >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x5655),
        deployedValue
    );
}
void AVInformationSomeIPStubAdapterInternal::fireMetaDataAttributeChanged(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::MetaData& value) {
    CommonAPI::Deployable<::v1::com::ivis::AVInformationProvider::AVInformationTypes::MetaData, ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::MetaDataDeployment_t> deployedValue(value, &::v1::com::ivis::AVInformationProvider::AVInformation_::metaDataDeployment);
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
        CommonAPI::Deployable<
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes::MetaData,
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::MetaDataDeployment_t
        >
        >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x56b9),
        deployedValue
    );
}
void AVInformationSomeIPStubAdapterInternal::firePlayPositionAttributeChanged(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayPosition& value) {
    CommonAPI::Deployable<::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayPosition, ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::PlayPositionDeployment_t> deployedValue(value, &::v1::com::ivis::AVInformationProvider::AVInformation_::playPositionDeployment);
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
        CommonAPI::Deployable<
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayPosition,
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes_::PlayPositionDeployment_t
        >
        >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x571d),
        deployedValue
    );
}
void AVInformationSomeIPStubAdapterInternal::firePlayStatusAttributeChanged(const ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus& value) {
    CommonAPI::Deployable<::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus, CommonAPI::SomeIP::EnumerationDeployment> deployedValue(value, static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
        CommonAPI::Deployable<
            ::v1::com::ivis::AVInformationProvider::AVInformationTypes::PlayStatus,
            CommonAPI::SomeIP::EnumerationDeployment
        >
        >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x5781),
        deployedValue
    );
}
void AVInformationSomeIPStubAdapterInternal::fireSystemTimeAttributeChanged(const uint32_t& value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
        uint32_t
        >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x57e5),
        value
    );
}

void AVInformationSomeIPStubAdapterInternal::fireNotifyAlbumArtEvent(const uint32_t& _totalSegmentCount, const uint32_t& _currentIndex, const std::vector<uint8_t>& _imageData) {
  CommonAPI::Deployable<std::vector<uint8_t>, CommonAPI::SomeIP::ArrayDeployment<CommonAPI::EmptyDeployment>> deployed_imageData(_imageData, static_cast<CommonAPI::SomeIP::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments< uint32_t
    ,  uint32_t
    ,  CommonAPI::Deployable< std::vector<uint8_t>, CommonAPI::SomeIP::ArrayDeployment<CommonAPI::EmptyDeployment> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x526c),
            _totalSegmentCount
            , _currentIndex
            ,  deployed_imageData 
    );
}

const AVInformationSomeIPStubAdapterHelper::StubDispatcherTable& AVInformationSomeIPStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::SomeIP::StubAttributeTable& AVInformationSomeIPStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}


AVInformationSomeIPStubAdapterInternal::AVInformationSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        AVInformationSomeIPStubAdapterHelper(
            _address, 
            _connection,
            std::dynamic_pointer_cast<AVInformationStub>(_stub)),
        stubDispatcherTable_({
            { { CommonAPI::SomeIP::method_id_t(0x5654) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::getCurrentSourceAttributeStubDispatcher }
            , 
            { { CommonAPI::SomeIP::method_id_t(0x5656) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::setCurrentSourceAttributeStubDispatcher }
            , 
            { { CommonAPI::SomeIP::method_id_t(0x56b8) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::getMetaDataAttributeStubDispatcher }
            , 
            { { CommonAPI::SomeIP::method_id_t(0x56ba) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::setMetaDataAttributeStubDispatcher }
            , 
            { { CommonAPI::SomeIP::method_id_t(0x571c) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::getPlayPositionAttributeStubDispatcher }
            , 
            { { CommonAPI::SomeIP::method_id_t(0x571e) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::setPlayPositionAttributeStubDispatcher }
            , 
            { { CommonAPI::SomeIP::method_id_t(0x5780) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::getPlayStatusAttributeStubDispatcher }
            , 
            { { CommonAPI::SomeIP::method_id_t(0x5782) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::setPlayStatusAttributeStubDispatcher }
            , 
            { { CommonAPI::SomeIP::method_id_t(0x57e4) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::getSystemTimeAttributeStubDispatcher }
            , 
            { { CommonAPI::SomeIP::method_id_t(0x57e6) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::setSystemTimeAttributeStubDispatcher }
            ,
            { { CommonAPI::SomeIP::method_id_t(0x526c) }, &com::ivis::AVInformationProvider::AVInformationSomeIPStubAdapterInternal::requestActionStubDispatcher }
        }),
        stubAttributeTable_(
        ) {
    
    // Provided events/fields
    {
        std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
        itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x5208));
        registerEvent(CommonAPI::SomeIP::event_id_t(0x526c), itsEventGroups, false);
    }
    {
        std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
        itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x55f0)));
        registerEvent(CommonAPI::SomeIP::event_id_t(0x5655), itsEventGroups, true);
    }
    {
        std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
        itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x55f0)));
        registerEvent(CommonAPI::SomeIP::event_id_t(0x56b9), itsEventGroups, true);
    }
    {
        std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
        itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x55f0)));
        registerEvent(CommonAPI::SomeIP::event_id_t(0x571d), itsEventGroups, true);
    }
    {
        std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
        itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x55f0)));
        registerEvent(CommonAPI::SomeIP::event_id_t(0x5781), itsEventGroups, true);
    }
    {
        std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
        itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x55f0)));
        registerEvent(CommonAPI::SomeIP::event_id_t(0x57e5), itsEventGroups, true);
    }

}

} // namespace AVInformationProvider
} // namespace ivis
} // namespace com
} // namespace v1
