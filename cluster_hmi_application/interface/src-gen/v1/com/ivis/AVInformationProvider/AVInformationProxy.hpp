/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_IVIS_AVINFORMATIONPROVIDER_AV_Information_PROXY_HPP_
#define V1_COM_IVIS_AVINFORMATIONPROVIDER_AV_Information_PROXY_HPP_

#include <v1/com/ivis/AVInformationProvider/AVInformationProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace ivis {
namespace AVInformationProvider {

template <typename ... _AttributeExtensions>
class AVInformationProxy
    : virtual public AVInformation, 
      virtual public AVInformationProxyBase,
      virtual public _AttributeExtensions... {
public:
    AVInformationProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~AVInformationProxy();

    typedef AVInformation InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute currentSource.
     */
    virtual CurrentSourceAttribute& getCurrentSourceAttribute() {
        return delegate_->getCurrentSourceAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute metaData.
     */
    virtual MetaDataAttribute& getMetaDataAttribute() {
        return delegate_->getMetaDataAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute playPosition.
     */
    virtual PlayPositionAttribute& getPlayPositionAttribute() {
        return delegate_->getPlayPositionAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute playStatus.
     */
    virtual PlayStatusAttribute& getPlayStatusAttribute() {
        return delegate_->getPlayStatusAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute systemTime.
     */
    virtual SystemTimeAttribute& getSystemTimeAttribute() {
        return delegate_->getSystemTimeAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast notifyAlbumArt.
     */
    virtual NotifyAlbumArtEvent& getNotifyAlbumArtEvent() {
        return delegate_->getNotifyAlbumArtEvent();
    }

    /**
     * Calls requestAction with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestAction(const AVInformationTypes::Action &_action, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestAction with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestActionAsync(const AVInformationTypes::Action &_action, RequestActionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<AVInformationProxyBase> delegate_;
};

typedef AVInformationProxy<> AVInformationProxyDefault;

namespace AVInformationExtensions {
    template <template <typename > class _ExtensionType>
    class CurrentSourceAttributeExtension {
     public:
        typedef _ExtensionType<AVInformationProxyBase::CurrentSourceAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<AVInformationProxyBase::CurrentSourceAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CurrentSourceAttributeExtension() {}
    #endif
    
        CurrentSourceAttributeExtension(AVInformationProxyBase& proxy): attributeExtension_(proxy.getCurrentSourceAttribute()) {
        }
    
        inline extension_type& getCurrentSourceAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class MetaDataAttributeExtension {
     public:
        typedef _ExtensionType<AVInformationProxyBase::MetaDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<AVInformationProxyBase::MetaDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MetaDataAttributeExtension() {}
    #endif
    
        MetaDataAttributeExtension(AVInformationProxyBase& proxy): attributeExtension_(proxy.getMetaDataAttribute()) {
        }
    
        inline extension_type& getMetaDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PlayPositionAttributeExtension {
     public:
        typedef _ExtensionType<AVInformationProxyBase::PlayPositionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<AVInformationProxyBase::PlayPositionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PlayPositionAttributeExtension() {}
    #endif
    
        PlayPositionAttributeExtension(AVInformationProxyBase& proxy): attributeExtension_(proxy.getPlayPositionAttribute()) {
        }
    
        inline extension_type& getPlayPositionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PlayStatusAttributeExtension {
     public:
        typedef _ExtensionType<AVInformationProxyBase::PlayStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<AVInformationProxyBase::PlayStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PlayStatusAttributeExtension() {}
    #endif
    
        PlayStatusAttributeExtension(AVInformationProxyBase& proxy): attributeExtension_(proxy.getPlayStatusAttribute()) {
        }
    
        inline extension_type& getPlayStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SystemTimeAttributeExtension {
     public:
        typedef _ExtensionType<AVInformationProxyBase::SystemTimeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<AVInformationProxyBase::SystemTimeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SystemTimeAttributeExtension() {}
    #endif
    
        SystemTimeAttributeExtension(AVInformationProxyBase& proxy): attributeExtension_(proxy.getSystemTimeAttribute()) {
        }
    
        inline extension_type& getSystemTimeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace AVInformationExtensions

//
// AVInformationProxy Implementation
//
template <typename ... _AttributeExtensions>
AVInformationProxy<_AttributeExtensions...>::AVInformationProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<AVInformationProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<AVInformationProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
AVInformationProxy<_AttributeExtensions...>::~AVInformationProxy() {
}

template <typename ... _AttributeExtensions>
void AVInformationProxy<_AttributeExtensions...>::requestAction(const AVInformationTypes::Action &_action, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_action.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestAction(_action, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> AVInformationProxy<_AttributeExtensions...>::requestActionAsync(const AVInformationTypes::Action &_action, RequestActionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_action.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->requestActionAsync(_action, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &AVInformationProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool AVInformationProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool AVInformationProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& AVInformationProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& AVInformationProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace AVInformationProvider
} // namespace ivis
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::ivis::AVInformationProvider::AVInformationProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::ivis::AVInformationProvider::AVInformationProxy<
            ::v1::com::ivis::AVInformationProvider::AVInformationExtensions::CurrentSourceAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::AVInformationProvider::AVInformationExtensions::MetaDataAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::AVInformationProvider::AVInformationExtensions::PlayPositionAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::AVInformationProvider::AVInformationExtensions::PlayStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::ivis::AVInformationProvider::AVInformationExtensions::SystemTimeAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_IVIS_AVINFORMATIONPROVIDER_AV_Information_PROXY_HPP_
