/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/org/genivi/CDL/ClientAPI.hpp>
#include <v1/org/genivi/CDL/ClientAPIDBusStubAdapter.hpp>

namespace v1 {
namespace org {
namespace genivi {
namespace CDL {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createClientAPIDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<ClientAPIDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerClientAPIDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	ClientAPI::getInterface(), &createClientAPIDBusStubAdapter);
}

ClientAPIDBusStubAdapterInternal::~ClientAPIDBusStubAdapterInternal() {
    deactivateManagedInstances();
    ClientAPIDBusStubAdapterHelper::deinit();
}

void ClientAPIDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* ClientAPIDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: notify data to client
         */
        "<signal name=\"notifyData\">\n"
            "<arg name=\"signalName\" type=\"s\" />\n"
            "<arg name=\"type\" type=\"i\" />\n"
            "<arg name=\"unit\" type=\"s\" />\n"
            "<arg name=\"value\" type=\"(yv)\" />\n"
            "<arg name=\"timeStamp\" type=\"t\" />\n"
        "</signal>\n"
        /**
         * description: register and authenticate client
         */
        "<method name=\"registerClient\">\n"
            "<arg name=\"_key\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_handle\" type=\"u\" direction=\"out\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: set id list for listen. only specified data will notified to client
         */
        "<method name=\"setListenData\">\n"
            "<arg name=\"_handle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_signalNameList\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_type\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: get single data instantly
         */
        "<method name=\"getData\">\n"
            "<arg name=\"_handle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_signalName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_result\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::org::genivi::CDL::ClientAPIStub,
        CommonAPI::Version
        > ClientAPIDBusStubAdapterInternal::getClientAPIInterfaceVersionStubDispatcher(&ClientAPIStub::getInterfaceVersion, "uu");




/**
 * description: register and authenticate client
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::CDL::ClientAPIStub,
    std::tuple<std::string>,
    std::tuple<ClientAPITypes::Handle, ClientAPITypes::ResultCode>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > ClientAPIDBusStubAdapterInternal::registerClientStubDispatcher(
    &ClientAPIStub::registerClient, "ui",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: set id list for listen. only specified data will notified to client
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::CDL::ClientAPIStub,
    std::tuple<ClientAPITypes::Handle, std::vector<std::string>, ClientAPITypes::NotifyType>,
    std::tuple<ClientAPITypes::ResultCode>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ClientAPIDBusStubAdapterInternal::setListenDataStubDispatcher(
    &ClientAPIStub::setListenData, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: get single data instantly
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::CDL::ClientAPIStub,
    std::tuple<ClientAPITypes::Handle, std::string>,
    std::tuple<ClientAPITypes::ResultCode>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ClientAPIDBusStubAdapterInternal::getDataStubDispatcher(
    &ClientAPIStub::getData, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));



/**
 * description: notify data to client
 */
CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v1::org::genivi::CDL::ClientAPIStub,
    ClientAPIStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > ClientAPIDBusStubAdapterInternal::subscribeNotifyDataSelectiveStubDispatcher(&ClientAPIStubAdapter::subscribeFornotifyDataSelective, "b");

CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v1::org::genivi::CDL::ClientAPIStub,
    ClientAPIStubAdapter,
    std::tuple<>,
    std::tuple<>
    > ClientAPIDBusStubAdapterInternal::unsubscribeNotifyDataSelectiveStubDispatcher(&ClientAPIStubAdapter::unsubscribeFromnotifyDataSelective, "");

void ClientAPIDBusStubAdapterInternal::fireNotifyDataSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_signalName, const ::v1::org::genivi::CDL::ClientAPITypes::Types &_type, const std::string &_unit, const ::v1::org::genivi::CDL::ClientAPITypes::CDLValue &_value, const uint64_t &_timeStamp) {
    std::shared_ptr<CommonAPI::DBus::DBusClientId> dbusClient = std::dynamic_pointer_cast<CommonAPI::DBus::DBusClientId, CommonAPI::ClientId>(_client);

    if(dbusClient)
    {
        CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
        ::v1::org::genivi::CDL::ClientAPITypes::Types,
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>,
        CommonAPI::Deployable<::v1::org::genivi::CDL::ClientAPITypes::CDLValue, ClientAPITypes_::CDLValueDeployment_t>,
        uint64_t
        >>::sendSignal(
                dbusClient->getDBusId(),
                *this,
                "notifyData",
                "sis(yv)t",
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(_signalName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
        _type,
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(_unit, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
        CommonAPI::Deployable<::v1::org::genivi::CDL::ClientAPITypes::CDLValue, ClientAPITypes_::CDLValueDeployment_t>(_value, static_cast<ClientAPITypes_::CDLValueDeployment_t*>(nullptr)),
        _timeStamp
        );
    }
}

void ClientAPIDBusStubAdapterInternal::sendNotifyDataSelective(const std::string &_signalName, const ::v1::org::genivi::CDL::ClientAPITypes::Types &_type, const std::string &_unit, const ::v1::org::genivi::CDL::ClientAPITypes::CDLValue &_value, const uint64_t &_timeStamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList = _receivers;

    if (!_receivers)
        actualReceiverList = subscribersForNotifyDataSelective_;

    for (auto clientIdIterator = actualReceiverList->cbegin(); clientIdIterator != actualReceiverList->cend(); clientIdIterator++) {
        if (!_receivers || subscribersForNotifyDataSelective_->find(*clientIdIterator) != subscribersForNotifyDataSelective_->end()) {
            fireNotifyDataSelective(*clientIdIterator, _signalName, _type, _unit, _value, _timeStamp);
        }
    }
}

void ClientAPIDBusStubAdapterInternal::subscribeFornotifyDataSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = ClientAPIDBusStubAdapterHelper::stub_->onNotifyDataSelectiveSubscriptionRequested(clientId);
    if (ok) {
        subscribersForNotifyDataSelective_->insert(clientId);
        ClientAPIDBusStubAdapterHelper::stub_->onNotifyDataSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}

void ClientAPIDBusStubAdapterInternal::unsubscribeFromnotifyDataSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    subscribersForNotifyDataSelective_->erase(clientId);
    ClientAPIDBusStubAdapterHelper::stub_->onNotifyDataSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
}

std::shared_ptr<CommonAPI::ClientIdList> const ClientAPIDBusStubAdapterInternal::getSubscribersForNotifyDataSelective() {
    return subscribersForNotifyDataSelective_;
}


const ClientAPIDBusStubAdapterHelper::StubDispatcherTable& ClientAPIDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& ClientAPIDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

ClientAPIDBusStubAdapterInternal::ClientAPIDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ClientAPIDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<ClientAPIStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: register and authenticate client
             */
            { { "registerClient", "s" }, &org::genivi::CDL::ClientAPIDBusStubAdapterInternal::registerClientStubDispatcher },
            /**
             * description: set id list for listen. only specified data will notified to client
             */
            { { "setListenData", "uasi" }, &org::genivi::CDL::ClientAPIDBusStubAdapterInternal::setListenDataStubDispatcher },
            /**
             * description: get single data instantly
             */
            { { "getData", "us" }, &org::genivi::CDL::ClientAPIDBusStubAdapterInternal::getDataStubDispatcher }
            ,
            { { "subscribeFornotifyDataSelective", "" }, &org::genivi::CDL::ClientAPIDBusStubAdapterInternal::subscribeNotifyDataSelectiveStubDispatcher }
            ,
            { { "unsubscribeFromnotifyDataSelective", "" }, &org::genivi::CDL::ClientAPIDBusStubAdapterInternal::unsubscribeNotifyDataSelectiveStubDispatcher }
            }),
        stubAttributeTable_() {
    subscribersForNotifyDataSelective_ = std::make_shared<CommonAPI::ClientIdList>();

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::CDL::ClientAPIDBusStubAdapterInternal::getClientAPIInterfaceVersionStubDispatcher });
}

bool ClientAPIDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace CDL
} // namespace genivi
} // namespace org
} // namespace v1
