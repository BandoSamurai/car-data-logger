/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: CDL Client APIs for providing data to on-board components
 */
#include <v1/org/genivi/CDL/ClientAPIDBusProxy.hpp>

namespace v1 {
namespace org {
namespace genivi {
namespace CDL {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createClientAPIDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<ClientAPIDBusProxy>(_address, _connection);
}

INITIALIZER(registerClientAPIDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		ClientAPI::getInterface(),
		&createClientAPIDBusProxy);
}

ClientAPIDBusProxy::ClientAPIDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		notifyDataSelective_(*this, "notifyData", "sis(yv)t", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<ClientAPITypes_::CDLValueDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


ClientAPIDBusProxy::NotifyDataSelectiveEvent& ClientAPIDBusProxy::getNotifyDataSelectiveEvent() {
    return notifyDataSelective_;
}
    
    /**
     * description: register and authenticate client
     */
    void ClientAPIDBusProxy::registerClient(const std::string &_key, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::Handle &_handle, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_key(_key, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::Handle,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<ClientAPITypes::ResultCode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "registerClient",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_key,
_internalCallStatus,
deploy_handle, deploy_result);
_handle = deploy_handle.getValue();
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> ClientAPIDBusProxy::registerClientAsync(const std::string &_key, RegisterClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_key(_key, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::Handle,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<ClientAPITypes::ResultCode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "registerClient",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_key,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> _handle, CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _handle.getValue(), _result.getValue());
        },
        std::make_tuple(deploy_handle, deploy_result));
    }
    /**
     * description: set id list for listen. only specified data will notified to client
     */
    void ClientAPIDBusProxy::setListenData(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_signalNameList(_signalNameList, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::NotifyType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<ClientAPITypes::NotifyType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::ResultCode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setListenData",
        "uasi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_handle, deploy_signalNameList, deploy_type,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> ClientAPIDBusProxy::setListenDataAsync(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, SetListenDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>> deploy_signalNameList(_signalNameList, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::NotifyType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment> >,
            CommonAPI::Deployable<ClientAPITypes::NotifyType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::ResultCode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setListenData",
        "uasi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_handle, deploy_signalNameList, deploy_type,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: get single data instantly
     */
    void ClientAPIDBusProxy::getData(const ClientAPITypes::Handle &_handle, const std::string &_signalName, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_signalName(_signalName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::ResultCode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getData",
        "us",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_handle, deploy_signalName,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> ClientAPIDBusProxy::getDataAsync(const ClientAPITypes::Handle &_handle, const std::string &_signalName, GetDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_signalName(_signalName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<ClientAPITypes::ResultCode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getData",
        "us",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_handle, deploy_signalName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }


void ClientAPIDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace CDL
      } // namespace genivi
      } // namespace org
      } // namespace v1
