/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.5.v201601121433.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: CDL Client APIs for providing data to on-board components
 */
#include <v1/org/genivi/CDL/ClientAPISomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace CDL {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createClientAPISomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared<ClientAPISomeIPProxy>(_address, _connection);
}

INITIALIZER(registerClientAPISomeIPProxy) {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:org.genivi.CDL.ClientAPI:org.genivi.CDL.ClientAPI.SomeIp",
        0x3e8, 0x44c, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         ClientAPI::getInterface(),
         &createClientAPISomeIPProxy);
}

ClientAPISomeIPProxy::ClientAPISomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection , true)
,          notifyDataSelective_(*this, 0x4e20, CommonAPI::SomeIP::event_id_t(0x4e21), false, std::make_tuple(static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr), static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr), static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr), static_cast<::v1::org::genivi::CDL::ClientAPITypes_::CDLValueDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
    {
    }

    
    ClientAPISomeIPProxy::NotifyDataSelectiveEvent& ClientAPISomeIPProxy::getNotifyDataSelectiveEvent() {
        return notifyDataSelective_;
    }

    /**
     * description: register and authenticate client
     */
        void ClientAPISomeIPProxy::registerClient(const std::string &_key, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::Handle &_handle, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_key(_key, static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr));
            CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::SomeIP::EnumerationDeployment> deploy_result(static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        std::string, 
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        ClientAPITypes::Handle, 
                        CommonAPI::EmptyDeployment
                    >,
                    CommonAPI::Deployable<
                        ClientAPITypes::ResultCode, 
                        CommonAPI::SomeIP::EnumerationDeployment
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2710),
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_key,
    _internalCallStatus,
    deploy_handle, deploy_result);
    _handle = deploy_handle.getValue();
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> ClientAPISomeIPProxy::registerClientAsync(const std::string &_key, RegisterClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_key(_key, static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::SomeIP::EnumerationDeployment> deploy_result(static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    std::string, 
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    ClientAPITypes::Handle, 
                    CommonAPI::EmptyDeployment
                >,
                CommonAPI::Deployable<
                    ClientAPITypes::ResultCode, 
                    CommonAPI::SomeIP::EnumerationDeployment
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2710),
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_key,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> _handle, CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::SomeIP::EnumerationDeployment> _result) {
            	if (_callback)
            		_callback(_internalCallStatus, _handle.getValue(), _result.getValue());
            },
            std::make_tuple(deploy_handle, deploy_result));
    }
    /**
     * description: set id list for listen. only specified data will notified to client
     */
        void ClientAPISomeIPProxy::setListenData(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<std::vector<std::string>, CommonAPI::SomeIP::ArrayDeployment<CommonAPI::SomeIP::StringDeployment>> deploy_signalNameList(_signalNameList, static_cast<CommonAPI::SomeIP::ArrayDeployment<CommonAPI::SomeIP::StringDeployment>*>(nullptr));
            CommonAPI::Deployable<ClientAPITypes::NotifyType, CommonAPI::SomeIP::EnumerationDeployment> deploy_type(_type, static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
            CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::SomeIP::EnumerationDeployment> deploy_result(static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        ClientAPITypes::Handle, 
                        CommonAPI::EmptyDeployment
                    >,
                    CommonAPI::Deployable<
                        std::vector<std::string>, 
                        CommonAPI::SomeIP::ArrayDeployment<CommonAPI::SomeIP::StringDeployment>
                    >,
                    CommonAPI::Deployable<
                        ClientAPITypes::NotifyType, 
                        CommonAPI::SomeIP::EnumerationDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        ClientAPITypes::ResultCode, 
                        CommonAPI::SomeIP::EnumerationDeployment
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2711),
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_handle, deploy_signalNameList, deploy_type,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> ClientAPISomeIPProxy::setListenDataAsync(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, SetListenDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<std::string>, CommonAPI::SomeIP::ArrayDeployment<CommonAPI::SomeIP::StringDeployment>> deploy_signalNameList(_signalNameList, static_cast<CommonAPI::SomeIP::ArrayDeployment<CommonAPI::SomeIP::StringDeployment>*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::NotifyType, CommonAPI::SomeIP::EnumerationDeployment> deploy_type(_type, static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::SomeIP::EnumerationDeployment> deploy_result(static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    ClientAPITypes::Handle, 
                    CommonAPI::EmptyDeployment
                >,
                CommonAPI::Deployable<
                    std::vector<std::string>, 
                    CommonAPI::SomeIP::ArrayDeployment<CommonAPI::SomeIP::StringDeployment>
                >,
                CommonAPI::Deployable<
                    ClientAPITypes::NotifyType, 
                    CommonAPI::SomeIP::EnumerationDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    ClientAPITypes::ResultCode, 
                    CommonAPI::SomeIP::EnumerationDeployment
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2711),
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_handle, deploy_signalNameList, deploy_type,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::SomeIP::EnumerationDeployment> _result) {
            	if (_callback)
            		_callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /**
     * description: get single data instantly
     */
        void ClientAPISomeIPProxy::getData(const ClientAPITypes::Handle &_handle, const std::string &_signalName, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
            CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_signalName(_signalName, static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr));
            CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::SomeIP::EnumerationDeployment> deploy_result(static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        ClientAPITypes::Handle, 
                        CommonAPI::EmptyDeployment
                    >,
                    CommonAPI::Deployable<
                        std::string, 
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        ClientAPITypes::ResultCode, 
                        CommonAPI::SomeIP::EnumerationDeployment
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2712),
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_handle, deploy_signalName,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> ClientAPISomeIPProxy::getDataAsync(const ClientAPITypes::Handle &_handle, const std::string &_signalName, GetDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<ClientAPITypes::Handle, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::SomeIP::StringDeployment> deploy_signalName(_signalName, static_cast<CommonAPI::SomeIP::StringDeployment*>(nullptr));
        CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::SomeIP::EnumerationDeployment> deploy_result(static_cast<CommonAPI::SomeIP::EnumerationDeployment*>(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    ClientAPITypes::Handle, 
                    CommonAPI::EmptyDeployment
                >,
                CommonAPI::Deployable<
                    std::string, 
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    ClientAPITypes::ResultCode, 
                    CommonAPI::SomeIP::EnumerationDeployment
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2712),
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_handle, deploy_signalName,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<ClientAPITypes::ResultCode, CommonAPI::SomeIP::EnumerationDeployment> _result) {
            	if (_callback)
            		_callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    
    
    
    void ClientAPISomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }
    
} // namespace CDL
} // namespace genivi
} // namespace org
} // namespace v1
