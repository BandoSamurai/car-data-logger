/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: CDL Client APIs for providing data to on-board components
 */
#ifndef V1_ORG_GENIVI_CDL_Client_API_PROXY_HPP_
#define V1_ORG_GENIVI_CDL_Client_API_PROXY_HPP_

#include <v1/org/genivi/CDL/ClientAPIProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace CDL {

template <typename ... _AttributeExtensions>
class ClientAPIProxy
    : virtual public ClientAPI, 
      virtual public ClientAPIProxyBase,
      virtual public _AttributeExtensions... {
public:
    ClientAPIProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ClientAPIProxy();

    typedef ClientAPI InterfaceType;



    /**
     * description: notify data to client
     */
    /**
     * Returns the wrapper class that provides access to the broadcast notifyData.
     */
    virtual NotifyDataSelectiveEvent& getNotifyDataSelectiveEvent() {
        return delegate_->getNotifyDataSelectiveEvent();
    }

    /**
     * description: register and authenticate client
     * Calls registerClient with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void registerClient(const std::string &_key, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::Handle &_handle, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls registerClient with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> registerClientAsync(const std::string &_key, RegisterClientAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: set id list for listen. only specified data will notified to client
     * Calls setListenData with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setListenData(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setListenData with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setListenDataAsync(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, SetListenDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: get single data instantly
     * Calls getData with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getData(const ClientAPITypes::Handle &_handle, const std::string &_signalName, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getData with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDataAsync(const ClientAPITypes::Handle &_handle, const std::string &_signalName, GetDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ClientAPIProxyBase> delegate_;
};

typedef ClientAPIProxy<> ClientAPIProxyDefault;


//
// ClientAPIProxy Implementation
//
template <typename ... _AttributeExtensions>
ClientAPIProxy<_AttributeExtensions...>::ClientAPIProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<ClientAPIProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<ClientAPIProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ClientAPIProxy<_AttributeExtensions...>::~ClientAPIProxy() {
}

/**
 * description: register and authenticate client
 */
template <typename ... _AttributeExtensions>
void ClientAPIProxy<_AttributeExtensions...>::registerClient(const std::string &_key, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::Handle &_handle, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info) {
    delegate_->registerClient(_key, _internalCallStatus, _handle, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ClientAPIProxy<_AttributeExtensions...>::registerClientAsync(const std::string &_key, RegisterClientAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->registerClientAsync(_key, _callback, _info);
}
/**
 * description: set id list for listen. only specified data will notified to client
 */
template <typename ... _AttributeExtensions>
void ClientAPIProxy<_AttributeExtensions...>::setListenData(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setListenData(_handle, _signalNameList, _type, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ClientAPIProxy<_AttributeExtensions...>::setListenDataAsync(const ClientAPITypes::Handle &_handle, const std::vector<std::string> &_signalNameList, const ClientAPITypes::NotifyType &_type, SetListenDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        ClientAPITypes::ResultCode result = ClientAPITypes::ResultCode::RC_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setListenDataAsync(_handle, _signalNameList, _type, _callback, _info);
}
/**
 * description: get single data instantly
 */
template <typename ... _AttributeExtensions>
void ClientAPIProxy<_AttributeExtensions...>::getData(const ClientAPITypes::Handle &_handle, const std::string &_signalName, CommonAPI::CallStatus &_internalCallStatus, ClientAPITypes::ResultCode &_result, const CommonAPI::CallInfo *_info) {
    delegate_->getData(_handle, _signalName, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ClientAPIProxy<_AttributeExtensions...>::getDataAsync(const ClientAPITypes::Handle &_handle, const std::string &_signalName, GetDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getDataAsync(_handle, _signalName, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &ClientAPIProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ClientAPIProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ClientAPIProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ClientAPIProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ClientAPIProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace CDL
} // namespace genivi
} // namespace org
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_CDL_Client_API_PROXY_HPP_
