/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/org/genivi/CDL/ClientAPIStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace org {
namespace genivi {
namespace CDL {

ClientAPIStubDefault::ClientAPIStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(ClientAPI::getInterfaceVersion()) {
}

const CommonAPI::Version& ClientAPIStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

ClientAPIStubRemoteEvent* ClientAPIStubDefault::initStubAdapter(const std::shared_ptr<ClientAPIStubAdapter> &_adapter) {
    CommonAPI::Stub<ClientAPIStubAdapter, ClientAPIStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: register and authenticate client
 */
void ClientAPIStubDefault::registerClient(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _key, registerClientReply_t _reply) {
    (void)_client;
    (void) _key;
    ClientAPITypes::Handle handle = 0ul;
    ClientAPITypes::ResultCode result = ClientAPITypes::ResultCode::RC_OK;
    if (!result.validate()) {
        return;
    }
    _reply(handle, result);
}

/**
 * description: set id list for listen. only specified data will notified to client
 */
void ClientAPIStubDefault::setListenData(const std::shared_ptr<CommonAPI::ClientId> _client, ClientAPITypes::Handle _handle, std::vector<std::string> _signalNameList, ClientAPITypes::NotifyType _type, setListenDataReply_t _reply) {
    (void)_client;
    (void) _handle;
    (void) _signalNameList;
    (void) _type;
    ClientAPITypes::ResultCode result = ClientAPITypes::ResultCode::RC_OK;
    if (!result.validate()) {
        return;
    }
    _reply(result);
}

/**
 * description: get single data instantly
 */
void ClientAPIStubDefault::getData(const std::shared_ptr<CommonAPI::ClientId> _client, ClientAPITypes::Handle _handle, std::string _signalName, getDataReply_t _reply) {
    (void)_client;
    (void) _handle;
    (void) _signalName;
    ClientAPITypes::ResultCode result = ClientAPITypes::ResultCode::RC_OK;
    if (!result.validate()) {
        return;
    }
    _reply(result);
}


/**
 * description: notify data to client
 */
void ClientAPIStubDefault::fireNotifyDataSelective(const std::string &_signalName, const ::v1::org::genivi::CDL::ClientAPITypes::Types &_type, const std::string &_unit, const ::v1::org::genivi::CDL::ClientAPITypes::CDLValue &_value, const uint64_t &_timeStamp, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    if (!_type.validate()) {
        return;
    }
    assert((CommonAPI::Stub<ClientAPIStubAdapter, ClientAPIStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<ClientAPIStubAdapter, ClientAPIStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->sendNotifyDataSelective(_signalName, _type, _unit, _value, _timeStamp, _receivers);
}
void ClientAPIStubDefault::onNotifyDataSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) {
    (void)_client;
    (void)_event;
    // No operation in default
}
bool ClientAPIStubDefault::onNotifyDataSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    // Accept in default
    return true;
}
std::shared_ptr<CommonAPI::ClientIdList> const ClientAPIStubDefault::getSubscribersForNotifyDataSelective() {
    assert((CommonAPI::Stub<ClientAPIStubAdapter, ClientAPIStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<ClientAPIStubAdapter, ClientAPIStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        return(stubAdapter->getSubscribersForNotifyDataSelective());
    else
        return NULL;
}



ClientAPIStubDefault::RemoteEventHandler::RemoteEventHandler(ClientAPIStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace CDL
} // namespace genivi
} // namespace org
} // namespace v1
